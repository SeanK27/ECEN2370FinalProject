
SKadkhodayanFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08005874  08005874  00006874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a5c  08006a5c  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a5c  08006a5c  00007a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a64  08006a64  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a64  08006a64  00007a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a68  08006a68  00007a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006a6c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025b94  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025bb0  20025bb0  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013067  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c88  00000000  00000000  0001b0b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  0001dd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  0001f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d3d  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185f6  00000000  00000000  00047d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eee43  00000000  00000000  0006037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f1c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005360  00000000  00000000  0014f204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00154564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800585c 	.word	0x0800585c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	0800585c 	.word	0x0800585c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fe47 	bl	8002172 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f918 	bl	8000718 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8d5 	bl	8000698 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fa06 	bl	8000904 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_Visual_Demo>:

void LCD_Visual_Demo(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	visualDemo();
 8000500:	f000 fad2 	bl	8000aa8 <visualDemo>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	4b5a      	ldr	r3, [pc, #360]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	4a59      	ldr	r2, [pc, #356]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000518:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800051c:	6453      	str	r3, [r2, #68]	@ 0x44
 800051e:	4b57      	ldr	r3, [pc, #348]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000522:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000526:	61bb      	str	r3, [r7, #24]
 8000528:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	4b53      	ldr	r3, [pc, #332]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a52      	ldr	r2, [pc, #328]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b50      	ldr	r3, [pc, #320]	@ (800067c <LCD_GPIO_Init+0x174>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	4b45      	ldr	r3, [pc, #276]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	4a44      	ldr	r2, [pc, #272]	@ (800067c <LCD_GPIO_Init+0x174>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	@ 0x30
 8000572:	4b42      	ldr	r3, [pc, #264]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a3d      	ldr	r2, [pc, #244]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b3b      	ldr	r3, [pc, #236]	@ (800067c <LCD_GPIO_Init+0x174>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	4b37      	ldr	r3, [pc, #220]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a36      	ldr	r2, [pc, #216]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	4b30      	ldr	r3, [pc, #192]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a2f      	ldr	r2, [pc, #188]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <LCD_GPIO_Init+0x174>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005e0:	2302      	movs	r3, #2
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005e4:	230e      	movs	r3, #14
 80005e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4824      	ldr	r0, [pc, #144]	@ (8000680 <LCD_GPIO_Init+0x178>)
 80005f0:	f002 f9f0 	bl	80029d4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 8000602:	f002 f9e7 	bl	80029d4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000606:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4619      	mov	r1, r3
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <LCD_GPIO_Init+0x180>)
 8000614:	f002 f9de 	bl	80029d4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000618:	2348      	movs	r3, #72	@ 0x48
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	481a      	ldr	r0, [pc, #104]	@ (800068c <LCD_GPIO_Init+0x184>)
 8000624:	f002 f9d6 	bl	80029d4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4619      	mov	r1, r3
 8000634:	4816      	ldr	r0, [pc, #88]	@ (8000690 <LCD_GPIO_Init+0x188>)
 8000636:	f002 f9cd 	bl	80029d4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800063a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800063e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4619      	mov	r1, r3
 8000646:	4813      	ldr	r0, [pc, #76]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 8000648:	f002 f9c4 	bl	80029d4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800064c:	2303      	movs	r3, #3
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000650:	2309      	movs	r3, #9
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <LCD_GPIO_Init+0x17c>)
 800065c:	f002 f9ba 	bl	80029d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000660:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	4619      	mov	r1, r3
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <LCD_GPIO_Init+0x18c>)
 800066e:	f002 f9b1 	bl	80029d4 <HAL_GPIO_Init>
}
 8000672:	bf00      	nop
 8000674:	3730      	adds	r7, #48	@ 0x30
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400
 8000688:	40020800 	.word	0x40020800
 800068c:	40020c00 	.word	0x40020c00
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800

08000698 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80006a6:	23f0      	movs	r3, #240	@ 0xf0
 80006a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006b8:	23ff      	movs	r3, #255	@ 0xff
 80006ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006c6:	2305      	movs	r3, #5
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <LTCD_Layer_Init+0x78>)
 80006d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006d4:	23f0      	movs	r3, #240	@ 0xf0
 80006d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4806      	ldr	r0, [pc, #24]	@ (8000714 <LTCD_Layer_Init+0x7c>)
 80006fa:	f002 fecd 	bl	8003498 <HAL_LTDC_ConfigLayer>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000704:	f000 fa7c 	bl	8000c00 <LCD_Error_Handler>
	}
}
 8000708:	bf00      	nop
 800070a:	3740      	adds	r7, #64	@ 0x40
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000114 	.word	0x20000114
 8000714:	20000038 	.word	0x20000038

08000718 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <LTCD__Init+0xb0>)
 800071e:	4a2b      	ldr	r2, [pc, #172]	@ (80007cc <LTCD__Init+0xb4>)
 8000720:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000722:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <LTCD__Init+0xb0>)
 8000724:	2209      	movs	r2, #9
 8000726:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <LTCD__Init+0xb0>)
 800072a:	2201      	movs	r2, #1
 800072c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <LTCD__Init+0xb0>)
 8000730:	221d      	movs	r2, #29
 8000732:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <LTCD__Init+0xb0>)
 8000736:	2203      	movs	r2, #3
 8000738:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800073a:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <LTCD__Init+0xb0>)
 800073c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000742:	4b21      	ldr	r3, [pc, #132]	@ (80007c8 <LTCD__Init+0xb0>)
 8000744:	f240 1243 	movw	r2, #323	@ 0x143
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <LTCD__Init+0xb0>)
 800074c:	f240 1217 	movw	r2, #279	@ 0x117
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000752:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <LTCD__Init+0xb0>)
 8000754:	f240 1247 	movw	r2, #327	@ 0x147
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <LTCD__Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <LTCD__Init+0xb0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <LTCD__Init+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <LTCD__Init+0xb8>)
 8000774:	2208      	movs	r2, #8
 8000776:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <LTCD__Init+0xb8>)
 800077a:	22c0      	movs	r2, #192	@ 0xc0
 800077c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <LTCD__Init+0xb8>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <LTCD__Init+0xb8>)
 8000786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <LTCD__Init+0xb8>)
 800078e:	f003 fcdd 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007a4:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <LTCD__Init+0xb0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80007aa:	f7ff fead 	bl	8000508 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007ae:	4806      	ldr	r0, [pc, #24]	@ (80007c8 <LTCD__Init+0xb0>)
 80007b0:	f002 fda2 	bl	80032f8 <HAL_LTDC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ba:	f000 fa21 	bl	8000c00 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007be:	f000 fa25 	bl	8000c0c <ili9341_Init>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000038 	.word	0x20000038
 80007cc:	40016800 	.word	0x40016800
 80007d0:	200000e0 	.word	0x200000e0

080007d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	460b      	mov	r3, r1
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007e6:	88ba      	ldrh	r2, [r7, #4]
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	461a      	mov	r2, r3
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	4413      	add	r3, r2
 80007f6:	4905      	ldr	r1, [pc, #20]	@ (800080c <LCD_Draw_Pixel+0x38>)
 80007f8:	887a      	ldrh	r2, [r7, #2]
 80007fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000114 	.word	0x20000114

08000810 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	80bb      	strh	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	807b      	strh	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 800082e:	887b      	ldrh	r3, [r7, #2]
 8000830:	425b      	negs	r3, r3
 8000832:	b29b      	uxth	r3, r3
 8000834:	81fb      	strh	r3, [r7, #14]
 8000836:	e034      	b.n	80008a2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000838:	887b      	ldrh	r3, [r7, #2]
 800083a:	425b      	negs	r3, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	81bb      	strh	r3, [r7, #12]
 8000840:	e024      	b.n	800088c <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000842:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000846:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800084a:	fb03 f202 	mul.w	r2, r3, r2
 800084e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000852:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000856:	fb01 f303 	mul.w	r3, r1, r3
 800085a:	441a      	add	r2, r3
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	8879      	ldrh	r1, [r7, #2]
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	429a      	cmp	r2, r3
 8000866:	dc0b      	bgt.n	8000880 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000868:	89ba      	ldrh	r2, [r7, #12]
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	4413      	add	r3, r2
 800086e:	b298      	uxth	r0, r3
 8000870:	89fa      	ldrh	r2, [r7, #14]
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	b29b      	uxth	r3, r3
 8000878:	883a      	ldrh	r2, [r7, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	f7ff ffaa 	bl	80007d4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000884:	b29b      	uxth	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	81bb      	strh	r3, [r7, #12]
 800088c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	429a      	cmp	r2, r3
 8000894:	ddd5      	ble.n	8000842 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000896:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800089a:	b29b      	uxth	r3, r3
 800089c:	3301      	adds	r3, #1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	81fb      	strh	r3, [r7, #14]
 80008a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	ddc5      	ble.n	8000838 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b085      	sub	sp, #20
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	4623      	mov	r3, r4
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	4603      	mov	r3, r0
 80008ca:	80bb      	strh	r3, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80008d4:	2300      	movs	r3, #0
 80008d6:	81fb      	strh	r3, [r7, #14]
 80008d8:	e00b      	b.n	80008f2 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 80008da:	89fa      	ldrh	r2, [r7, #14]
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	b299      	uxth	r1, r3
 80008e2:	883a      	ldrh	r2, [r7, #0]
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff74 	bl	80007d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	3301      	adds	r3, #1
 80008f0:	81fb      	strh	r3, [r7, #14]
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d3ef      	bcc.n	80008da <LCD_Draw_Vertical_Line+0x24>
  }
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	460a      	mov	r2, r1
 800090e:	71fb      	strb	r3, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10e      	bne.n	8000938 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e007      	b.n	8000930 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000920:	4908      	ldr	r1, [pc, #32]	@ (8000944 <LCD_Clear+0x40>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	88ba      	ldrh	r2, [r7, #4]
 8000926:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3301      	adds	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000936:	d3f3      	bcc.n	8000920 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	20000114 	.word	0x20000114

08000948 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <LCD_SetTextColor+0x1c>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	8013      	strh	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	20000000 	.word	0x20000000

08000968 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000970:	4a04      	ldr	r2, [pc, #16]	@ (8000984 <LCD_SetFont+0x1c>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6013      	str	r3, [r2, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000110 	.word	0x20000110

08000988 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	603a      	str	r2, [r7, #0]
 8000992:	80fb      	strh	r3, [r7, #6]
 8000994:	460b      	mov	r3, r1
 8000996:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	e04c      	b.n	8000a40 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	e03f      	b.n	8000a2c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	889b      	ldrh	r3, [r3, #4]
 80009be:	4a27      	ldr	r2, [pc, #156]	@ (8000a5c <LCD_Draw_Char+0xd4>)
 80009c0:	fba2 2303 	umull	r2, r3, r2, r3
 80009c4:	08db      	lsrs	r3, r3, #3
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	409a      	lsls	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	fa42 f303 	asr.w	r3, r2, r3
 80009d4:	400b      	ands	r3, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d104      	bne.n	80009e4 <LCD_Draw_Char+0x5c>
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	2b0c      	cmp	r3, #12
 80009e2:	d920      	bls.n	8000a26 <LCD_Draw_Char+0x9e>
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	461a      	mov	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	fa42 f303 	asr.w	r3, r2, r3
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d104      	bne.n	8000a08 <LCD_Draw_Char+0x80>
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	2b0c      	cmp	r3, #12
 8000a06:	d80e      	bhi.n	8000a26 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b298      	uxth	r0, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <LCD_Draw_Char+0xd8>)
 8000a1e:	8812      	ldrh	r2, [r2, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f7ff fed7 	bl	80007d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	889b      	ldrh	r3, [r3, #4]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d3b8      	bcc.n	80009ac <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <LCD_Draw_Char+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	88db      	ldrh	r3, [r3, #6]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d3ab      	bcc.n	80009a6 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000110 	.word	0x20000110
 8000a5c:	aaaaaaab 	.word	0xaaaaaaab
 8000a60:	20000000 	.word	0x20000000

08000a64 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	3b20      	subs	r3, #32
 8000a7a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <LCD_DisplayChar+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	4907      	ldr	r1, [pc, #28]	@ (8000aa4 <LCD_DisplayChar+0x40>)
 8000a86:	6809      	ldr	r1, [r1, #0]
 8000a88:	88c9      	ldrh	r1, [r1, #6]
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	441a      	add	r2, r3
 8000a92:	88b9      	ldrh	r1, [r7, #4]
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff76 	bl	8000988 <LCD_Draw_Char>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000110 	.word	0x20000110

08000aa8 <visualDemo>:

void visualDemo(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	// This for loop just illustrates how with using logic and for loops, you can create interesting things
	// this may or not be useful ;)
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000aae:	2300      	movs	r3, #0
 8000ab0:	80bb      	strh	r3, [r7, #4]
 8000ab2:	e022      	b.n	8000afa <visualDemo+0x52>
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	e019      	b.n	8000aee <visualDemo+0x46>
			if (x & 32)
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <visualDemo+0x30>
				frameBuffer[x*y] = LCD_COLOR_WHITE;
 8000ac4:	88fb      	ldrh	r3, [r7, #6]
 8000ac6:	88ba      	ldrh	r2, [r7, #4]
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf8 <visualDemo+0x150>)
 8000ace:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ad6:	e007      	b.n	8000ae8 <visualDemo+0x40>
			else
				frameBuffer[x*y] = LCD_COLOR_BLACK;
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	88ba      	ldrh	r2, [r7, #4]
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a45      	ldr	r2, [pc, #276]	@ (8000bf8 <visualDemo+0x150>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(x=0; x < LCD_PIXEL_WIDTH; x++){
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	3301      	adds	r3, #1
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	2bef      	cmp	r3, #239	@ 0xef
 8000af2:	d9e2      	bls.n	8000aba <visualDemo+0x12>
	for(y=0; y<LCD_PIXEL_HEIGHT; y++){
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	3301      	adds	r3, #1
 8000af8:	80bb      	strh	r3, [r7, #4]
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b00:	d3d8      	bcc.n	8000ab4 <visualDemo+0xc>
		}
	}

	HAL_Delay(1500);
 8000b02:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b06:	f001 fbe9 	bl	80022dc <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_GREEN);
 8000b0a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fef8 	bl	8000904 <LCD_Clear>
	HAL_Delay(1500);
 8000b14:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b18:	f001 fbe0 	bl	80022dc <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_RED);
 8000b1c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff feef 	bl	8000904 <LCD_Clear>
	HAL_Delay(1500);
 8000b26:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b2a:	f001 fbd7 	bl	80022dc <HAL_Delay>
	LCD_Clear(0, LCD_COLOR_WHITE);
 8000b2e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fee6 	bl	8000904 <LCD_Clear>
	LCD_Draw_Vertical_Line(10,10,250,LCD_COLOR_MAGENTA);
 8000b38:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b3c:	22fa      	movs	r2, #250	@ 0xfa
 8000b3e:	210a      	movs	r1, #10
 8000b40:	200a      	movs	r0, #10
 8000b42:	f7ff feb8 	bl	80008b6 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000b46:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b4a:	f001 fbc7 	bl	80022dc <HAL_Delay>
	LCD_Draw_Vertical_Line(230,10,250,LCD_COLOR_MAGENTA);
 8000b4e:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000b52:	22fa      	movs	r2, #250	@ 0xfa
 8000b54:	210a      	movs	r1, #10
 8000b56:	20e6      	movs	r0, #230	@ 0xe6
 8000b58:	f7ff fead 	bl	80008b6 <LCD_Draw_Vertical_Line>
	HAL_Delay(1500);
 8000b5c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b60:	f001 fbbc 	bl	80022dc <HAL_Delay>

	LCD_Draw_Circle_Fill(125,150,20,LCD_COLOR_BLACK);
 8000b64:	2300      	movs	r3, #0
 8000b66:	2214      	movs	r2, #20
 8000b68:	2196      	movs	r1, #150	@ 0x96
 8000b6a:	207d      	movs	r0, #125	@ 0x7d
 8000b6c:	f7ff fe50 	bl	8000810 <LCD_Draw_Circle_Fill>
	HAL_Delay(2000);
 8000b70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000b74:	f001 fbb2 	bl	80022dc <HAL_Delay>

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000b78:	211f      	movs	r1, #31
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fec2 	bl	8000904 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fee1 	bl	8000948 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000b86:	481d      	ldr	r0, [pc, #116]	@ (8000bfc <visualDemo+0x154>)
 8000b88:	f7ff feee 	bl	8000968 <LCD_SetFont>

	LCD_DisplayChar(100,140,'H');
 8000b8c:	2248      	movs	r2, #72	@ 0x48
 8000b8e:	218c      	movs	r1, #140	@ 0x8c
 8000b90:	2064      	movs	r0, #100	@ 0x64
 8000b92:	f7ff ff67 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(115,140,'e');
 8000b96:	2265      	movs	r2, #101	@ 0x65
 8000b98:	218c      	movs	r1, #140	@ 0x8c
 8000b9a:	2073      	movs	r0, #115	@ 0x73
 8000b9c:	f7ff ff62 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(125,140,'l');
 8000ba0:	226c      	movs	r2, #108	@ 0x6c
 8000ba2:	218c      	movs	r1, #140	@ 0x8c
 8000ba4:	207d      	movs	r0, #125	@ 0x7d
 8000ba6:	f7ff ff5d 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(130,140,'l');
 8000baa:	226c      	movs	r2, #108	@ 0x6c
 8000bac:	218c      	movs	r1, #140	@ 0x8c
 8000bae:	2082      	movs	r0, #130	@ 0x82
 8000bb0:	f7ff ff58 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'o');
 8000bb4:	226f      	movs	r2, #111	@ 0x6f
 8000bb6:	218c      	movs	r1, #140	@ 0x8c
 8000bb8:	208c      	movs	r0, #140	@ 0x8c
 8000bba:	f7ff ff53 	bl	8000a64 <LCD_DisplayChar>

	LCD_DisplayChar(100,160,'W');
 8000bbe:	2257      	movs	r2, #87	@ 0x57
 8000bc0:	21a0      	movs	r1, #160	@ 0xa0
 8000bc2:	2064      	movs	r0, #100	@ 0x64
 8000bc4:	f7ff ff4e 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(115,160,'o');
 8000bc8:	226f      	movs	r2, #111	@ 0x6f
 8000bca:	21a0      	movs	r1, #160	@ 0xa0
 8000bcc:	2073      	movs	r0, #115	@ 0x73
 8000bce:	f7ff ff49 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'r');
 8000bd2:	2272      	movs	r2, #114	@ 0x72
 8000bd4:	21a0      	movs	r1, #160	@ 0xa0
 8000bd6:	207d      	movs	r0, #125	@ 0x7d
 8000bd8:	f7ff ff44 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(130,160,'l');
 8000bdc:	226c      	movs	r2, #108	@ 0x6c
 8000bde:	21a0      	movs	r1, #160	@ 0xa0
 8000be0:	2082      	movs	r0, #130	@ 0x82
 8000be2:	f7ff ff3f 	bl	8000a64 <LCD_DisplayChar>
	LCD_DisplayChar(140,160,'d');
 8000be6:	2264      	movs	r2, #100	@ 0x64
 8000be8:	21a0      	movs	r1, #160	@ 0xa0
 8000bea:	208c      	movs	r0, #140	@ 0x8c
 8000bec:	f7ff ff3a 	bl	8000a64 <LCD_DisplayChar>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000114 	.word	0x20000114
 8000bfc:	20000004 	.word	0x20000004

08000c00 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <LCD_Error_Handler+0x8>

08000c0c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c10:	f000 f9fe 	bl	8001010 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c14:	20ca      	movs	r0, #202	@ 0xca
 8000c16:	f000 f943 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c1a:	20c3      	movs	r0, #195	@ 0xc3
 8000c1c:	f000 f94d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c20:	2008      	movs	r0, #8
 8000c22:	f000 f94a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c26:	2050      	movs	r0, #80	@ 0x50
 8000c28:	f000 f947 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c2c:	20cf      	movs	r0, #207	@ 0xcf
 8000c2e:	f000 f937 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f941 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c38:	20c1      	movs	r0, #193	@ 0xc1
 8000c3a:	f000 f93e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c3e:	2030      	movs	r0, #48	@ 0x30
 8000c40:	f000 f93b 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c44:	20ed      	movs	r0, #237	@ 0xed
 8000c46:	f000 f92b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c4a:	2064      	movs	r0, #100	@ 0x64
 8000c4c:	f000 f935 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f932 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c56:	2012      	movs	r0, #18
 8000c58:	f000 f92f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c5c:	2081      	movs	r0, #129	@ 0x81
 8000c5e:	f000 f92c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c62:	20e8      	movs	r0, #232	@ 0xe8
 8000c64:	f000 f91c 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c68:	2085      	movs	r0, #133	@ 0x85
 8000c6a:	f000 f926 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f000 f923 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c74:	2078      	movs	r0, #120	@ 0x78
 8000c76:	f000 f920 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000c7a:	20cb      	movs	r0, #203	@ 0xcb
 8000c7c:	f000 f910 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000c80:	2039      	movs	r0, #57	@ 0x39
 8000c82:	f000 f91a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000c86:	202c      	movs	r0, #44	@ 0x2c
 8000c88:	f000 f917 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 f914 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000c92:	2034      	movs	r0, #52	@ 0x34
 8000c94:	f000 f911 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 f90e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000c9e:	20f7      	movs	r0, #247	@ 0xf7
 8000ca0:	f000 f8fe 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000ca4:	2020      	movs	r0, #32
 8000ca6:	f000 f908 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000caa:	20ea      	movs	r0, #234	@ 0xea
 8000cac:	f000 f8f8 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f902 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f8ff 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000cbc:	20b1      	movs	r0, #177	@ 0xb1
 8000cbe:	f000 f8ef 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f8f9 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000cc8:	201b      	movs	r0, #27
 8000cca:	f000 f8f6 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000cce:	20b6      	movs	r0, #182	@ 0xb6
 8000cd0:	f000 f8e6 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f000 f8f0 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000cda:	20a2      	movs	r0, #162	@ 0xa2
 8000cdc:	f000 f8ed 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000ce0:	20c0      	movs	r0, #192	@ 0xc0
 8000ce2:	f000 f8dd 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000ce6:	2010      	movs	r0, #16
 8000ce8:	f000 f8e7 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000cec:	20c1      	movs	r0, #193	@ 0xc1
 8000cee:	f000 f8d7 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000cf2:	2010      	movs	r0, #16
 8000cf4:	f000 f8e1 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000cf8:	20c5      	movs	r0, #197	@ 0xc5
 8000cfa:	f000 f8d1 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000cfe:	2045      	movs	r0, #69	@ 0x45
 8000d00:	f000 f8db 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d04:	2015      	movs	r0, #21
 8000d06:	f000 f8d8 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d0a:	20c7      	movs	r0, #199	@ 0xc7
 8000d0c:	f000 f8c8 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d10:	2090      	movs	r0, #144	@ 0x90
 8000d12:	f000 f8d2 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d16:	2036      	movs	r0, #54	@ 0x36
 8000d18:	f000 f8c2 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d1c:	20c8      	movs	r0, #200	@ 0xc8
 8000d1e:	f000 f8cc 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d22:	20f2      	movs	r0, #242	@ 0xf2
 8000d24:	f000 f8bc 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f8c6 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d2e:	20b0      	movs	r0, #176	@ 0xb0
 8000d30:	f000 f8b6 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d34:	20c2      	movs	r0, #194	@ 0xc2
 8000d36:	f000 f8c0 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d3a:	20b6      	movs	r0, #182	@ 0xb6
 8000d3c:	f000 f8b0 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f000 f8ba 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d46:	20a7      	movs	r0, #167	@ 0xa7
 8000d48:	f000 f8b7 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d4c:	2027      	movs	r0, #39	@ 0x27
 8000d4e:	f000 f8b4 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d52:	2004      	movs	r0, #4
 8000d54:	f000 f8b1 	bl	8000eba <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d58:	202a      	movs	r0, #42	@ 0x2a
 8000d5a:	f000 f8a1 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f8ab 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 f8a8 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f8a5 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000d70:	20ef      	movs	r0, #239	@ 0xef
 8000d72:	f000 f8a2 	bl	8000eba <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000d76:	202b      	movs	r0, #43	@ 0x2b
 8000d78:	f000 f892 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f89c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f899 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 f896 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000d8e:	203f      	movs	r0, #63	@ 0x3f
 8000d90:	f000 f893 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000d94:	20f6      	movs	r0, #246	@ 0xf6
 8000d96:	f000 f883 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 f88d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 f88a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000da6:	2006      	movs	r0, #6
 8000da8:	f000 f887 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000dac:	202c      	movs	r0, #44	@ 0x2c
 8000dae:	f000 f877 	bl	8000ea0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000db2:	20c8      	movs	r0, #200	@ 0xc8
 8000db4:	f000 f9e8 	bl	8001188 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000db8:	2026      	movs	r0, #38	@ 0x26
 8000dba:	f000 f871 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f000 f87b 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000dc4:	20e0      	movs	r0, #224	@ 0xe0
 8000dc6:	f000 f86b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000dca:	200f      	movs	r0, #15
 8000dcc:	f000 f875 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000dd0:	2029      	movs	r0, #41	@ 0x29
 8000dd2:	f000 f872 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000dd6:	2024      	movs	r0, #36	@ 0x24
 8000dd8:	f000 f86f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f000 f86c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000de2:	200e      	movs	r0, #14
 8000de4:	f000 f869 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000de8:	2009      	movs	r0, #9
 8000dea:	f000 f866 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000dee:	204e      	movs	r0, #78	@ 0x4e
 8000df0:	f000 f863 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000df4:	2078      	movs	r0, #120	@ 0x78
 8000df6:	f000 f860 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000dfa:	203c      	movs	r0, #60	@ 0x3c
 8000dfc:	f000 f85d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e00:	2009      	movs	r0, #9
 8000e02:	f000 f85a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e06:	2013      	movs	r0, #19
 8000e08:	f000 f857 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f000 f854 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e12:	2017      	movs	r0, #23
 8000e14:	f000 f851 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f000 f84e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f84b 	bl	8000eba <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e24:	20e1      	movs	r0, #225	@ 0xe1
 8000e26:	f000 f83b 	bl	8000ea0 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f845 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e30:	2016      	movs	r0, #22
 8000e32:	f000 f842 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e36:	201b      	movs	r0, #27
 8000e38:	f000 f83f 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f000 f83c 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e42:	2011      	movs	r0, #17
 8000e44:	f000 f839 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e48:	2007      	movs	r0, #7
 8000e4a:	f000 f836 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e4e:	2031      	movs	r0, #49	@ 0x31
 8000e50:	f000 f833 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e54:	2033      	movs	r0, #51	@ 0x33
 8000e56:	f000 f830 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e5a:	2042      	movs	r0, #66	@ 0x42
 8000e5c:	f000 f82d 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e60:	2005      	movs	r0, #5
 8000e62:	f000 f82a 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e66:	200c      	movs	r0, #12
 8000e68:	f000 f827 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000e6c:	200a      	movs	r0, #10
 8000e6e:	f000 f824 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000e72:	2028      	movs	r0, #40	@ 0x28
 8000e74:	f000 f821 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000e78:	202f      	movs	r0, #47	@ 0x2f
 8000e7a:	f000 f81e 	bl	8000eba <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f000 f81b 	bl	8000eba <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000e84:	2011      	movs	r0, #17
 8000e86:	f000 f80b 	bl	8000ea0 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e8a:	20c8      	movs	r0, #200	@ 0xc8
 8000e8c:	f000 f97c 	bl	8001188 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000e90:	2029      	movs	r0, #41	@ 0x29
 8000e92:	f000 f805 	bl	8000ea0 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000e96:	202c      	movs	r0, #44	@ 0x2c
 8000e98:	f000 f802 	bl	8000ea0 <ili9341_Write_Reg>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 f949 	bl	8001144 <LCD_IO_WriteReg>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f91a 	bl	8001100 <LCD_IO_WriteData>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ed8:	4819      	ldr	r0, [pc, #100]	@ (8000f40 <SPI_Init+0x6c>)
 8000eda:	f003 fd16 	bl	800490a <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d12b      	bne.n	8000f3c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SPI_Init+0x6c>)
 8000ee6:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <SPI_Init+0x70>)
 8000ee8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <SPI_Init+0x6c>)
 8000eec:	2218      	movs	r2, #24
 8000eee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <SPI_Init+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <SPI_Init+0x6c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <SPI_Init+0x6c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <SPI_Init+0x6c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <SPI_Init+0x6c>)
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <SPI_Init+0x6c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f14:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <SPI_Init+0x6c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <SPI_Init+0x6c>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <SPI_Init+0x6c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SPI_Init+0x6c>)
 8000f2a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <SPI_Init+0x6c>)
 8000f32:	f000 f833 	bl	8000f9c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f36:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <SPI_Init+0x6c>)
 8000f38:	f003 faf2 	bl	8004520 <HAL_SPI_Init>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20025914 	.word	0x20025914
 8000f44:	40015000 	.word	0x40015000

08000f48 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <SPI_Write+0x34>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1db9      	adds	r1, r7, #6
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4808      	ldr	r0, [pc, #32]	@ (8000f80 <SPI_Write+0x38>)
 8000f60:	f003 fb8f 	bl	8004682 <HAL_SPI_Transmit>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000f6e:	f000 f809 	bl	8000f84 <SPI_Error>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20025914 	.word	0x20025914

08000f84 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <SPI_Error+0x14>)
 8000f8a:	f003 fb52 	bl	8004632 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000f8e:	f7ff ffa1 	bl	8000ed4 <SPI_Init>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20025914 	.word	0x20025914

08000f9c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <SPI_MspInit+0x6c>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fac:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <SPI_MspInit+0x6c>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	f003 0320 	and.w	r3, r3, #32
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000fdc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000fea:	2301      	movs	r3, #1
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <SPI_MspInit+0x70>)
 8000ffa:	f001 fceb 	bl	80029d4 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40021400 	.word	0x40021400

08001010 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001016:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <LCD_IO_Init+0xe0>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d164      	bne.n	80010e8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800101e:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <LCD_IO_Init+0xe0>)
 8001020:	2201      	movs	r2, #1
 8001022:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	4a31      	ldr	r2, [pc, #196]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6313      	str	r3, [r2, #48]	@ 0x30
 8001034:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001038:	f003 0308 	and.w	r3, r3, #8
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001044:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4827      	ldr	r0, [pc, #156]	@ (80010f8 <LCD_IO_Init+0xe8>)
 800105a:	f001 fcbb 	bl	80029d4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <LCD_IO_Init+0xe4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800107a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001088:	2302      	movs	r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <LCD_IO_Init+0xe8>)
 8001094:	f001 fc9e 	bl	80029d4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <LCD_IO_Init+0xe4>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <LCD_IO_Init+0xe4>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <LCD_IO_Init+0xe4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80010b4:	2304      	movs	r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LCD_IO_Init+0xec>)
 80010cc:	f001 fc82 	bl	80029d4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <LCD_IO_Init+0xec>)
 80010d6:	f001 ff35 	bl	8002f44 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80010da:	2201      	movs	r2, #1
 80010dc:	2104      	movs	r1, #4
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <LCD_IO_Init+0xec>)
 80010e0:	f001 ff30 	bl	8002f44 <HAL_GPIO_WritePin>

    SPI_Init();
 80010e4:	f7ff fef6 	bl	8000ed4 <SPI_Init>
  }
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2002596c 	.word	0x2002596c
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00
 80010fc:	40020800 	.word	0x40020800

08001100 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001110:	480a      	ldr	r0, [pc, #40]	@ (800113c <LCD_IO_WriteData+0x3c>)
 8001112:	f001 ff17 	bl	8002f44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001116:	2200      	movs	r2, #0
 8001118:	2104      	movs	r1, #4
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <LCD_IO_WriteData+0x40>)
 800111c:	f001 ff12 	bl	8002f44 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff10 	bl	8000f48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001128:	2201      	movs	r2, #1
 800112a:	2104      	movs	r1, #4
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <LCD_IO_WriteData+0x40>)
 800112e:	f001 ff09 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40020800 	.word	0x40020800

08001144 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001154:	480a      	ldr	r0, [pc, #40]	@ (8001180 <LCD_IO_WriteReg+0x3c>)
 8001156:	f001 fef5 	bl	8002f44 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800115a:	2200      	movs	r2, #0
 800115c:	2104      	movs	r1, #4
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <LCD_IO_WriteReg+0x40>)
 8001160:	f001 fef0 	bl	8002f44 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff feed 	bl	8000f48 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800116e:	2201      	movs	r2, #1
 8001170:	2104      	movs	r1, #4
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <LCD_IO_WriteReg+0x40>)
 8001174:	f001 fee6 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40020800 	.word	0x40020800

08001188 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f001 f8a3 	bl	80022dc <HAL_Delay>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <SystemClockOverride>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SystemClockOverride(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
 80011a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <SystemClockOverride+0x7c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <SystemClockOverride+0x7c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <SystemClockOverride+0x7c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ca:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d6:	2308      	movs	r3, #8
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011da:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011e4:	2307      	movs	r3, #7
 80011e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fb2a 	bl	8003844 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80011f0:	230f      	movs	r3, #15
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2302      	movs	r3, #2
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001200:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001206:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001208:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800120c:	2105      	movs	r1, #5
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fd90 	bl	8003d34 <HAL_RCC_ClockConfig>
}
 8001214:	bf00      	nop
 8001216:	3748      	adds	r7, #72	@ 0x48
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001226:	f000 ffe7 	bl	80021f8 <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  SystemClockOverride();
 800122a:	f7ff ffb9 	bl	80011a0 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122e:	f000 fa89 	bl	8001744 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001232:	f000 f827 	bl	8001284 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001236:	f000 fa05 	bl	8001644 <MX_TIM3_Init>
  MX_ADC2_Init();
 800123a:	f000 f875 	bl	8001328 <MX_ADC2_Init>
  MX_I2C3_Init();
 800123e:	f000 f8c5 	bl	80013cc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001242:	f000 f903 	bl	800144c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001246:	f000 f9c7 	bl	80015d8 <MX_SPI5_Init>
  MX_RNG_Init();
 800124a:	f000 f9b1 	bl	80015b0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Left
 800124e:	2100      	movs	r1, #0
 8001250:	480b      	ldr	r0, [pc, #44]	@ (8001280 <main+0x60>)
 8001252:	f003 fced 	bl	8004c30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// Right
 8001256:	2108      	movs	r1, #8
 8001258:	4809      	ldr	r0, [pc, #36]	@ (8001280 <main+0x60>)
 800125a:	f003 fce9 	bl	8004c30 <HAL_TIM_PWM_Start>

  joyPosTypeDef joyPos = {0};
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  motorPowTypeDef motorPow = {0};
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]

  ApplicationInit();
 800126c:	f7ff f936 	bl	80004dc <ApplicationInit>

  LCD_Visual_Demo();
 8001270:	f7ff f944 	bl	80004fc <LCD_Visual_Demo>

  HAL_Delay(5000);
 8001274:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001278:	f001 f830 	bl	80022dc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <main+0x5c>
 8001280:	20025b64 	.word	0x20025b64

08001284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001296:	4b21      	ldr	r3, [pc, #132]	@ (800131c <MX_ADC1_Init+0x98>)
 8001298:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <MX_ADC1_Init+0x9c>)
 800129a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <MX_ADC1_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	@ (800131c <MX_ADC1_Init+0x98>)
 80012a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012aa:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <MX_ADC1_Init+0x98>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_ADC1_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b6:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_ADC1_Init+0x98>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_ADC1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c4:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_ADC1_Init+0x98>)
 80012c6:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <MX_ADC1_Init+0xa0>)
 80012c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_ADC1_Init+0x98>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_ADC1_Init+0x98>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_ADC1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <MX_ADC1_Init+0x98>)
 80012e6:	f001 f81d 	bl	8002324 <HAL_ADC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012f0:	f000 fbd6 	bl	8001aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012f4:	2305      	movs	r3, #5
 80012f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_ADC1_Init+0x98>)
 8001306:	f001 f851 	bl	80023ac <HAL_ADC_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001310:	f000 fbc6 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20025970 	.word	0x20025970
 8001320:	40012000 	.word	0x40012000
 8001324:	0f000001 	.word	0x0f000001

08001328 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_ADC2_Init+0x98>)
 800133c:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <MX_ADC2_Init+0x9c>)
 800133e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800134c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001350:	2201      	movs	r2, #1
 8001352:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_ADC2_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_ADC2_Init+0x98>)
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <MX_ADC2_Init+0xa0>)
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001376:	2201      	movs	r2, #1
 8001378:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_ADC2_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_ADC2_Init+0x98>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <MX_ADC2_Init+0x98>)
 800138a:	f000 ffcb 	bl	8002324 <HAL_ADC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fb84 	bl	8001aa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001398:	230d      	movs	r3, #13
 800139a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_ADC2_Init+0x98>)
 80013aa:	f000 ffff 	bl	80023ac <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80013b4:	f000 fb74 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200259b8 	.word	0x200259b8
 80013c4:	40012100 	.word	0x40012100
 80013c8:	0f000001 	.word	0x0f000001

080013cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_I2C3_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <MX_I2C3_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <MX_I2C3_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C3_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_I2C3_Init+0x74>)
 800140a:	f001 fdb5 	bl	8002f78 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 fb44 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4809      	ldr	r0, [pc, #36]	@ (8001440 <MX_I2C3_Init+0x74>)
 800141c:	f001 fef0 	bl	8003200 <HAL_I2CEx_ConfigAnalogFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001426:	f000 fb3b 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4804      	ldr	r0, [pc, #16]	@ (8001440 <MX_I2C3_Init+0x74>)
 800142e:	f001 ff23 	bl	8003278 <HAL_I2CEx_ConfigDigitalFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fb32 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20025a00 	.word	0x20025a00
 8001444:	40005c00 	.word	0x40005c00
 8001448:	000186a0 	.word	0x000186a0

0800144c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b09a      	sub	sp, #104	@ 0x68
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001452:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f004 f9d2 	bl	8005804 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2234      	movs	r2, #52	@ 0x34
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f9cc 	bl	8005804 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800146c:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 800146e:	4a4f      	ldr	r2, [pc, #316]	@ (80015ac <MX_LTDC_Init+0x160>)
 8001470:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001472:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001478:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800147e:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001484:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800148a:	4b47      	ldr	r3, [pc, #284]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 800148c:	2207      	movs	r2, #7
 800148e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001490:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001492:	2203      	movs	r2, #3
 8001494:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001496:	4b44      	ldr	r3, [pc, #272]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001498:	220e      	movs	r2, #14
 800149a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800149c:	4b42      	ldr	r3, [pc, #264]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 800149e:	2205      	movs	r2, #5
 80014a0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014a2:	4b41      	ldr	r3, [pc, #260]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014a4:	f240 228e 	movw	r2, #654	@ 0x28e
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014ac:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80014b2:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014b4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80014ba:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014bc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80014c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014c2:	4b39      	ldr	r3, [pc, #228]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014d2:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80014da:	4833      	ldr	r0, [pc, #204]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 80014dc:	f001 ff0c 	bl	80032f8 <HAL_LTDC_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80014e6:	f000 fadb 	bl	8001aa0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800150c:	2305      	movs	r3, #5
 800150e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800152e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	481c      	ldr	r0, [pc, #112]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001538:	f001 ffae 	bl	8003498 <HAL_LTDC_ConfigLayer>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001542:	f000 faad 	bl	8001aa0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001566:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001568:	2305      	movs	r3, #5
 800156a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	2201      	movs	r2, #1
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_LTDC_Init+0x15c>)
 8001592:	f001 ff81 	bl	8003498 <HAL_LTDC_ConfigLayer>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800159c:	f000 fa80 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3768      	adds	r7, #104	@ 0x68
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20025a54 	.word	0x20025a54
 80015ac:	40016800 	.word	0x40016800

080015b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_RNG_Init+0x20>)
 80015b6:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <MX_RNG_Init+0x24>)
 80015b8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_RNG_Init+0x20>)
 80015bc:	f002 ff86 	bl	80044cc <HAL_RNG_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015c6:	f000 fa6b 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20025afc 	.word	0x20025afc
 80015d4:	50060800 	.word	0x50060800

080015d8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80015dc:	4b17      	ldr	r3, [pc, #92]	@ (800163c <MX_SPI5_Init+0x64>)
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <MX_SPI5_Init+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <MX_SPI5_Init+0x64>)
 80015e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <MX_SPI5_Init+0x64>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <MX_SPI5_Init+0x64>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <MX_SPI5_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <MX_SPI5_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001602:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_SPI5_Init+0x64>)
 8001604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001608:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160a:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <MX_SPI5_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <MX_SPI5_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <MX_SPI5_Init+0x64>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	@ (800163c <MX_SPI5_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <MX_SPI5_Init+0x64>)
 8001624:	220a      	movs	r2, #10
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	@ (800163c <MX_SPI5_Init+0x64>)
 800162a:	f002 ff79 	bl	8004520 <HAL_SPI_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 fa34 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20025b0c 	.word	0x20025b0c
 8001640:	40015000 	.word	0x40015000

08001644 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	@ 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]
 8001672:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001674:	4b31      	ldr	r3, [pc, #196]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001676:	4a32      	ldr	r2, [pc, #200]	@ (8001740 <MX_TIM3_Init+0xfc>)
 8001678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 800167a:	4b30      	ldr	r3, [pc, #192]	@ (800173c <MX_TIM3_Init+0xf8>)
 800167c:	2205      	movs	r2, #5
 800167e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001680:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001686:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001688:	22c8      	movs	r2, #200	@ 0xc8
 800168a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168c:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_TIM3_Init+0xf8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001698:	4828      	ldr	r0, [pc, #160]	@ (800173c <MX_TIM3_Init+0xf8>)
 800169a:	f003 fa21 	bl	8004ae0 <HAL_TIM_Base_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80016a4:	f000 f9fc 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4821      	ldr	r0, [pc, #132]	@ (800173c <MX_TIM3_Init+0xf8>)
 80016b6:	f003 fc45 	bl	8004f44 <HAL_TIM_ConfigClockSource>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80016c0:	f000 f9ee 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016c4:	481d      	ldr	r0, [pc, #116]	@ (800173c <MX_TIM3_Init+0xf8>)
 80016c6:	f003 fa5a 	bl	8004b7e <HAL_TIM_PWM_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80016d0:	f000 f9e6 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016dc:	f107 0320 	add.w	r3, r7, #32
 80016e0:	4619      	mov	r1, r3
 80016e2:	4816      	ldr	r0, [pc, #88]	@ (800173c <MX_TIM3_Init+0xf8>)
 80016e4:	f004 f812 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80016ee:	f000 f9d7 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f2:	2360      	movs	r3, #96	@ 0x60
 80016f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <MX_TIM3_Init+0xf8>)
 800170a:	f003 fb59 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001714:	f000 f9c4 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2208      	movs	r2, #8
 800171c:	4619      	mov	r1, r3
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001720:	f003 fb4e 	bl	8004dc0 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800172a:	f000 f9b9 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <MX_TIM3_Init+0xf8>)
 8001730:	f000 fc96 	bl	8002060 <HAL_TIM_MspPostInit>

}
 8001734:	bf00      	nop
 8001736:	3738      	adds	r7, #56	@ 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20025b64 	.word	0x20025b64
 8001740:	40000400 	.word	0x40000400

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	@ 0x38
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	4bb2      	ldr	r3, [pc, #712]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4ab1      	ldr	r2, [pc, #708]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4baf      	ldr	r3, [pc, #700]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	4bab      	ldr	r3, [pc, #684]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4aaa      	ldr	r2, [pc, #680]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001780:	f043 0320 	orr.w	r3, r3, #32
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4ba8      	ldr	r3, [pc, #672]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	4ba4      	ldr	r3, [pc, #656]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4aa3      	ldr	r2, [pc, #652]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	4b9d      	ldr	r3, [pc, #628]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a9c      	ldr	r2, [pc, #624]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b9a      	ldr	r3, [pc, #616]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a95      	ldr	r2, [pc, #596]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b93      	ldr	r3, [pc, #588]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b8f      	ldr	r3, [pc, #572]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a8e      	ldr	r2, [pc, #568]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	4b88      	ldr	r3, [pc, #544]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a87      	ldr	r2, [pc, #540]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b85      	ldr	r3, [pc, #532]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0310 	and.w	r3, r3, #16
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b81      	ldr	r3, [pc, #516]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a80      	ldr	r2, [pc, #512]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a28 <MX_GPIO_Init+0x2e4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2116      	movs	r1, #22
 800183e:	487b      	ldr	r0, [pc, #492]	@ (8001a2c <MX_GPIO_Init+0x2e8>)
 8001840:	f001 fb80 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	4879      	ldr	r0, [pc, #484]	@ (8001a30 <MX_GPIO_Init+0x2ec>)
 800184a:	f001 fb7b 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001854:	4877      	ldr	r0, [pc, #476]	@ (8001a34 <MX_GPIO_Init+0x2f0>)
 8001856:	f001 fb75 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001860:	4875      	ldr	r0, [pc, #468]	@ (8001a38 <MX_GPIO_Init+0x2f4>)
 8001862:	f001 fb6f 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001866:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001878:	230c      	movs	r3, #12
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	486e      	ldr	r0, [pc, #440]	@ (8001a3c <MX_GPIO_Init+0x2f8>)
 8001884:	f001 f8a6 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001898:	230c      	movs	r3, #12
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4862      	ldr	r0, [pc, #392]	@ (8001a2c <MX_GPIO_Init+0x2e8>)
 80018a4:	f001 f896 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018a8:	2316      	movs	r3, #22
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	485b      	ldr	r0, [pc, #364]	@ (8001a2c <MX_GPIO_Init+0x2e8>)
 80018c0:	f001 f888 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80018c4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80018c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	4855      	ldr	r0, [pc, #340]	@ (8001a30 <MX_GPIO_Init+0x2ec>)
 80018dc:	f001 f87a 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80018e0:	2380      	movs	r3, #128	@ 0x80
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	484e      	ldr	r0, [pc, #312]	@ (8001a30 <MX_GPIO_Init+0x2ec>)
 80018f8:	f001 f86c 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80018fc:	2320      	movs	r3, #32
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001900:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800190e:	4619      	mov	r1, r3
 8001910:	4846      	ldr	r0, [pc, #280]	@ (8001a2c <MX_GPIO_Init+0x2e8>)
 8001912:	f001 f85f 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001916:	2304      	movs	r3, #4
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4845      	ldr	r0, [pc, #276]	@ (8001a40 <MX_GPIO_Init+0x2fc>)
 800192a:	f001 f853 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800192e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001940:	230c      	movs	r3, #12
 8001942:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	483b      	ldr	r0, [pc, #236]	@ (8001a38 <MX_GPIO_Init+0x2f4>)
 800194c:	f001 f842 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001950:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001962:	230c      	movs	r3, #12
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4835      	ldr	r0, [pc, #212]	@ (8001a44 <MX_GPIO_Init+0x300>)
 800196e:	f001 f831 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001972:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001984:	230c      	movs	r3, #12
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <MX_GPIO_Init+0x2fc>)
 8001990:	f001 f820 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	4825      	ldr	r0, [pc, #148]	@ (8001a40 <MX_GPIO_Init+0x2fc>)
 80019aa:	f001 f813 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80019ae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c0:	230c      	movs	r3, #12
 80019c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <MX_GPIO_Init+0x2f0>)
 80019cc:	f001 f802 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4813      	ldr	r0, [pc, #76]	@ (8001a34 <MX_GPIO_Init+0x2f0>)
 80019e6:	f000 fff5 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_GPIO_Init+0x2f0>)
 8001a04:	f000 ffe6 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	e010      	b.n	8001a48 <MX_GPIO_Init+0x304>
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020000 	.word	0x40020000
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	4812      	ldr	r0, [pc, #72]	@ (8001a94 <MX_GPIO_Init+0x350>)
 8001a4a:	f000 ffc3 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a4e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a64:	4619      	mov	r1, r3
 8001a66:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <MX_GPIO_Init+0x354>)
 8001a68:	f000 ffb4 	bl	80029d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001a6c:	2360      	movs	r3, #96	@ 0x60
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	4805      	ldr	r0, [pc, #20]	@ (8001a9c <MX_GPIO_Init+0x358>)
 8001a88:	f000 ffa4 	bl	80029d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	3738      	adds	r7, #56	@ 0x38
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a0f      	ldr	r2, [pc, #60]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_MspInit+0x4c>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aea:	2007      	movs	r0, #7
 8001aec:	f000 ff3e 	bl	800296c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd4 <HAL_ADC_MspInit+0xd8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d128      	bne.n	8001b70 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a25      	ldr	r2, [pc, #148]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b56:	2320      	movs	r3, #32
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	481c      	ldr	r0, [pc, #112]	@ (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b6a:	f000 ff33 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b6e:	e02c      	b.n	8001bca <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1a      	ldr	r2, [pc, #104]	@ (8001be0 <HAL_ADC_MspInit+0xe4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d127      	bne.n	8001bca <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a15      	ldr	r2, [pc, #84]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001bc6:	f000 ff05 	bl	80029d4 <HAL_GPIO_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	@ 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40012000 	.word	0x40012000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40012100 	.word	0x40012100
 8001be4:	40020800 	.word	0x40020800

08001be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <HAL_I2C_MspInit+0xc4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d14b      	bne.n	8001ca2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a27      	ldr	r2, [pc, #156]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a20      	ldr	r2, [pc, #128]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c48:	2312      	movs	r3, #18
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c54:	2304      	movs	r3, #4
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4815      	ldr	r0, [pc, #84]	@ (8001cb4 <HAL_I2C_MspInit+0xcc>)
 8001c60:	f000 feb8 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6a:	2312      	movs	r3, #18
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c76:	2304      	movs	r3, #4
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <HAL_I2C_MspInit+0xd0>)
 8001c82:	f000 fea7 	bl	80029d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_I2C_MspInit+0xc8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	@ 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40005c00 	.word	0x40005c00
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09a      	sub	sp, #104	@ 0x68
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd8:	2230      	movs	r2, #48	@ 0x30
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 fd91 	bl	8005804 <memset>
  if(hltdc->Instance==LTDC)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a81      	ldr	r2, [pc, #516]	@ (8001eec <HAL_LTDC_MspInit+0x230>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	f040 80fa 	bne.w	8001ee2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001cf2:	2332      	movs	r3, #50	@ 0x32
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fa22 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001d0e:	f7ff fec7 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
 8001d16:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a75      	ldr	r2, [pc, #468]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b73      	ldr	r3, [pc, #460]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a6e      	ldr	r2, [pc, #440]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d38:	f043 0320 	orr.w	r3, r3, #32
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	4b68      	ldr	r3, [pc, #416]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a67      	ldr	r2, [pc, #412]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b65      	ldr	r3, [pc, #404]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	4b61      	ldr	r3, [pc, #388]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a60      	ldr	r2, [pc, #384]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a59      	ldr	r2, [pc, #356]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b57      	ldr	r3, [pc, #348]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b53      	ldr	r3, [pc, #332]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a52      	ldr	r2, [pc, #328]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b49      	ldr	r3, [pc, #292]	@ (8001ef0 <HAL_LTDC_MspInit+0x234>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001de8:	230e      	movs	r3, #14
 8001dea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001df0:	4619      	mov	r1, r3
 8001df2:	4840      	ldr	r0, [pc, #256]	@ (8001ef4 <HAL_LTDC_MspInit+0x238>)
 8001df4:	f000 fdee 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001df8:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001dfc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e0a:	230e      	movs	r3, #14
 8001e0c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e12:	4619      	mov	r1, r3
 8001e14:	4838      	ldr	r0, [pc, #224]	@ (8001ef8 <HAL_LTDC_MspInit+0x23c>)
 8001e16:	f000 fddd 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e32:	4619      	mov	r1, r3
 8001e34:	4831      	ldr	r0, [pc, #196]	@ (8001efc <HAL_LTDC_MspInit+0x240>)
 8001e36:	f000 fdcd 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e3a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e3e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e4c:	230e      	movs	r3, #14
 8001e4e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e54:	4619      	mov	r1, r3
 8001e56:	4829      	ldr	r0, [pc, #164]	@ (8001efc <HAL_LTDC_MspInit+0x240>)
 8001e58:	f000 fdbc 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e5c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001e60:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6e:	230e      	movs	r3, #14
 8001e70:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e76:	4619      	mov	r1, r3
 8001e78:	4821      	ldr	r0, [pc, #132]	@ (8001f00 <HAL_LTDC_MspInit+0x244>)
 8001e7a:	f000 fdab 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e7e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e90:	230e      	movs	r3, #14
 8001e92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e98:	4619      	mov	r1, r3
 8001e9a:	481a      	ldr	r0, [pc, #104]	@ (8001f04 <HAL_LTDC_MspInit+0x248>)
 8001e9c:	f000 fd9a 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001ea0:	2348      	movs	r3, #72	@ 0x48
 8001ea2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb0:	230e      	movs	r3, #14
 8001eb2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4813      	ldr	r0, [pc, #76]	@ (8001f08 <HAL_LTDC_MspInit+0x24c>)
 8001ebc:	f000 fd8a 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ec0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ec4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ed2:	2309      	movs	r3, #9
 8001ed4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ed6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <HAL_LTDC_MspInit+0x244>)
 8001ede:	f000 fd79 	bl	80029d4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3768      	adds	r7, #104	@ 0x68
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40016800 	.word	0x40016800
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40021800 	.word	0x40021800
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00

08001f0c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <HAL_RNG_MspInit+0x3c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10d      	bne.n	8001f3a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_RNG_MspInit+0x40>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_RNG_MspInit+0x40>)
 8001f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f2c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <HAL_RNG_MspInit+0x40>)
 8001f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	50060800 	.word	0x50060800
 8001f4c:	40023800 	.word	0x40023800

08001f50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	@ 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	@ (8001fd4 <HAL_SPI_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12c      	bne.n	8001fcc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	4a17      	ldr	r2, [pc, #92]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001faa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <HAL_SPI_MspInit+0x8c>)
 8001fc8:	f000 fd04 	bl	80029d4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001fcc:	bf00      	nop
 8001fce:	3728      	adds	r7, #40	@ 0x28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40015000 	.word	0x40015000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40021400 	.word	0x40021400

08001fe0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a08      	ldr	r2, [pc, #32]	@ (8002010 <HAL_SPI_MspDeInit+0x30>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10a      	bne.n	8002008 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_SPI_MspDeInit+0x34>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_SPI_MspDeInit+0x34>)
 8001ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001ffe:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <HAL_SPI_MspDeInit+0x38>)
 8002004:	f000 fe92 	bl	8002d2c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40015000 	.word	0x40015000
 8002014:	40023800 	.word	0x40023800
 8002018:	40021400 	.word	0x40021400

0800201c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0b      	ldr	r2, [pc, #44]	@ (8002058 <HAL_TIM_Base_MspInit+0x3c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10d      	bne.n	800204a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_TIM_Base_MspInit+0x40>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40000400 	.word	0x40000400
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a21      	ldr	r2, [pc, #132]	@ (8002104 <HAL_TIM_MspPostInit+0xa4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d13c      	bne.n	80020fc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <HAL_TIM_MspPostInit+0xa8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020cc:	2302      	movs	r3, #2
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	@ (800210c <HAL_TIM_MspPostInit+0xac>)
 80020d8:	f000 fc7c 	bl	80029d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020dc:	2310      	movs	r3, #16
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ec:	2302      	movs	r3, #2
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	4806      	ldr	r0, [pc, #24]	@ (8002110 <HAL_TIM_MspPostInit+0xb0>)
 80020f8:	f000 fc6c 	bl	80029d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40000400 	.word	0x40000400
 8002108:	40023800 	.word	0x40023800
 800210c:	40020800 	.word	0x40020800
 8002110:	40020400 	.word	0x40020400

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <NMI_Handler+0x4>

0800211c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <MemManage_Handler+0x4>

0800212c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <UsageFault_Handler+0x4>

0800213c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f897 	bl	800229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}

08002172 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a8:	f7ff ffea 	bl	8002180 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021d2:	f003 fb1f 	bl	8005814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d6:	f7ff f823 	bl	8001220 <main>
  bx  lr    
 80021da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80021e8:	08006a6c 	.word	0x08006a6c
  ldr r2, =_sbss
 80021ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80021f0:	20025bb0 	.word	0x20025bb0

080021f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_Init+0x40>)
 8002202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <HAL_Init+0x40>)
 800220e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_Init+0x40>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002220:	2003      	movs	r0, #3
 8002222:	f000 fba3 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f808 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800222c:	f7ff fc3e 	bl	8001aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_InitTick+0x54>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <HAL_InitTick+0x58>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002252:	fbb3 f3f1 	udiv	r3, r3, r1
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fbad 	bl	80029ba <HAL_SYSTICK_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00e      	b.n	8002288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0f      	cmp	r3, #15
 800226e:	d80a      	bhi.n	8002286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002270:	2200      	movs	r2, #0
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	f04f 30ff 	mov.w	r0, #4294967295
 8002278:	f000 fb83 	bl	8002982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800227c:	4a06      	ldr	r2, [pc, #24]	@ (8002298 <HAL_InitTick+0x5c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000010 	.word	0x20000010
 8002294:	20000018 	.word	0x20000018
 8002298:	20000014 	.word	0x20000014

0800229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a0:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x20>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_IncTick+0x24>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <HAL_IncTick+0x24>)
 80022ae:	6013      	str	r3, [r2, #0]
}
 80022b0:	bf00      	nop
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000018 	.word	0x20000018
 80022c0:	20025bac 	.word	0x20025bac

080022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_GetTick+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20025bac 	.word	0x20025bac

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff ffee 	bl	80022c4 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffde 	bl	80022c4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000018 	.word	0x20000018

08002324 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e033      	b.n	80023a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fbda 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800236a:	f023 0302 	bic.w	r3, r3, #2
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f94a 	bl	8002610 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	f043 0201 	orr.w	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	@ 0x40
 8002392:	e001      	b.n	8002398 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e113      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x244>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d925      	bls.n	8002424 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68d9      	ldr	r1, [r3, #12]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	3b1e      	subs	r3, #30
 80023ee:	2207      	movs	r2, #7
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4618      	mov	r0, r3
 8002410:	4603      	mov	r3, r0
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4403      	add	r3, r0
 8002416:	3b1e      	subs	r3, #30
 8002418:	409a      	lsls	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e022      	b.n	800246a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	2207      	movs	r2, #7
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	400a      	ands	r2, r1
 8002446:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6919      	ldr	r1, [r3, #16]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	4603      	mov	r3, r0
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4403      	add	r3, r0
 8002460:	409a      	lsls	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d824      	bhi.n	80024bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b05      	subs	r3, #5
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b05      	subs	r3, #5
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ba:	e04c      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d824      	bhi.n	800250e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	3b23      	subs	r3, #35	@ 0x23
 80024d6:	221f      	movs	r2, #31
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b23      	subs	r3, #35	@ 0x23
 8002500:	fa00 f203 	lsl.w	r2, r0, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
 800250c:	e023      	b.n	8002556 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	3b41      	subs	r3, #65	@ 0x41
 8002520:	221f      	movs	r2, #31
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4618      	mov	r0, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3b41      	subs	r3, #65	@ 0x41
 800254a:	fa00 f203 	lsl.w	r2, r0, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002556:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <HAL_ADC_ConfigChannel+0x250>)
 8002558:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a28      	ldr	r2, [pc, #160]	@ (8002600 <HAL_ADC_ConfigChannel+0x254>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10f      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1d8>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d10b      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_ADC_ConfigChannel+0x254>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d12b      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <HAL_ADC_ConfigChannel+0x258>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b11      	cmp	r3, #17
 800259e:	d122      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <HAL_ADC_ConfigChannel+0x258>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_ADC_ConfigChannel+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_ADC_ConfigChannel+0x260>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9a      	lsrs	r2, r3, #18
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025d8:	e002      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3b01      	subs	r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f9      	bne.n	80025da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012300 	.word	0x40012300
 8002600:	40012000 	.word	0x40012000
 8002604:	10000012 	.word	0x10000012
 8002608:	20000010 	.word	0x20000010
 800260c:	431bde83 	.word	0x431bde83

08002610 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002618:	4b79      	ldr	r3, [pc, #484]	@ (8002800 <ADC_Init+0x1f0>)
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	021a      	lsls	r2, r3, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6899      	ldr	r1, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	4a58      	ldr	r2, [pc, #352]	@ (8002804 <ADC_Init+0x1f4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d022      	beq.n	80026ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6899      	ldr	r1, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e00f      	b.n	800270e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800270c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0202 	bic.w	r2, r2, #2
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e1b      	ldrb	r3, [r3, #24]
 8002728:	005a      	lsls	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800275a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	3b01      	subs	r3, #1
 8002768:	035a      	lsls	r2, r3, #13
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	e007      	b.n	8002784 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002782:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	3b01      	subs	r3, #1
 80027a0:	051a      	lsls	r2, r3, #20
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027c6:	025a      	lsls	r2, r3, #9
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	029a      	lsls	r2, r3, #10
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40012300 	.word	0x40012300
 8002804:	0f000001 	.word	0x0f000001

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	@ (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff47 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002994:	f7ff ff5c 	bl	8002850 <__NVIC_GetPriorityGrouping>
 8002998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff ff8e 	bl	80028c0 <NVIC_EncodePriority>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff5d 	bl	800286c <__NVIC_SetPriority>
}
 80029b2:	bf00      	nop
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffb0 	bl	8002928 <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	@ 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e177      	b.n	8002ce0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 8166 	bne.w	8002cda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d005      	beq.n	8002a26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d130      	bne.n	8002a88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	2203      	movs	r2, #3
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 0201 	and.w	r2, r3, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d017      	beq.n	8002ac4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d123      	bne.n	8002b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	08da      	lsrs	r2, r3, #3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3208      	adds	r2, #8
 8002ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08da      	lsrs	r2, r3, #3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3208      	adds	r2, #8
 8002b12:	69b9      	ldr	r1, [r7, #24]
 8002b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80c0 	beq.w	8002cda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_GPIO_Init+0x324>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	4a65      	ldr	r2, [pc, #404]	@ (8002cf8 <HAL_GPIO_Init+0x324>)
 8002b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6a:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <HAL_GPIO_Init+0x324>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b76:	4a61      	ldr	r2, [pc, #388]	@ (8002cfc <HAL_GPIO_Init+0x328>)
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	@ (8002d00 <HAL_GPIO_Init+0x32c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d037      	beq.n	8002c12 <HAL_GPIO_Init+0x23e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a57      	ldr	r2, [pc, #348]	@ (8002d04 <HAL_GPIO_Init+0x330>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_GPIO_Init+0x23a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a56      	ldr	r2, [pc, #344]	@ (8002d08 <HAL_GPIO_Init+0x334>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02b      	beq.n	8002c0a <HAL_GPIO_Init+0x236>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a55      	ldr	r2, [pc, #340]	@ (8002d0c <HAL_GPIO_Init+0x338>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d025      	beq.n	8002c06 <HAL_GPIO_Init+0x232>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a54      	ldr	r2, [pc, #336]	@ (8002d10 <HAL_GPIO_Init+0x33c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01f      	beq.n	8002c02 <HAL_GPIO_Init+0x22e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a53      	ldr	r2, [pc, #332]	@ (8002d14 <HAL_GPIO_Init+0x340>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d019      	beq.n	8002bfe <HAL_GPIO_Init+0x22a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <HAL_GPIO_Init+0x344>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_GPIO_Init+0x226>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <HAL_GPIO_Init+0x348>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00d      	beq.n	8002bf6 <HAL_GPIO_Init+0x222>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a50      	ldr	r2, [pc, #320]	@ (8002d20 <HAL_GPIO_Init+0x34c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <HAL_GPIO_Init+0x21e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d24 <HAL_GPIO_Init+0x350>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_GPIO_Init+0x21a>
 8002bea:	2309      	movs	r3, #9
 8002bec:	e012      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002bee:	230a      	movs	r3, #10
 8002bf0:	e010      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	e00e      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	e00c      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	e00a      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002bfe:	2305      	movs	r3, #5
 8002c00:	e008      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e004      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e002      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <HAL_GPIO_Init+0x240>
 8002c12:	2300      	movs	r3, #0
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f002 0203 	and.w	r2, r2, #3
 8002c1a:	0092      	lsls	r2, r2, #2
 8002c1c:	4093      	lsls	r3, r2
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c24:	4935      	ldr	r1, [pc, #212]	@ (8002cfc <HAL_GPIO_Init+0x328>)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c56:	4a34      	ldr	r2, [pc, #208]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c5c:	4b32      	ldr	r3, [pc, #200]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c80:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c86:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002caa:	4a1f      	ldr	r2, [pc, #124]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd4:	4a14      	ldr	r2, [pc, #80]	@ (8002d28 <HAL_GPIO_Init+0x354>)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	f67f ae84 	bls.w	80029f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3724      	adds	r7, #36	@ 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40020800 	.word	0x40020800
 8002d0c:	40020c00 	.word	0x40020c00
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40021400 	.word	0x40021400
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40021c00 	.word	0x40021c00
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40022400 	.word	0x40022400
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e0d9      	b.n	8002efc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f040 80c9 	bne.w	8002ef6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d64:	4a6b      	ldr	r2, [pc, #428]	@ (8002f14 <HAL_GPIO_DeInit+0x1e8>)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a63      	ldr	r2, [pc, #396]	@ (8002f18 <HAL_GPIO_DeInit+0x1ec>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d037      	beq.n	8002dfe <HAL_GPIO_DeInit+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a62      	ldr	r2, [pc, #392]	@ (8002f1c <HAL_GPIO_DeInit+0x1f0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d031      	beq.n	8002dfa <HAL_GPIO_DeInit+0xce>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a61      	ldr	r2, [pc, #388]	@ (8002f20 <HAL_GPIO_DeInit+0x1f4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d02b      	beq.n	8002df6 <HAL_GPIO_DeInit+0xca>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_GPIO_DeInit+0x1f8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d025      	beq.n	8002df2 <HAL_GPIO_DeInit+0xc6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f28 <HAL_GPIO_DeInit+0x1fc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_GPIO_DeInit+0xc2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a5e      	ldr	r2, [pc, #376]	@ (8002f2c <HAL_GPIO_DeInit+0x200>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_DeInit+0xbe>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f30 <HAL_GPIO_DeInit+0x204>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_DeInit+0xba>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a5c      	ldr	r2, [pc, #368]	@ (8002f34 <HAL_GPIO_DeInit+0x208>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_DeInit+0xb6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a5b      	ldr	r2, [pc, #364]	@ (8002f38 <HAL_GPIO_DeInit+0x20c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_DeInit+0xb2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f3c <HAL_GPIO_DeInit+0x210>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_DeInit+0xae>
 8002dd6:	2309      	movs	r3, #9
 8002dd8:	e012      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dda:	230a      	movs	r3, #10
 8002ddc:	e010      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dde:	2308      	movs	r3, #8
 8002de0:	e00e      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e00c      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00a      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dea:	2305      	movs	r3, #5
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_DeInit+0xd4>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d132      	bne.n	8002e76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e10:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	4949      	ldr	r1, [pc, #292]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e1e:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	43db      	mvns	r3, r3
 8002e26:	4946      	ldr	r1, [pc, #280]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e2c:	4b44      	ldr	r3, [pc, #272]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	4942      	ldr	r1, [pc, #264]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e3a:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	493f      	ldr	r1, [pc, #252]	@ (8002f40 <HAL_GPIO_DeInit+0x214>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_GPIO_DeInit+0x1e8>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	482a      	ldr	r0, [pc, #168]	@ (8002f14 <HAL_GPIO_DeInit+0x1e8>)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	400a      	ands	r2, r1
 8002e70:	3302      	adds	r3, #2
 8002e72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2103      	movs	r1, #3
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	220f      	movs	r2, #15
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	08d2      	lsrs	r2, r2, #3
 8002eac:	4019      	ands	r1, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2103      	movs	r1, #3
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f af22 	bls.w	8002d48 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40013800 	.word	0x40013800
 8002f18:	40020000 	.word	0x40020000
 8002f1c:	40020400 	.word	0x40020400
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40020c00 	.word	0x40020c00
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40021400 	.word	0x40021400
 8002f30:	40021800 	.word	0x40021800
 8002f34:	40021c00 	.word	0x40021c00
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40022400 	.word	0x40022400
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e12b      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fe22 	bl	8001be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f001 f8a2 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	@ (80031ec <HAL_I2C_Init+0x274>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <HAL_I2C_Init+0x84>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a80      	ldr	r2, [pc, #512]	@ (80031f0 <HAL_I2C_Init+0x278>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e006      	b.n	800300a <HAL_I2C_Init+0x92>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80031f4 <HAL_I2C_Init+0x27c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a78      	ldr	r2, [pc, #480]	@ (80031f8 <HAL_I2C_Init+0x280>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0c9b      	lsrs	r3, r3, #18
 800301c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a6a      	ldr	r2, [pc, #424]	@ (80031ec <HAL_I2C_Init+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <HAL_I2C_Init+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_I2C_Init+0xe8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a69      	ldr	r2, [pc, #420]	@ (80031fc <HAL_I2C_Init+0x284>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	495c      	ldr	r1, [pc, #368]	@ (80031ec <HAL_I2C_Init+0x274>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d819      	bhi.n	80030b4 <HAL_I2C_Init+0x13c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e59      	subs	r1, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fbb1 f3f3 	udiv	r3, r1, r3
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_I2C_Init+0x138>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e59      	subs	r1, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	e051      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e04f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <HAL_I2C_Init+0x168>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e012      	b.n	8003106 <HAL_I2C_Init+0x18e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x196>
 800310a:	2301      	movs	r3, #1
 800310c:	e022      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_I2C_Init+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	fbb0 f3f3 	udiv	r3, r0, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6809      	ldr	r1, [r1, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6911      	ldr	r1, [r2, #16]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	000186a0 	.word	0x000186a0
 80031f0:	001e847f 	.word	0x001e847f
 80031f4:	003d08ff 	.word	0x003d08ff
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b20      	cmp	r3, #32
 8003214:	d129      	bne.n	800326a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2224      	movs	r2, #36	@ 0x24
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d12a      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2224      	movs	r2, #36	@ 0x24
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	f023 030f 	bic.w	r3, r3, #15
 80032b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	89fa      	ldrh	r2, [r7, #14]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0bf      	b.n	800348a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fccc 	bl	8001cbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800333a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6999      	ldr	r1, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003350:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b4a      	ldr	r3, [pc, #296]	@ (8003494 <HAL_LTDC_Init+0x19c>)
 800336c:	400b      	ands	r3, r1
 800336e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b3e      	ldr	r3, [pc, #248]	@ (8003494 <HAL_LTDC_Init+0x19c>)
 800339a:	400b      	ands	r3, r1
 800339c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b33      	ldr	r3, [pc, #204]	@ (8003494 <HAL_LTDC_Init+0x19c>)
 80033c8:	400b      	ands	r3, r1
 80033ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	041b      	lsls	r3, r3, #16
 80033d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6919      	ldr	r1, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6959      	ldr	r1, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b27      	ldr	r3, [pc, #156]	@ (8003494 <HAL_LTDC_Init+0x19c>)
 80033f6:	400b      	ands	r3, r1
 80033f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6959      	ldr	r1, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003428:	041b      	lsls	r3, r3, #16
 800342a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0206 	orr.w	r2, r2, #6
 8003466:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	f000f800 	.word	0xf000f800

08003498 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_LTDC_ConfigLayer+0x1a>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e02c      	b.n	800350c <HAL_LTDC_ConfigLayer+0x74>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2134      	movs	r1, #52	@ 0x34
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4614      	mov	r4, r2
 80034d6:	461d      	mov	r5, r3
 80034d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f811 	bl	8003514 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bdb0      	pop	{r4, r5, r7, pc}

08003514 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	@ 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	0c1b      	lsrs	r3, r3, #16
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	4413      	add	r3, r2
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	01db      	lsls	r3, r3, #7
 8003540:	4413      	add	r3, r2
 8003542:	3384      	adds	r3, #132	@ 0x84
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4611      	mov	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	01d2      	lsls	r2, r2, #7
 8003550:	440a      	add	r2, r1
 8003552:	3284      	adds	r2, #132	@ 0x84
 8003554:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003558:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800356a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800356c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	01db      	lsls	r3, r3, #7
 8003578:	440b      	add	r3, r1
 800357a:	3384      	adds	r3, #132	@ 0x84
 800357c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003582:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	4413      	add	r3, r2
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	01db      	lsls	r3, r3, #7
 80035a2:	4413      	add	r3, r2
 80035a4:	3384      	adds	r3, #132	@ 0x84
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	4611      	mov	r1, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	01d2      	lsls	r2, r2, #7
 80035b2:	440a      	add	r2, r1
 80035b4:	3284      	adds	r2, #132	@ 0x84
 80035b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80035ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ca:	4413      	add	r3, r2
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	440b      	add	r3, r1
 80035da:	3384      	adds	r3, #132	@ 0x84
 80035dc:	4619      	mov	r1, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	01db      	lsls	r3, r3, #7
 80035ee:	4413      	add	r3, r2
 80035f0:	3384      	adds	r3, #132	@ 0x84
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	4611      	mov	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	01d2      	lsls	r2, r2, #7
 80035fe:	440a      	add	r2, r1
 8003600:	3284      	adds	r2, #132	@ 0x84
 8003602:	f023 0307 	bic.w	r3, r3, #7
 8003606:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	01db      	lsls	r3, r3, #7
 8003612:	4413      	add	r3, r2
 8003614:	3384      	adds	r3, #132	@ 0x84
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	01db      	lsls	r3, r3, #7
 8003644:	4413      	add	r3, r2
 8003646:	3384      	adds	r3, #132	@ 0x84
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	4413      	add	r3, r2
 8003656:	3384      	adds	r3, #132	@ 0x84
 8003658:	461a      	mov	r2, r3
 800365a:	2300      	movs	r3, #0
 800365c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003664:	461a      	mov	r2, r3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	431a      	orrs	r2, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	01db      	lsls	r3, r3, #7
 8003678:	440b      	add	r3, r1
 800367a:	3384      	adds	r3, #132	@ 0x84
 800367c:	4619      	mov	r1, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	01db      	lsls	r3, r3, #7
 800368e:	4413      	add	r3, r2
 8003690:	3384      	adds	r3, #132	@ 0x84
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	4611      	mov	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	01d2      	lsls	r2, r2, #7
 800369e:	440a      	add	r2, r1
 80036a0:	3284      	adds	r2, #132	@ 0x84
 80036a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	01db      	lsls	r3, r3, #7
 80036b2:	4413      	add	r3, r2
 80036b4:	3384      	adds	r3, #132	@ 0x84
 80036b6:	461a      	mov	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	01db      	lsls	r3, r3, #7
 80036c8:	4413      	add	r3, r2
 80036ca:	3384      	adds	r3, #132	@ 0x84
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	4611      	mov	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	01d2      	lsls	r2, r2, #7
 80036d8:	440a      	add	r2, r1
 80036da:	3284      	adds	r2, #132	@ 0x84
 80036dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036e0:	f023 0307 	bic.w	r3, r3, #7
 80036e4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	6809      	ldr	r1, [r1, #0]
 80036f2:	4608      	mov	r0, r1
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	01c9      	lsls	r1, r1, #7
 80036f8:	4401      	add	r1, r0
 80036fa:	3184      	adds	r1, #132	@ 0x84
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	01db      	lsls	r3, r3, #7
 800370a:	4413      	add	r3, r2
 800370c:	3384      	adds	r3, #132	@ 0x84
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	01db      	lsls	r3, r3, #7
 800371a:	4413      	add	r3, r2
 800371c:	3384      	adds	r3, #132	@ 0x84
 800371e:	461a      	mov	r2, r3
 8003720:	2300      	movs	r3, #0
 8003722:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	4413      	add	r3, r2
 8003730:	3384      	adds	r3, #132	@ 0x84
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003742:	2304      	movs	r3, #4
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e01b      	b.n	8003780 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003750:	2303      	movs	r3, #3
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	e014      	b.n	8003780 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d00b      	beq.n	8003776 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003762:	2b02      	cmp	r3, #2
 8003764:	d007      	beq.n	8003776 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800376a:	2b03      	cmp	r3, #3
 800376c:	d003      	beq.n	8003776 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003772:	2b07      	cmp	r3, #7
 8003774:	d102      	bne.n	800377c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003776:	2302      	movs	r3, #2
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e001      	b.n	8003780 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800377c:	2301      	movs	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	01db      	lsls	r3, r3, #7
 800378a:	4413      	add	r3, r2
 800378c:	3384      	adds	r3, #132	@ 0x84
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	4611      	mov	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	01d2      	lsls	r2, r2, #7
 800379a:	440a      	add	r2, r1
 800379c:	3284      	adds	r2, #132	@ 0x84
 800379e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1acb      	subs	r3, r1, r3
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	fb01 f303 	mul.w	r3, r1, r3
 80037c0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	6809      	ldr	r1, [r1, #0]
 80037c6:	4608      	mov	r0, r1
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	01c9      	lsls	r1, r1, #7
 80037cc:	4401      	add	r1, r0
 80037ce:	3184      	adds	r1, #132	@ 0x84
 80037d0:	4313      	orrs	r3, r2
 80037d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	01db      	lsls	r3, r3, #7
 80037de:	4413      	add	r3, r2
 80037e0:	3384      	adds	r3, #132	@ 0x84
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	4611      	mov	r1, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	01d2      	lsls	r2, r2, #7
 80037ee:	440a      	add	r2, r1
 80037f0:	3284      	adds	r2, #132	@ 0x84
 80037f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037f6:	f023 0307 	bic.w	r3, r3, #7
 80037fa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	01db      	lsls	r3, r3, #7
 8003806:	4413      	add	r3, r2
 8003808:	3384      	adds	r3, #132	@ 0x84
 800380a:	461a      	mov	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	01db      	lsls	r3, r3, #7
 800381c:	4413      	add	r3, r2
 800381e:	3384      	adds	r3, #132	@ 0x84
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	4611      	mov	r1, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	01d2      	lsls	r2, r2, #7
 800382c:	440a      	add	r2, r1
 800382e:	3284      	adds	r2, #132	@ 0x84
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	3724      	adds	r7, #36	@ 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e267      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d075      	beq.n	800394e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003862:	4b88      	ldr	r3, [pc, #544]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00c      	beq.n	8003888 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386e:	4b85      	ldr	r3, [pc, #532]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003876:	2b08      	cmp	r3, #8
 8003878:	d112      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800387a:	4b82      	ldr	r3, [pc, #520]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003886:	d10b      	bne.n	80038a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b7e      	ldr	r3, [pc, #504]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05b      	beq.n	800394c <HAL_RCC_OscConfig+0x108>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d157      	bne.n	800394c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e242      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x74>
 80038aa:	4b76      	ldr	r3, [pc, #472]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x98>
 80038c2:	4b70      	ldr	r3, [pc, #448]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xb0>
 80038dc:	4b69      	ldr	r3, [pc, #420]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b66      	ldr	r3, [pc, #408]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a65      	ldr	r2, [pc, #404]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fce2 	bl	80022c4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe fcde 	bl	80022c4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e207      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b5b      	ldr	r3, [pc, #364]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xc0>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe fcce 	bl	80022c4 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe fcca 	bl	80022c4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1f3      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	4b51      	ldr	r3, [pc, #324]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0xe8>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d063      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800395a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003966:	4b47      	ldr	r3, [pc, #284]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11c      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003972:	4b44      	ldr	r3, [pc, #272]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d116      	bne.n	80039ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397e:	4b41      	ldr	r3, [pc, #260]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e1c7      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	4b3b      	ldr	r3, [pc, #236]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4937      	ldr	r1, [pc, #220]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039aa:	e03a      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b4:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ba:	f7fe fc83 	bl	80022c4 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c2:	f7fe fc7f 	bl	80022c4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1a8      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4b28      	ldr	r3, [pc, #160]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4925      	ldr	r1, [pc, #148]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e015      	b.n	8003a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <HAL_RCC_OscConfig+0x244>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fc62 	bl	80022c4 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a04:	f7fe fc5e 	bl	80022c4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e187      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a16:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d036      	beq.n	8003a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a36:	4b15      	ldr	r3, [pc, #84]	@ (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fc42 	bl	80022c4 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a44:	f7fe fc3e 	bl	80022c4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e167      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <HAL_RCC_OscConfig+0x240>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x200>
 8003a62:	e01b      	b.n	8003a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <HAL_RCC_OscConfig+0x248>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fc2b 	bl	80022c4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00e      	b.n	8003a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fe fc27 	bl	80022c4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d907      	bls.n	8003a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e150      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470000 	.word	0x42470000
 8003a8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a90:	4b88      	ldr	r3, [pc, #544]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ea      	bne.n	8003a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8097 	beq.w	8003bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b81      	ldr	r3, [pc, #516]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b7d      	ldr	r3, [pc, #500]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aca:	4b7a      	ldr	r3, [pc, #488]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ada:	4b77      	ldr	r3, [pc, #476]	@ (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d118      	bne.n	8003b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae6:	4b74      	ldr	r3, [pc, #464]	@ (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a73      	ldr	r2, [pc, #460]	@ (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fbe7 	bl	80022c4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003afa:	f7fe fbe3 	bl	80022c4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e10c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb8 <HAL_RCC_OscConfig+0x474>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2ea>
 8003b20:	4b64      	ldr	r3, [pc, #400]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a63      	ldr	r2, [pc, #396]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2c:	e01c      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCC_OscConfig+0x30c>
 8003b36:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b42:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4e:	e00b      	b.n	8003b68 <HAL_RCC_OscConfig+0x324>
 8003b50:	4b58      	ldr	r3, [pc, #352]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b54:	4a57      	ldr	r2, [pc, #348]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b5c:	4b55      	ldr	r3, [pc, #340]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b60:	4a54      	ldr	r2, [pc, #336]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fba8 	bl	80022c4 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fe fba4 	bl	80022c4 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0cb      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b49      	ldr	r3, [pc, #292]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCC_OscConfig+0x334>
 8003b9a:	e014      	b.n	8003bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9c:	f7fe fb92 	bl	80022c4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fb8e 	bl	80022c4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0b5      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bcc:	4b39      	ldr	r3, [pc, #228]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	4a38      	ldr	r2, [pc, #224]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80a1 	beq.w	8003d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003be2:	4b34      	ldr	r3, [pc, #208]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d05c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d141      	bne.n	8003c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b31      	ldr	r3, [pc, #196]	@ (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb62 	bl	80022c4 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fb5e 	bl	80022c4 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e087      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	4b27      	ldr	r3, [pc, #156]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	491b      	ldr	r1, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fb37 	bl	80022c4 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fe fb33 	bl	80022c4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e05c      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6c:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x416>
 8003c78:	e054      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b10      	ldr	r3, [pc, #64]	@ (8003cbc <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fb20 	bl	80022c4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe fb1c 	bl	80022c4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e045      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x444>
 8003ca6:	e03d      	b.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e038      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40007000 	.word	0x40007000
 8003cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d30 <HAL_RCC_OscConfig+0x4ec>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d121      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d11a      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	085b      	lsrs	r3, r3, #1
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cc      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d48:	4b68      	ldr	r3, [pc, #416]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d90c      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b65      	ldr	r3, [pc, #404]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d88:	4b59      	ldr	r3, [pc, #356]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a58      	ldr	r2, [pc, #352]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003da0:	4b53      	ldr	r3, [pc, #332]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	4a52      	ldr	r2, [pc, #328]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b50      	ldr	r3, [pc, #320]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	494d      	ldr	r1, [pc, #308]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d044      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd2:	4b47      	ldr	r3, [pc, #284]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e07f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e06f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e067      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e12:	4b37      	ldr	r3, [pc, #220]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0203 	bic.w	r2, r3, #3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4934      	ldr	r1, [pc, #208]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e24:	f7fe fa4e 	bl	80022c4 <HAL_GetTick>
 8003e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2c:	f7fe fa4a 	bl	80022c4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e04f      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	4b2b      	ldr	r3, [pc, #172]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 020c 	and.w	r2, r3, #12
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1eb      	bne.n	8003e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e54:	4b25      	ldr	r3, [pc, #148]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d20c      	bcs.n	8003e7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b22      	ldr	r3, [pc, #136]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b20      	ldr	r3, [pc, #128]	@ (8003eec <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e032      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e88:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4916      	ldr	r1, [pc, #88]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea6:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	490e      	ldr	r1, [pc, #56]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eba:	f000 f821 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	490a      	ldr	r1, [pc, #40]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	@ (8003efc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f9ae 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40023c00 	.word	0x40023c00
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08006a44 	.word	0x08006a44
 8003ef8:	20000010 	.word	0x20000010
 8003efc:	20000014 	.word	0x20000014

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f04:	b094      	sub	sp, #80	@ 0x50
 8003f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f18:	4b79      	ldr	r3, [pc, #484]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d00d      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x40>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	f200 80e1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f32:	e0db      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f34:	4b73      	ldr	r3, [pc, #460]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f38:	e0db      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3a:	4b73      	ldr	r3, [pc, #460]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f3e:	e0d8      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f40:	4b6f      	ldr	r3, [pc, #444]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b6a      	ldr	r3, [pc, #424]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f72:	4622      	mov	r2, r4
 8003f74:	462b      	mov	r3, r5
 8003f76:	f04f 0000 	mov.w	r0, #0
 8003f7a:	f04f 0100 	mov.w	r1, #0
 8003f7e:	0159      	lsls	r1, r3, #5
 8003f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f84:	0150      	lsls	r0, r2, #5
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	1a51      	subs	r1, r2, r1
 8003f8e:	6139      	str	r1, [r7, #16]
 8003f90:	4629      	mov	r1, r5
 8003f92:	eb63 0301 	sbc.w	r3, r3, r1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	018b      	lsls	r3, r1, #6
 8003fa8:	4651      	mov	r1, sl
 8003faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fae:	4651      	mov	r1, sl
 8003fb0:	018a      	lsls	r2, r1, #6
 8003fb2:	4651      	mov	r1, sl
 8003fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb8:	4659      	mov	r1, fp
 8003fba:	eb63 0901 	sbc.w	r9, r3, r1
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd2:	4690      	mov	r8, r2
 8003fd4:	4699      	mov	r9, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	eb18 0303 	adds.w	r3, r8, r3
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	462b      	mov	r3, r5
 8003fe0:	eb49 0303 	adc.w	r3, r9, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	024b      	lsls	r3, r1, #9
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	024a      	lsls	r2, r1, #9
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004006:	2200      	movs	r2, #0
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800400a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800400c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004010:	f7fc f8ec 	bl	80001ec <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4613      	mov	r3, r2
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	e058      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b38      	ldr	r3, [pc, #224]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	4618      	mov	r0, r3
 8004028:	4611      	mov	r1, r2
 800402a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004038:	4642      	mov	r2, r8
 800403a:	464b      	mov	r3, r9
 800403c:	f04f 0000 	mov.w	r0, #0
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	0159      	lsls	r1, r3, #5
 8004046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404a:	0150      	lsls	r0, r2, #5
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4641      	mov	r1, r8
 8004052:	ebb2 0a01 	subs.w	sl, r2, r1
 8004056:	4649      	mov	r1, r9
 8004058:	eb63 0b01 	sbc.w	fp, r3, r1
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800406c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004070:	ebb2 040a 	subs.w	r4, r2, sl
 8004074:	eb63 050b 	sbc.w	r5, r3, fp
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	00eb      	lsls	r3, r5, #3
 8004082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	4614      	mov	r4, r2
 800408a:	461d      	mov	r5, r3
 800408c:	4643      	mov	r3, r8
 800408e:	18e3      	adds	r3, r4, r3
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	464b      	mov	r3, r9
 8004094:	eb45 0303 	adc.w	r3, r5, r3
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	61fa      	str	r2, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	f7fc f892 	bl	80001ec <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3750      	adds	r7, #80	@ 0x50
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000010 	.word	0x20000010

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	08006a54 	.word	0x08006a54

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d075      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004180:	4b91      	ldr	r3, [pc, #580]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004186:	f7fe f89d 	bl	80022c4 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800418e:	f7fe f899 	bl	80022c4 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e189      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a0:	4b8a      	ldr	r3, [pc, #552]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	019a      	lsls	r2, r3, #6
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	4981      	ldr	r1, [pc, #516]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01f      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041d8:	4b7c      	ldr	r3, [pc, #496]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041de:	0f1b      	lsrs	r3, r3, #28
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	019a      	lsls	r2, r3, #6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	431a      	orrs	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	071b      	lsls	r3, r3, #28
 80041f8:	4974      	ldr	r1, [pc, #464]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004200:	4b72      	ldr	r3, [pc, #456]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004206:	f023 021f 	bic.w	r2, r3, #31
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	3b01      	subs	r3, #1
 8004210:	496e      	ldr	r1, [pc, #440]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	019a      	lsls	r2, r3, #6
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	071b      	lsls	r3, r3, #28
 8004238:	4964      	ldr	r1, [pc, #400]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004240:	4b61      	ldr	r3, [pc, #388]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004246:	f7fe f83d 	bl	80022c4 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800424e:	f7fe f839 	bl	80022c4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e129      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004260:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d079      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004284:	4b52      	ldr	r3, [pc, #328]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800428a:	f7fe f81b 	bl	80022c4 <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004292:	f7fe f817 	bl	80022c4 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e107      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042a4:	4b49      	ldr	r3, [pc, #292]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b0:	d0ef      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042be:	4b43      	ldr	r3, [pc, #268]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c4:	0f1b      	lsrs	r3, r3, #28
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	019a      	lsls	r2, r3, #6
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	061b      	lsls	r3, r3, #24
 80042d8:	431a      	orrs	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	493b      	ldr	r1, [pc, #236]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042e6:	4b39      	ldr	r3, [pc, #228]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	4934      	ldr	r1, [pc, #208]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800430c:	4b2f      	ldr	r3, [pc, #188]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	0e1b      	lsrs	r3, r3, #24
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	019a      	lsls	r2, r3, #6
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4927      	ldr	r1, [pc, #156]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800433a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	4922      	ldr	r1, [pc, #136]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800434a:	4b21      	ldr	r3, [pc, #132]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004350:	f7fd ffb8 	bl	80022c4 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004358:	f7fd ffb4 	bl	80022c4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e0a4      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436a:	4b18      	ldr	r3, [pc, #96]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004376:	d1ef      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 808b 	beq.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	4a0f      	ldr	r2, [pc, #60]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	@ 0x40
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7fd ff89 	bl	80022c4 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043b4:	e010      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fd ff85 	bl	80022c4 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d909      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e075      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80043c8:	42470068 	.word	0x42470068
 80043cc:	40023800 	.word	0x40023800
 80043d0:	42470070 	.word	0x42470070
 80043d4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80043d8:	4b38      	ldr	r3, [pc, #224]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0e8      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e4:	4b36      	ldr	r3, [pc, #216]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02f      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d028      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004402:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800440c:	4b2d      	ldr	r3, [pc, #180]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004412:	4b2c      	ldr	r3, [pc, #176]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004418:	4a29      	ldr	r2, [pc, #164]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800441e:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d114      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd ff4b 	bl	80022c4 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	e00a      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd ff47 	bl	80022c4 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e035      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ee      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004458:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800445c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004460:	d10d      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004462:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004476:	4912      	ldr	r1, [pc, #72]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]
 800447c:	e005      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800447e:	4b10      	ldr	r3, [pc, #64]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	4a0f      	ldr	r2, [pc, #60]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004484:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004488:	6093      	str	r3, [r2, #8]
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800448c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004496:	490a      	ldr	r1, [pc, #40]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004498:	4313      	orrs	r3, r2
 800449a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80044b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40007000 	.word	0x40007000
 80044c0:	40023800 	.word	0x40023800
 80044c4:	42470e40 	.word	0x42470e40
 80044c8:	424711e0 	.word	0x424711e0

080044cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e01c      	b.n	8004518 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	795b      	ldrb	r3, [r3, #5]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd fd0c 	bl	8001f0c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0204 	orr.w	r2, r2, #4
 8004508:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e07b      	b.n	800462a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004542:	d009      	beq.n	8004558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
 800454a:	e005      	b.n	8004558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fcec 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	ea42 0103 	orr.w	r1, r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	0c1b      	lsrs	r3, r3, #16
 80045f6:	f003 0104 	and.w	r1, r3, #4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	f003 0210 	and.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e01a      	b.n	800467a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fd fcbf 	bl	8001fe0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b088      	sub	sp, #32
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004692:	f7fd fe17 	bl	80022c4 <HAL_GetTick>
 8004696:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
 80046aa:	e12a      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Transmit+0x36>
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e122      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_SPI_Transmit+0x48>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e11b      	b.n	8004902 <HAL_SPI_Transmit+0x280>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2203      	movs	r2, #3
 80046d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004718:	d10f      	bne.n	800473a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d007      	beq.n	8004758 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004760:	d152      	bne.n	8004808 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0xee>
 800476a:	8b7b      	ldrh	r3, [r7, #26]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d145      	bne.n	80047fc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004794:	e032      	b.n	80047fc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d112      	bne.n	80047ca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047c8:	e018      	b.n	80047fc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ca:	f7fd fd7b 	bl	80022c4 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d803      	bhi.n	80047e2 <HAL_SPI_Transmit+0x160>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d102      	bne.n	80047e8 <HAL_SPI_Transmit+0x166>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e082      	b.n	8004902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1c7      	bne.n	8004796 <HAL_SPI_Transmit+0x114>
 8004806:	e053      	b.n	80048b0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_SPI_Transmit+0x194>
 8004810:	8b7b      	ldrh	r3, [r7, #26]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d147      	bne.n	80048a6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800483c:	e033      	b.n	80048a6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d113      	bne.n	8004874 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004872:	e018      	b.n	80048a6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004874:	f7fd fd26 	bl	80022c4 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d803      	bhi.n	800488c <HAL_SPI_Transmit+0x20a>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d102      	bne.n	8004892 <HAL_SPI_Transmit+0x210>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e02d      	b.n	8004902 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c6      	bne.n	800483e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f8bf 	bl	8004a38 <SPI_EndRxTxTransaction>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004900:	2300      	movs	r3, #0
  }
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004918:	b2db      	uxtb	r3, r3
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004938:	f7fd fcc4 	bl	80022c4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	4413      	add	r3, r2
 8004946:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004948:	f7fd fcbc 	bl	80022c4 <HAL_GetTick>
 800494c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800494e:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	015b      	lsls	r3, r3, #5
 8004954:	0d1b      	lsrs	r3, r3, #20
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800495e:	e054      	b.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d050      	beq.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004968:	f7fd fcac 	bl	80022c4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	429a      	cmp	r2, r3
 8004976:	d902      	bls.n	800497e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d13d      	bne.n	80049fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800498c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004996:	d111      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049a0:	d004      	beq.n	80049ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049aa:	d107      	bne.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049c4:	d10f      	bne.n	80049e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e017      	b.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d19b      	bne.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000010 	.word	0x20000010

08004a38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	2102      	movs	r1, #2
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff ff6a 	bl	8004928 <SPI_WaitFlagStateUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d007      	beq.n	8004a6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e032      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <SPI_EndRxTxTransaction+0xa0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004adc <SPI_EndRxTxTransaction+0xa4>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	0d5b      	lsrs	r3, r3, #21
 8004a76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a88:	d112      	bne.n	8004ab0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2180      	movs	r1, #128	@ 0x80
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7ff ff47 	bl	8004928 <SPI_WaitFlagStateUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e00f      	b.n	8004ad0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d0f2      	beq.n	8004ab0 <SPI_EndRxTxTransaction+0x78>
 8004aca:	e000      	b.n	8004ace <SPI_EndRxTxTransaction+0x96>
        break;
 8004acc:	bf00      	nop
  }

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000010 	.word	0x20000010
 8004adc:	165e9f81 	.word	0x165e9f81

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e041      	b.n	8004b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fa88 	bl	800201c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 fad8 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e041      	b.n	8004c14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f839 	bl	8004c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f000 fa89 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x24>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e022      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d109      	bne.n	8004c6e <HAL_TIM_PWM_Start+0x3e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e015      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d109      	bne.n	8004c88 <HAL_TIM_PWM_Start+0x58>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e008      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07c      	b.n	8004d9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x82>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cb0:	e013      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0x92>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xa2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cd0:	e003      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fcec 	bl	80056c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2d      	ldr	r2, [pc, #180]	@ (8004da4 <HAL_TIM_PWM_Start+0x174>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_TIM_PWM_Start+0xcc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004da8 <HAL_TIM_PWM_Start+0x178>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_TIM_PWM_Start+0xd0>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_TIM_PWM_Start+0xd2>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a22      	ldr	r2, [pc, #136]	@ (8004da4 <HAL_TIM_PWM_Start+0x174>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d022      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d28:	d01d      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dac <HAL_TIM_PWM_Start+0x17c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d018      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1d      	ldr	r2, [pc, #116]	@ (8004db0 <HAL_TIM_PWM_Start+0x180>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1c      	ldr	r2, [pc, #112]	@ (8004db4 <HAL_TIM_PWM_Start+0x184>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a16      	ldr	r2, [pc, #88]	@ (8004da8 <HAL_TIM_PWM_Start+0x178>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a18      	ldr	r2, [pc, #96]	@ (8004db8 <HAL_TIM_PWM_Start+0x188>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_TIM_PWM_Start+0x136>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a16      	ldr	r2, [pc, #88]	@ (8004dbc <HAL_TIM_PWM_Start+0x18c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d111      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b06      	cmp	r3, #6
 8004d76:	d010      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d88:	e007      	b.n	8004d9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40010400 	.word	0x40010400
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40001800 	.word	0x40001800

08004dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0ae      	b.n	8004f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b0c      	cmp	r3, #12
 8004dea:	f200 809f 	bhi.w	8004f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dee:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004f2d 	.word	0x08004f2d
 8004dfc:	08004f2d 	.word	0x08004f2d
 8004e00:	08004f2d 	.word	0x08004f2d
 8004e04:	08004e69 	.word	0x08004e69
 8004e08:	08004f2d 	.word	0x08004f2d
 8004e0c:	08004f2d 	.word	0x08004f2d
 8004e10:	08004f2d 	.word	0x08004f2d
 8004e14:	08004eab 	.word	0x08004eab
 8004e18:	08004f2d 	.word	0x08004f2d
 8004e1c:	08004f2d 	.word	0x08004f2d
 8004e20:	08004f2d 	.word	0x08004f2d
 8004e24:	08004eeb 	.word	0x08004eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f9fc 	bl	800522c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0208 	orr.w	r2, r2, #8
 8004e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0204 	bic.w	r2, r2, #4
 8004e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6999      	ldr	r1, [r3, #24]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
      break;
 8004e66:	e064      	b.n	8004f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fa4c 	bl	800530c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699a      	ldr	r2, [r3, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6999      	ldr	r1, [r3, #24]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	619a      	str	r2, [r3, #24]
      break;
 8004ea8:	e043      	b.n	8004f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 faa1 	bl	80053f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0208 	orr.w	r2, r2, #8
 8004ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0204 	bic.w	r2, r2, #4
 8004ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69d9      	ldr	r1, [r3, #28]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	61da      	str	r2, [r3, #28]
      break;
 8004ee8:	e023      	b.n	8004f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 faf5 	bl	80054e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69d9      	ldr	r1, [r3, #28]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	021a      	lsls	r2, r3, #8
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	61da      	str	r2, [r3, #28]
      break;
 8004f2a:	e002      	b.n	8004f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIM_ConfigClockSource+0x1c>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0b4      	b.n	80050ca <HAL_TIM_ConfigClockSource+0x186>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f98:	d03e      	beq.n	8005018 <HAL_TIM_ConfigClockSource+0xd4>
 8004f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9e:	f200 8087 	bhi.w	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa6:	f000 8086 	beq.w	80050b6 <HAL_TIM_ConfigClockSource+0x172>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fae:	d87f      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b70      	cmp	r3, #112	@ 0x70
 8004fb2:	d01a      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xa6>
 8004fb4:	2b70      	cmp	r3, #112	@ 0x70
 8004fb6:	d87b      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b60      	cmp	r3, #96	@ 0x60
 8004fba:	d050      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x11a>
 8004fbc:	2b60      	cmp	r3, #96	@ 0x60
 8004fbe:	d877      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b50      	cmp	r3, #80	@ 0x50
 8004fc2:	d03c      	beq.n	800503e <HAL_TIM_ConfigClockSource+0xfa>
 8004fc4:	2b50      	cmp	r3, #80	@ 0x50
 8004fc6:	d873      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d058      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x13a>
 8004fcc:	2b40      	cmp	r3, #64	@ 0x40
 8004fce:	d86f      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b30      	cmp	r3, #48	@ 0x30
 8004fd2:	d064      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fd4:	2b30      	cmp	r3, #48	@ 0x30
 8004fd6:	d86b      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d060      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d867      	bhi.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d05c      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d05a      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x15a>
 8004fe8:	e062      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ffa:	f000 fb41 	bl	8005680 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800500c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	609a      	str	r2, [r3, #8]
      break;
 8005016:	e04f      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005028:	f000 fb2a 	bl	8005680 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800503a:	609a      	str	r2, [r3, #8]
      break;
 800503c:	e03c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504a:	461a      	mov	r2, r3
 800504c:	f000 fa9e 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2150      	movs	r1, #80	@ 0x50
 8005056:	4618      	mov	r0, r3
 8005058:	f000 faf7 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800505c:	e02c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800506a:	461a      	mov	r2, r3
 800506c:	f000 fabd 	bl	80055ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2160      	movs	r1, #96	@ 0x60
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fae7 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800507c:	e01c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fa7e 	bl	800558c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2140      	movs	r1, #64	@ 0x40
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fad7 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 800509c:	e00c      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f000 face 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 80050ae:	e003      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a46      	ldr	r2, [pc, #280]	@ (8005200 <TIM_Base_SetConfig+0x12c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a43      	ldr	r2, [pc, #268]	@ (8005204 <TIM_Base_SetConfig+0x130>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a42      	ldr	r2, [pc, #264]	@ (8005208 <TIM_Base_SetConfig+0x134>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a41      	ldr	r2, [pc, #260]	@ (800520c <TIM_Base_SetConfig+0x138>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a40      	ldr	r2, [pc, #256]	@ (8005210 <TIM_Base_SetConfig+0x13c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a35      	ldr	r2, [pc, #212]	@ (8005200 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005134:	d027      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a32      	ldr	r2, [pc, #200]	@ (8005204 <TIM_Base_SetConfig+0x130>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d023      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a31      	ldr	r2, [pc, #196]	@ (8005208 <TIM_Base_SetConfig+0x134>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a30      	ldr	r2, [pc, #192]	@ (800520c <TIM_Base_SetConfig+0x138>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2f      	ldr	r2, [pc, #188]	@ (8005210 <TIM_Base_SetConfig+0x13c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2e      	ldr	r2, [pc, #184]	@ (8005214 <TIM_Base_SetConfig+0x140>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2d      	ldr	r2, [pc, #180]	@ (8005218 <TIM_Base_SetConfig+0x144>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2c      	ldr	r2, [pc, #176]	@ (800521c <TIM_Base_SetConfig+0x148>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	@ (8005220 <TIM_Base_SetConfig+0x14c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	@ (8005224 <TIM_Base_SetConfig+0x150>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a29      	ldr	r2, [pc, #164]	@ (8005228 <TIM_Base_SetConfig+0x154>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a10      	ldr	r2, [pc, #64]	@ (8005200 <TIM_Base_SetConfig+0x12c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <TIM_Base_SetConfig+0x13c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d105      	bne.n	80051f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f023 0201 	bic.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]
  }
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800
 8005220:	40001800 	.word	0x40001800
 8005224:	40001c00 	.word	0x40001c00
 8005228:	40002000 	.word	0x40002000

0800522c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f023 0201 	bic.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0303 	bic.w	r3, r3, #3
 8005262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 0302 	bic.w	r3, r3, #2
 8005274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a20      	ldr	r2, [pc, #128]	@ (8005304 <TIM_OC1_SetConfig+0xd8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_OC1_SetConfig+0x64>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a1f      	ldr	r2, [pc, #124]	@ (8005308 <TIM_OC1_SetConfig+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10c      	bne.n	80052aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0308 	bic.w	r3, r3, #8
 8005296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0304 	bic.w	r3, r3, #4
 80052a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <TIM_OC1_SetConfig+0xd8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_OC1_SetConfig+0x8e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a14      	ldr	r2, [pc, #80]	@ (8005308 <TIM_OC1_SetConfig+0xdc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d111      	bne.n	80052de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	40010000 	.word	0x40010000
 8005308:	40010400 	.word	0x40010400

0800530c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f023 0210 	bic.w	r2, r3, #16
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f023 0320 	bic.w	r3, r3, #32
 8005356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a22      	ldr	r2, [pc, #136]	@ (80053f0 <TIM_OC2_SetConfig+0xe4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_OC2_SetConfig+0x68>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a21      	ldr	r2, [pc, #132]	@ (80053f4 <TIM_OC2_SetConfig+0xe8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d10d      	bne.n	8005390 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800537a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800538e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <TIM_OC2_SetConfig+0xe4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_OC2_SetConfig+0x94>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	@ (80053f4 <TIM_OC2_SetConfig+0xe8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d113      	bne.n	80053c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40010400 	.word	0x40010400

080053f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <TIM_OC3_SetConfig+0xe0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_OC3_SetConfig+0x66>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a20      	ldr	r2, [pc, #128]	@ (80054dc <TIM_OC3_SetConfig+0xe4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10d      	bne.n	800547a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005464:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a16      	ldr	r2, [pc, #88]	@ (80054d8 <TIM_OC3_SetConfig+0xe0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC3_SetConfig+0x92>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a15      	ldr	r2, [pc, #84]	@ (80054dc <TIM_OC3_SetConfig+0xe4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d113      	bne.n	80054b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800552a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	031b      	lsls	r3, r3, #12
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a12      	ldr	r2, [pc, #72]	@ (8005584 <TIM_OC4_SetConfig+0xa4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC4_SetConfig+0x68>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <TIM_OC4_SetConfig+0xa8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d109      	bne.n	800555c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800554e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	019b      	lsls	r3, r3, #6
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40010400 	.word	0x40010400

0800558c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 030a 	bic.w	r3, r3, #10
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 0210 	bic.w	r2, r3, #16
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005626:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	f043 0307 	orr.w	r3, r3, #7
 800566c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800569a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e05a      	b.n	80057da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005770:	d01d      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d018      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a1b      	ldr	r2, [pc, #108]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a1a      	ldr	r2, [pc, #104]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00e      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d009      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a17      	ldr	r2, [pc, #92]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d10c      	bne.n	80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40001800 	.word	0x40001800

08005804 <memset>:
 8005804:	4402      	add	r2, r0
 8005806:	4603      	mov	r3, r0
 8005808:	4293      	cmp	r3, r2
 800580a:	d100      	bne.n	800580e <memset+0xa>
 800580c:	4770      	bx	lr
 800580e:	f803 1b01 	strb.w	r1, [r3], #1
 8005812:	e7f9      	b.n	8005808 <memset+0x4>

08005814 <__libc_init_array>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	4d0d      	ldr	r5, [pc, #52]	@ (800584c <__libc_init_array+0x38>)
 8005818:	4c0d      	ldr	r4, [pc, #52]	@ (8005850 <__libc_init_array+0x3c>)
 800581a:	1b64      	subs	r4, r4, r5
 800581c:	10a4      	asrs	r4, r4, #2
 800581e:	2600      	movs	r6, #0
 8005820:	42a6      	cmp	r6, r4
 8005822:	d109      	bne.n	8005838 <__libc_init_array+0x24>
 8005824:	4d0b      	ldr	r5, [pc, #44]	@ (8005854 <__libc_init_array+0x40>)
 8005826:	4c0c      	ldr	r4, [pc, #48]	@ (8005858 <__libc_init_array+0x44>)
 8005828:	f000 f818 	bl	800585c <_init>
 800582c:	1b64      	subs	r4, r4, r5
 800582e:	10a4      	asrs	r4, r4, #2
 8005830:	2600      	movs	r6, #0
 8005832:	42a6      	cmp	r6, r4
 8005834:	d105      	bne.n	8005842 <__libc_init_array+0x2e>
 8005836:	bd70      	pop	{r4, r5, r6, pc}
 8005838:	f855 3b04 	ldr.w	r3, [r5], #4
 800583c:	4798      	blx	r3
 800583e:	3601      	adds	r6, #1
 8005840:	e7ee      	b.n	8005820 <__libc_init_array+0xc>
 8005842:	f855 3b04 	ldr.w	r3, [r5], #4
 8005846:	4798      	blx	r3
 8005848:	3601      	adds	r6, #1
 800584a:	e7f2      	b.n	8005832 <__libc_init_array+0x1e>
 800584c:	08006a64 	.word	0x08006a64
 8005850:	08006a64 	.word	0x08006a64
 8005854:	08006a64 	.word	0x08006a64
 8005858:	08006a68 	.word	0x08006a68

0800585c <_init>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr

08005868 <_fini>:
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	bf00      	nop
 800586c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586e:	bc08      	pop	{r3}
 8005870:	469e      	mov	lr, r3
 8005872:	4770      	bx	lr
