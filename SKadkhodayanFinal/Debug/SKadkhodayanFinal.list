
SKadkhodayanFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005994  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005b58  08005b58  00006b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b60  08005b60  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b60  08005b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b64  08005b64  00006b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005b68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00025b90  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ba0  20025ba0  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a73  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f4d  00000000  00000000  0001aab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0001da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa4  00000000  00000000  0001ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283e5  00000000  00000000  0001fdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bea  00000000  00000000  000481b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eef6a  00000000  00000000  00061da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150d0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e8  00000000  00000000  00150d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00156238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b28 	.word	0x08005b28

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08005b28 	.word	0x08005b28

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fe01 	bl	80020e6 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f912 	bl	800070c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8cf 	bl	800068c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 f9da 	bl	80008ac <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	@ 0x30
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050a:	4a59      	ldr	r2, [pc, #356]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800050c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000510:	6453      	str	r3, [r2, #68]	@ 0x44
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a52      	ldr	r2, [pc, #328]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b4c      	ldr	r3, [pc, #304]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a4b      	ldr	r2, [pc, #300]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a3d      	ldr	r2, [pc, #244]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005ca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005d8:	230e      	movs	r3, #14
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4824      	ldr	r0, [pc, #144]	@ (8000674 <LCD_GPIO_Init+0x178>)
 80005e4:	f002 fb4e 	bl	8002c84 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005ec:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 80005f6:	f002 fb45 	bl	8002c84 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80005fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	481d      	ldr	r0, [pc, #116]	@ (800067c <LCD_GPIO_Init+0x180>)
 8000608:	f002 fb3c 	bl	8002c84 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800060c:	2348      	movs	r3, #72	@ 0x48
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <LCD_GPIO_Init+0x184>)
 8000618:	f002 fb34 	bl	8002c84 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <LCD_GPIO_Init+0x188>)
 800062a:	f002 fb2b 	bl	8002c84 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800062e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000632:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 800063c:	f002 fb22 	bl	8002c84 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000644:	2309      	movs	r3, #9
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 8000650:	f002 fb18 	bl	8002c84 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 8000662:	f002 fb0f 	bl	8002c84 <HAL_GPIO_Init>
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	@ 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800

0800068c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	@ 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800069a:	23f0      	movs	r3, #240	@ 0xf0
 800069c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006a6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <LTCD_Layer_Init+0x78>)
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006c8:	23f0      	movs	r3, #240	@ 0xf0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006cc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <LTCD_Layer_Init+0x7c>)
 80006ee:	f003 f82b 	bl	8003748 <HAL_LTDC_ConfigLayer>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80006f8:	f000 f8fa 	bl	80008f0 <LCD_Error_Handler>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3740      	adds	r7, #64	@ 0x40
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000104 	.word	0x20000104
 8000708:	2000002c 	.word	0x2000002c

0800070c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <LTCD__Init+0xb0>)
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <LTCD__Init+0xb4>)
 8000714:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <LTCD__Init+0xb0>)
 8000718:	2209      	movs	r2, #9
 800071a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <LTCD__Init+0xb0>)
 800071e:	2201      	movs	r2, #1
 8000720:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <LTCD__Init+0xb0>)
 8000724:	221d      	movs	r2, #29
 8000726:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <LTCD__Init+0xb0>)
 800072a:	2203      	movs	r2, #3
 800072c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <LTCD__Init+0xb0>)
 8000730:	f240 120d 	movw	r2, #269	@ 0x10d
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <LTCD__Init+0xb0>)
 8000738:	f240 1243 	movw	r2, #323	@ 0x143
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <LTCD__Init+0xb0>)
 8000740:	f240 1217 	movw	r2, #279	@ 0x117
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <LTCD__Init+0xb0>)
 8000748:	f240 1247 	movw	r2, #327	@ 0x147
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <LTCD__Init+0xb0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <LTCD__Init+0xb0>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <LTCD__Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <LTCD__Init+0xb8>)
 8000768:	2208      	movs	r2, #8
 800076a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <LTCD__Init+0xb8>)
 800076e:	22c0      	movs	r2, #192	@ 0xc0
 8000770:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <LTCD__Init+0xb8>)
 8000774:	2204      	movs	r2, #4
 8000776:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <LTCD__Init+0xb8>)
 800077a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <LTCD__Init+0xb8>)
 8000782:	f003 fe3b 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <LTCD__Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <LTCD__Init+0xb0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800079e:	f7ff fead 	bl	80004fc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <LTCD__Init+0xb0>)
 80007a4:	f002 ff00 	bl	80035a8 <HAL_LTDC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ae:	f000 f89f 	bl	80008f0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007b2:	f000 f8d2 	bl	800095a <ili9341_Init>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	40016800 	.word	0x40016800
 80007c4:	200000d4 	.word	0x200000d4

080007c8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	4413      	add	r3, r2
 80007ea:	4905      	ldr	r1, [pc, #20]	@ (8000800 <LCD_Draw_Pixel+0x38>)
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000104 	.word	0x20000104

08000804 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	4613      	mov	r3, r2
 8000820:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	425b      	negs	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	e034      	b.n	8000896 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	425b      	negs	r3, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	81bb      	strh	r3, [r7, #12]
 8000834:	e024      	b.n	8000880 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800083e:	fb03 f202 	mul.w	r2, r3, r2
 8000842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000846:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	441a      	add	r2, r3
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	8879      	ldrh	r1, [r7, #2]
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	429a      	cmp	r2, r3
 800085a:	dc0b      	bgt.n	8000874 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800085c:	89ba      	ldrh	r2, [r7, #12]
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4413      	add	r3, r2
 8000862:	b298      	uxth	r0, r3
 8000864:	89fa      	ldrh	r2, [r7, #14]
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	b29b      	uxth	r3, r3
 800086c:	883a      	ldrh	r2, [r7, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	f7ff ffaa 	bl	80007c8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000878:	b29b      	uxth	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	81bb      	strh	r3, [r7, #12]
 8000880:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	429a      	cmp	r2, r3
 8000888:	ddd5      	ble.n	8000836 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800088a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088e:	b29b      	uxth	r3, r3
 8000890:	3301      	adds	r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	ddc5      	ble.n	800082c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}
	...

080008ac <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10e      	bne.n	80008e0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e007      	b.n	80008d8 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80008c8:	4908      	ldr	r1, [pc, #32]	@ (80008ec <LCD_Clear+0x40>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	88ba      	ldrh	r2, [r7, #4]
 80008ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80008de:	d3f3      	bcc.n	80008c8 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20000104 	.word	0x20000104

080008f0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <LCD_Error_Handler+0x8>

080008fc <displayCurrentMove>:
void displayMovementBase() {
	LCD_Draw_Circle_Fill(120, 80, 50, LCD_COLOR_BLACK);
	LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
}

void displayCurrentMove(joyPosTypeDef joyPos) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af02      	add	r7, sp, #8
 8000902:	463b      	mov	r3, r7
 8000904:	e883 0003 	stmia.w	r3, {r0, r1}
		LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
		LCD_Draw_Circle_Fill(120+47-20, 80, 20, LCD_COLOR_BLACK);
	}
	*/

	uint32_t dispJoyPosY = mapp(joyPos.xPos, 0, 1024, 80+47-20, 80-47+20);
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	2335      	movs	r3, #53	@ 0x35
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	236b      	movs	r3, #107	@ 0x6b
 8000910:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000914:	2100      	movs	r1, #0
 8000916:	f000 ffe7 	bl	80018e8 <mapp>
 800091a:	4603      	mov	r3, r0
 800091c:	60fb      	str	r3, [r7, #12]

	uint32_t dispJoyPosX = mapp(joyPos.yPos, 0, 1024, 120-47+20, 120+47-20);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	2393      	movs	r3, #147	@ 0x93
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	235d      	movs	r3, #93	@ 0x5d
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	2100      	movs	r1, #0
 800092c:	f000 ffdc 	bl	80018e8 <mapp>
 8000930:	4603      	mov	r3, r0
 8000932:	60bb      	str	r3, [r7, #8]

	LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
 8000934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000938:	222f      	movs	r2, #47	@ 0x2f
 800093a:	2150      	movs	r1, #80	@ 0x50
 800093c:	2078      	movs	r0, #120	@ 0x78
 800093e:	f7ff ff61 	bl	8000804 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(dispJoyPosX, dispJoyPosY, 20, LCD_COLOR_BLACK);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	b298      	uxth	r0, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	b299      	uxth	r1, r3
 800094a:	2300      	movs	r3, #0
 800094c:	2214      	movs	r2, #20
 800094e:	f7ff ff59 	bl	8000804 <LCD_Draw_Circle_Fill>
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800095e:	f000 f9ff 	bl	8000d60 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000962:	20ca      	movs	r0, #202	@ 0xca
 8000964:	f000 f943 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000968:	20c3      	movs	r0, #195	@ 0xc3
 800096a:	f000 f94d 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800096e:	2008      	movs	r0, #8
 8000970:	f000 f94a 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000974:	2050      	movs	r0, #80	@ 0x50
 8000976:	f000 f947 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800097a:	20cf      	movs	r0, #207	@ 0xcf
 800097c:	f000 f937 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f941 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000986:	20c1      	movs	r0, #193	@ 0xc1
 8000988:	f000 f93e 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800098c:	2030      	movs	r0, #48	@ 0x30
 800098e:	f000 f93b 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000992:	20ed      	movs	r0, #237	@ 0xed
 8000994:	f000 f92b 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000998:	2064      	movs	r0, #100	@ 0x64
 800099a:	f000 f935 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f932 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80009a4:	2012      	movs	r0, #18
 80009a6:	f000 f92f 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80009aa:	2081      	movs	r0, #129	@ 0x81
 80009ac:	f000 f92c 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80009b0:	20e8      	movs	r0, #232	@ 0xe8
 80009b2:	f000 f91c 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80009b6:	2085      	movs	r0, #133	@ 0x85
 80009b8:	f000 f926 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f923 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80009c2:	2078      	movs	r0, #120	@ 0x78
 80009c4:	f000 f920 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80009c8:	20cb      	movs	r0, #203	@ 0xcb
 80009ca:	f000 f910 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80009ce:	2039      	movs	r0, #57	@ 0x39
 80009d0:	f000 f91a 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80009d4:	202c      	movs	r0, #44	@ 0x2c
 80009d6:	f000 f917 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f914 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80009e0:	2034      	movs	r0, #52	@ 0x34
 80009e2:	f000 f911 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f000 f90e 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80009ec:	20f7      	movs	r0, #247	@ 0xf7
 80009ee:	f000 f8fe 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80009f2:	2020      	movs	r0, #32
 80009f4:	f000 f908 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80009f8:	20ea      	movs	r0, #234	@ 0xea
 80009fa:	f000 f8f8 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f902 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 f8ff 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000a0a:	20b1      	movs	r0, #177	@ 0xb1
 8000a0c:	f000 f8ef 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f8f9 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000a16:	201b      	movs	r0, #27
 8000a18:	f000 f8f6 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000a1c:	20b6      	movs	r0, #182	@ 0xb6
 8000a1e:	f000 f8e6 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000a22:	200a      	movs	r0, #10
 8000a24:	f000 f8f0 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000a28:	20a2      	movs	r0, #162	@ 0xa2
 8000a2a:	f000 f8ed 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000a2e:	20c0      	movs	r0, #192	@ 0xc0
 8000a30:	f000 f8dd 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000a34:	2010      	movs	r0, #16
 8000a36:	f000 f8e7 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000a3a:	20c1      	movs	r0, #193	@ 0xc1
 8000a3c:	f000 f8d7 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000a40:	2010      	movs	r0, #16
 8000a42:	f000 f8e1 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000a46:	20c5      	movs	r0, #197	@ 0xc5
 8000a48:	f000 f8d1 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000a4c:	2045      	movs	r0, #69	@ 0x45
 8000a4e:	f000 f8db 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000a52:	2015      	movs	r0, #21
 8000a54:	f000 f8d8 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000a58:	20c7      	movs	r0, #199	@ 0xc7
 8000a5a:	f000 f8c8 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000a5e:	2090      	movs	r0, #144	@ 0x90
 8000a60:	f000 f8d2 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000a64:	2036      	movs	r0, #54	@ 0x36
 8000a66:	f000 f8c2 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000a6a:	20c8      	movs	r0, #200	@ 0xc8
 8000a6c:	f000 f8cc 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000a70:	20f2      	movs	r0, #242	@ 0xf2
 8000a72:	f000 f8bc 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f8c6 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000a7c:	20b0      	movs	r0, #176	@ 0xb0
 8000a7e:	f000 f8b6 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000a82:	20c2      	movs	r0, #194	@ 0xc2
 8000a84:	f000 f8c0 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000a88:	20b6      	movs	r0, #182	@ 0xb6
 8000a8a:	f000 f8b0 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f000 f8ba 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000a94:	20a7      	movs	r0, #167	@ 0xa7
 8000a96:	f000 f8b7 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000a9a:	2027      	movs	r0, #39	@ 0x27
 8000a9c:	f000 f8b4 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000aa0:	2004      	movs	r0, #4
 8000aa2:	f000 f8b1 	bl	8000c08 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000aa6:	202a      	movs	r0, #42	@ 0x2a
 8000aa8:	f000 f8a1 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f8ab 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f8a8 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f8a5 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000abe:	20ef      	movs	r0, #239	@ 0xef
 8000ac0:	f000 f8a2 	bl	8000c08 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000ac4:	202b      	movs	r0, #43	@ 0x2b
 8000ac6:	f000 f892 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f89c 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f899 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 f896 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000adc:	203f      	movs	r0, #63	@ 0x3f
 8000ade:	f000 f893 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000ae2:	20f6      	movs	r0, #246	@ 0xf6
 8000ae4:	f000 f883 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f88d 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f88a 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000af4:	2006      	movs	r0, #6
 8000af6:	f000 f887 	bl	8000c08 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000afa:	202c      	movs	r0, #44	@ 0x2c
 8000afc:	f000 f877 	bl	8000bee <ili9341_Write_Reg>
  LCD_Delay(200);
 8000b00:	20c8      	movs	r0, #200	@ 0xc8
 8000b02:	f000 f9e9 	bl	8000ed8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000b06:	2026      	movs	r0, #38	@ 0x26
 8000b08:	f000 f871 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 f87b 	bl	8000c08 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000b12:	20e0      	movs	r0, #224	@ 0xe0
 8000b14:	f000 f86b 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f000 f875 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000b1e:	2029      	movs	r0, #41	@ 0x29
 8000b20:	f000 f872 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000b24:	2024      	movs	r0, #36	@ 0x24
 8000b26:	f000 f86f 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000b2a:	200c      	movs	r0, #12
 8000b2c:	f000 f86c 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000b30:	200e      	movs	r0, #14
 8000b32:	f000 f869 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000b36:	2009      	movs	r0, #9
 8000b38:	f000 f866 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000b3c:	204e      	movs	r0, #78	@ 0x4e
 8000b3e:	f000 f863 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000b42:	2078      	movs	r0, #120	@ 0x78
 8000b44:	f000 f860 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000b48:	203c      	movs	r0, #60	@ 0x3c
 8000b4a:	f000 f85d 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000b4e:	2009      	movs	r0, #9
 8000b50:	f000 f85a 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000b54:	2013      	movs	r0, #19
 8000b56:	f000 f857 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000b5a:	2005      	movs	r0, #5
 8000b5c:	f000 f854 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000b60:	2017      	movs	r0, #23
 8000b62:	f000 f851 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000b66:	2011      	movs	r0, #17
 8000b68:	f000 f84e 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f84b 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000b72:	20e1      	movs	r0, #225	@ 0xe1
 8000b74:	f000 f83b 	bl	8000bee <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 f845 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000b7e:	2016      	movs	r0, #22
 8000b80:	f000 f842 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000b84:	201b      	movs	r0, #27
 8000b86:	f000 f83f 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000b8a:	2004      	movs	r0, #4
 8000b8c:	f000 f83c 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000b90:	2011      	movs	r0, #17
 8000b92:	f000 f839 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 f836 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000b9c:	2031      	movs	r0, #49	@ 0x31
 8000b9e:	f000 f833 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000ba2:	2033      	movs	r0, #51	@ 0x33
 8000ba4:	f000 f830 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000ba8:	2042      	movs	r0, #66	@ 0x42
 8000baa:	f000 f82d 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000bae:	2005      	movs	r0, #5
 8000bb0:	f000 f82a 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000bb4:	200c      	movs	r0, #12
 8000bb6:	f000 f827 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f000 f824 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000bc0:	2028      	movs	r0, #40	@ 0x28
 8000bc2:	f000 f821 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000bc6:	202f      	movs	r0, #47	@ 0x2f
 8000bc8:	f000 f81e 	bl	8000c08 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000bcc:	200f      	movs	r0, #15
 8000bce:	f000 f81b 	bl	8000c08 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000bd2:	2011      	movs	r0, #17
 8000bd4:	f000 f80b 	bl	8000bee <ili9341_Write_Reg>
  LCD_Delay(200);
 8000bd8:	20c8      	movs	r0, #200	@ 0xc8
 8000bda:	f000 f97d 	bl	8000ed8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000bde:	2029      	movs	r0, #41	@ 0x29
 8000be0:	f000 f805 	bl	8000bee <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000be4:	202c      	movs	r0, #44	@ 0x2c
 8000be6:	f000 f802 	bl	8000bee <ili9341_Write_Reg>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f94a 	bl	8000e94 <LCD_IO_WriteReg>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f000 f91b 	bl	8000e50 <LCD_IO_WriteData>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000c28:	4819      	ldr	r0, [pc, #100]	@ (8000c90 <SPI_Init+0x6c>)
 8000c2a:	f003 ffc6 	bl	8004bba <HAL_SPI_GetState>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d12b      	bne.n	8000c8c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000c34:	4b16      	ldr	r3, [pc, #88]	@ (8000c90 <SPI_Init+0x6c>)
 8000c36:	4a17      	ldr	r2, [pc, #92]	@ (8000c94 <SPI_Init+0x70>)
 8000c38:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <SPI_Init+0x6c>)
 8000c3c:	2218      	movs	r2, #24
 8000c3e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <SPI_Init+0x6c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <SPI_Init+0x6c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <SPI_Init+0x6c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <SPI_Init+0x6c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <SPI_Init+0x6c>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <SPI_Init+0x6c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000c64:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <SPI_Init+0x6c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <SPI_Init+0x6c>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c70:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <SPI_Init+0x6c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SPI_Init+0x6c>)
 8000c7a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c7e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <SPI_Init+0x6c>)
 8000c82:	f000 f833 	bl	8000cec <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000c86:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <SPI_Init+0x6c>)
 8000c88:	f003 fda2 	bl	80047d0 <HAL_SPI_Init>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20025904 	.word	0x20025904
 8000c94:	40015000 	.word	0x40015000

08000c98 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <SPI_Write+0x34>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1db9      	adds	r1, r7, #6
 8000cac:	2201      	movs	r2, #1
 8000cae:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <SPI_Write+0x38>)
 8000cb0:	f003 fe3f 	bl	8004932 <HAL_SPI_Transmit>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000cbe:	f000 f809 	bl	8000cd4 <SPI_Error>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	20025904 	.word	0x20025904

08000cd4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000cd8:	4803      	ldr	r0, [pc, #12]	@ (8000ce8 <SPI_Error+0x14>)
 8000cda:	f003 fe02 	bl	80048e2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000cde:	f7ff ffa1 	bl	8000c24 <SPI_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20025904 	.word	0x20025904

08000cec <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfc:	4a16      	ldr	r2, [pc, #88]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d02:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d18:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <SPI_MspInit+0x6c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000d2c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <SPI_MspInit+0x70>)
 8000d4a:	f001 ff9b 	bl	8002c84 <HAL_GPIO_Init>
}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	@ 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40021400 	.word	0x40021400

08000d60 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8000d66:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <LCD_IO_Init+0xe0>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d164      	bne.n	8000e38 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000d6e:	4b34      	ldr	r3, [pc, #208]	@ (8000e40 <LCD_IO_Init+0xe0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	4b32      	ldr	r3, [pc, #200]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7c:	4a31      	ldr	r2, [pc, #196]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d84:	4b2f      	ldr	r3, [pc, #188]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4827      	ldr	r0, [pc, #156]	@ (8000e48 <LCD_IO_Init+0xe8>)
 8000daa:	f001 ff6b 	bl	8002c84 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a23      	ldr	r2, [pc, #140]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000dca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	4819      	ldr	r0, [pc, #100]	@ (8000e48 <LCD_IO_Init+0xe8>)
 8000de4:	f001 ff4e 	bl	8002c84 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <LCD_IO_Init+0xe4>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000e04:	2304      	movs	r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <LCD_IO_Init+0xec>)
 8000e1c:	f001 ff32 	bl	8002c84 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000e20:	2200      	movs	r2, #0
 8000e22:	2104      	movs	r1, #4
 8000e24:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <LCD_IO_Init+0xec>)
 8000e26:	f002 f9e5 	bl	80031f4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <LCD_IO_Init+0xec>)
 8000e30:	f002 f9e0 	bl	80031f4 <HAL_GPIO_WritePin>

    SPI_Init();
 8000e34:	f7ff fef6 	bl	8000c24 <SPI_Init>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2002595c 	.word	0x2002595c
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40020800 	.word	0x40020800

08000e50 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	480a      	ldr	r0, [pc, #40]	@ (8000e8c <LCD_IO_WriteData+0x3c>)
 8000e62:	f002 f9c7 	bl	80031f4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8000e66:	2200      	movs	r2, #0
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4809      	ldr	r0, [pc, #36]	@ (8000e90 <LCD_IO_WriteData+0x40>)
 8000e6c:	f002 f9c2 	bl	80031f4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff10 	bl	8000c98 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <LCD_IO_WriteData+0x40>)
 8000e7e:	f002 f9b9 	bl	80031f4 <HAL_GPIO_WritePin>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020c00 	.word	0x40020c00
 8000e90:	40020800 	.word	0x40020800

08000e94 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ea4:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <LCD_IO_WriteReg+0x3c>)
 8000ea6:	f002 f9a5 	bl	80031f4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2104      	movs	r1, #4
 8000eae:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <LCD_IO_WriteReg+0x40>)
 8000eb0:	f002 f9a0 	bl	80031f4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff feed 	bl	8000c98 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <LCD_IO_WriteReg+0x40>)
 8000ec4:	f002 f996 	bl	80031f4 <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f001 f9b5 	bl	8002250 <HAL_Delay>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <joystick_getCoords>:
 */

#include "joystickDriver.h"


void joystick_getCoords(joyPosTypeDef * joyPos, ADC_HandleTypeDef hadc1, ADC_HandleTypeDef hadc2) {
 8000eee:	b084      	sub	sp, #16
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	f107 0014 	add.w	r0, r7, #20
 8000efc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	HAL_ADC_Start(&hadc1);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fa0b 	bl	8002320 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 fb09 	bl	800252a <HAL_ADC_PollForConversion>

	joyPos->xPos = HAL_ADC_GetValue(&hadc1);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 fb8f 	bl	8002640 <HAL_ADC_GetValue>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fac9 	bl	80024c4 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc2);
 8000f32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f9f2 	bl	8002320 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000f3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 faf0 	bl	800252a <HAL_ADC_PollForConversion>

	joyPos->yPos = HAL_ADC_GetValue(&hadc2);
 8000f4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 fb76 	bl	8002640 <HAL_ADC_GetValue>
 8000f54:	4602      	mov	r2, r0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]

	HAL_ADC_Stop(&hadc2);
 8000f5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fab0 	bl	80024c4 <HAL_ADC_Stop>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6e:	b004      	add	sp, #16
 8000f70:	4770      	bx	lr
	...

08000f74 <SystemClockOverride>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SystemClockOverride(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b092      	sub	sp, #72	@ 0x48
 8000f78:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <SystemClockOverride+0x7c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff0 <SystemClockOverride+0x7c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <SystemClockOverride+0x7c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f96:	2301      	movs	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000faa:	2308      	movs	r3, #8
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fae:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fd98 	bl	8003af4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fda:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000fdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fffe 	bl	8003fe4 <HAL_RCC_ClockConfig>
}
 8000fe8:	bf00      	nop
 8000fea:	3748      	adds	r7, #72	@ 0x48
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff8:	b0a6      	sub	sp, #152	@ 0x98
 8000ffa:	af22      	add	r7, sp, #136	@ 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f001 f8b6 	bl	800216c <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  SystemClockOverride();
 8001000:	f7ff ffb8 	bl	8000f74 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fabc 	bl	8001580 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001008:	f000 f85a 	bl	80010c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800100c:	f000 fa38 	bl	8001480 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001010:	f000 f8a8 	bl	8001164 <MX_ADC2_Init>
  MX_I2C3_Init();
 8001014:	f000 f8f8 	bl	8001208 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001018:	f000 f936 	bl	8001288 <MX_LTDC_Init>
  MX_SPI5_Init();
 800101c:	f000 f9fa 	bl	8001414 <MX_SPI5_Init>
  MX_RNG_Init();
 8001020:	f000 f9e4 	bl	80013ec <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Left
 8001024:	2100      	movs	r1, #0
 8001026:	4823      	ldr	r0, [pc, #140]	@ (80010b4 <main+0xc0>)
 8001028:	f003 ff5a 	bl	8004ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// Right
 800102c:	2108      	movs	r1, #8
 800102e:	4821      	ldr	r0, [pc, #132]	@ (80010b4 <main+0xc0>)
 8001030:	f003 ff56 	bl	8004ee0 <HAL_TIM_PWM_Start>

  joyPosTypeDef joyPos = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
  motorPowTypeDef motorPow = {0};
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]

  ApplicationInit();
 8001042:	f7ff fa4b 	bl	80004dc <ApplicationInit>

  //LCD_Visual_Demo();

  HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800104a:	f001 f901 	bl	8002250 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  joystick_getCoords(&joyPos, hadc1, hadc2);
 800104e:	4e1a      	ldr	r6, [pc, #104]	@ (80010b8 <main+0xc4>)
 8001050:	f107 0808 	add.w	r8, r7, #8
 8001054:	4a19      	ldr	r2, [pc, #100]	@ (80010bc <main+0xc8>)
 8001056:	ab0f      	add	r3, sp, #60	@ 0x3c
 8001058:	4611      	mov	r1, r2
 800105a:	2248      	movs	r2, #72	@ 0x48
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fd55 	bl	8005b0c <memcpy>
 8001062:	466d      	mov	r5, sp
 8001064:	f106 040c 	add.w	r4, r6, #12
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001074:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001078:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800107c:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001080:	4640      	mov	r0, r8
 8001082:	f7ff ff34 	bl	8000eee <joystick_getCoords>

	  motor_CalculatePower(joyPos.xPos, joyPos.yPos, &motorPow);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	b29b      	uxth	r3, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	b291      	uxth	r1, r2
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fc45 	bl	8001920 <motor_CalculatePower>

	  motor_ApplyPower(motorPow.leftPow, motorPow.rightPow);
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fca9 	bl	80019f4 <motor_ApplyPower>

	  displayCurrentMove(joyPos);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010aa:	f7ff fc27 	bl	80008fc <displayCurrentMove>
	  joystick_getCoords(&joyPos, hadc1, hadc2);
 80010ae:	bf00      	nop
 80010b0:	e7cd      	b.n	800104e <main+0x5a>
 80010b2:	bf00      	nop
 80010b4:	20025b54 	.word	0x20025b54
 80010b8:	20025960 	.word	0x20025960
 80010bc:	200259a8 	.word	0x200259a8

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	@ (800115c <MX_ADC1_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <MX_ADC1_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001122:	f001 f8b9 	bl	8002298 <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800112c:	f000 fbd6 	bl	80018dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001130:	2305      	movs	r3, #5
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_ADC1_Init+0x98>)
 8001142:	f001 fa8b 	bl	800265c <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 fbc6 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20025960 	.word	0x20025960
 800115c:	40012000 	.word	0x40012000
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <MX_ADC2_Init+0x9c>)
 800117a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_ADC2_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001184:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001188:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_ADC2_Init+0x98>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <MX_ADC2_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <MX_ADC2_Init+0xa0>)
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011c6:	f001 f867 	bl	8002298 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80011d0:	f000 fb84 	bl	80018dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011d4:	230d      	movs	r3, #13
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_ADC2_Init+0x98>)
 80011e6:	f001 fa39 	bl	800265c <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80011f0:	f000 fb74 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200259a8 	.word	0x200259a8
 8001200:	40012100 	.word	0x40012100
 8001204:	0f000001 	.word	0x0f000001

08001208 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_I2C3_Init+0x74>)
 800120e:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <MX_I2C3_Init+0x78>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_I2C3_Init+0x74>)
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <MX_I2C3_Init+0x7c>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_I2C3_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_I2C3_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_I2C3_Init+0x74>)
 8001226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_I2C3_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C3_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_I2C3_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C3_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_I2C3_Init+0x74>)
 8001246:	f001 ffef 	bl	8003228 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 fb44 	bl	80018dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	4809      	ldr	r0, [pc, #36]	@ (800127c <MX_I2C3_Init+0x74>)
 8001258:	f002 f92a 	bl	80034b0 <HAL_I2CEx_ConfigAnalogFilter>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001262:	f000 fb3b 	bl	80018dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C3_Init+0x74>)
 800126a:	f002 f95d 	bl	8003528 <HAL_I2CEx_ConfigDigitalFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 fb32 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200259f0 	.word	0x200259f0
 8001280:	40005c00 	.word	0x40005c00
 8001284:	000186a0 	.word	0x000186a0

08001288 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b09a      	sub	sp, #104	@ 0x68
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800128e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001292:	2234      	movs	r2, #52	@ 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fc0c 	bl	8005ab4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2234      	movs	r2, #52	@ 0x34
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fc06 	bl	8005ab4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012a8:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012aa:	4a4f      	ldr	r2, [pc, #316]	@ (80013e8 <MX_LTDC_Init+0x160>)
 80012ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012ae:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012b4:	4b4b      	ldr	r3, [pc, #300]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012c0:	4b48      	ldr	r3, [pc, #288]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80012cc:	4b45      	ldr	r3, [pc, #276]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012ce:	2203      	movs	r2, #3
 80012d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80012d2:	4b44      	ldr	r3, [pc, #272]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012d4:	220e      	movs	r2, #14
 80012d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80012d8:	4b42      	ldr	r3, [pc, #264]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012da:	2205      	movs	r2, #5
 80012dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80012de:	4b41      	ldr	r3, [pc, #260]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012e0:	f240 228e 	movw	r2, #654	@ 0x28e
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80012e6:	4b3f      	ldr	r3, [pc, #252]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012e8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80012ee:	4b3d      	ldr	r3, [pc, #244]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012f0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80012f8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012fe:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001306:	4b37      	ldr	r3, [pc, #220]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800130e:	4b35      	ldr	r3, [pc, #212]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001316:	4833      	ldr	r0, [pc, #204]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 8001318:	f002 f946 	bl	80035a8 <HAL_LTDC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001322:	f000 fadb 	bl	80018dc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001336:	2300      	movs	r3, #0
 8001338:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001346:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001348:	2305      	movs	r3, #5
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800136a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 8001374:	f002 f9e8 	bl	8003748 <HAL_LTDC_ConfigLayer>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800137e:	f000 faad 	bl	80018dc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800139e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013a4:	2305      	movs	r3, #5
 80013a6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_LTDC_Init+0x15c>)
 80013ce:	f002 f9bb 	bl	8003748 <HAL_LTDC_ConfigLayer>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80013d8:	f000 fa80 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3768      	adds	r7, #104	@ 0x68
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20025a44 	.word	0x20025a44
 80013e8:	40016800 	.word	0x40016800

080013ec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_RNG_Init+0x20>)
 80013f2:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <MX_RNG_Init+0x24>)
 80013f4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_RNG_Init+0x20>)
 80013f8:	f003 f9c0 	bl	800477c <HAL_RNG_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001402:	f000 fa6b 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20025aec 	.word	0x20025aec
 8001410:	50060800 	.word	0x50060800

08001414 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_SPI5_Init+0x64>)
 800141a:	4a18      	ldr	r2, [pc, #96]	@ (800147c <MX_SPI5_Init+0x68>)
 800141c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001420:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001424:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_SPI5_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001432:	4b11      	ldr	r3, [pc, #68]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_SPI5_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800143e:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001444:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <MX_SPI5_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <MX_SPI5_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001460:	220a      	movs	r2, #10
 8001462:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_SPI5_Init+0x64>)
 8001466:	f003 f9b3 	bl	80047d0 <HAL_SPI_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001470:	f000 fa34 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20025afc 	.word	0x20025afc
 800147c:	40015000 	.word	0x40015000

08001480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	@ 0x38
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	f107 0320 	add.w	r3, r7, #32
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b0:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014b2:	4a32      	ldr	r2, [pc, #200]	@ (800157c <MX_TIM3_Init+0xfc>)
 80014b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80014b6:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014b8:	2205      	movs	r2, #5
 80014ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80014c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014c4:	22c8      	movs	r2, #200	@ 0xc8
 80014c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d4:	4828      	ldr	r0, [pc, #160]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014d6:	f003 fc5b 	bl	8004d90 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014e0:	f000 f9fc 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ee:	4619      	mov	r1, r3
 80014f0:	4821      	ldr	r0, [pc, #132]	@ (8001578 <MX_TIM3_Init+0xf8>)
 80014f2:	f003 fe7f 	bl	80051f4 <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80014fc:	f000 f9ee 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001500:	481d      	ldr	r0, [pc, #116]	@ (8001578 <MX_TIM3_Init+0xf8>)
 8001502:	f003 fc94 	bl	8004e2e <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800150c:	f000 f9e6 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4619      	mov	r1, r3
 800151e:	4816      	ldr	r0, [pc, #88]	@ (8001578 <MX_TIM3_Init+0xf8>)
 8001520:	f004 fa4c 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800152a:	f000 f9d7 	bl	80018dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	@ 0x60
 8001530:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	480c      	ldr	r0, [pc, #48]	@ (8001578 <MX_TIM3_Init+0xf8>)
 8001546:	f003 fd93 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001550:	f000 f9c4 	bl	80018dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2208      	movs	r2, #8
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	@ (8001578 <MX_TIM3_Init+0xf8>)
 800155c:	f003 fd88 	bl	8005070 <HAL_TIM_PWM_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001566:	f000 f9b9 	bl	80018dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156a:	4803      	ldr	r0, [pc, #12]	@ (8001578 <MX_TIM3_Init+0xf8>)
 800156c:	f000 fd32 	bl	8001fd4 <HAL_TIM_MspPostInit>

}
 8001570:	bf00      	nop
 8001572:	3738      	adds	r7, #56	@ 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20025b54 	.word	0x20025b54
 800157c:	40000400 	.word	0x40000400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08e      	sub	sp, #56	@ 0x38
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	4bb2      	ldr	r3, [pc, #712]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4ab1      	ldr	r2, [pc, #708]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4baf      	ldr	r3, [pc, #700]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
 80015b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	4bab      	ldr	r3, [pc, #684]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4aaa      	ldr	r2, [pc, #680]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4ba8      	ldr	r3, [pc, #672]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4aa3      	ldr	r2, [pc, #652]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4ba1      	ldr	r3, [pc, #644]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a9c      	ldr	r2, [pc, #624]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b96      	ldr	r3, [pc, #600]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a95      	ldr	r2, [pc, #596]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b93      	ldr	r3, [pc, #588]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b8f      	ldr	r3, [pc, #572]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a8e      	ldr	r2, [pc, #568]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 800162c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b8c      	ldr	r3, [pc, #560]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	4b88      	ldr	r3, [pc, #544]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a87      	ldr	r2, [pc, #540]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001648:	f043 0310 	orr.w	r3, r3, #16
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b85      	ldr	r3, [pc, #532]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b81      	ldr	r3, [pc, #516]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a80      	ldr	r2, [pc, #512]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b7e      	ldr	r3, [pc, #504]	@ (8001864 <MX_GPIO_Init+0x2e4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2116      	movs	r1, #22
 800167a:	487b      	ldr	r0, [pc, #492]	@ (8001868 <MX_GPIO_Init+0x2e8>)
 800167c:	f001 fdba 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
 8001682:	2180      	movs	r1, #128	@ 0x80
 8001684:	4879      	ldr	r0, [pc, #484]	@ (800186c <MX_GPIO_Init+0x2ec>)
 8001686:	f001 fdb5 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001690:	4877      	ldr	r0, [pc, #476]	@ (8001870 <MX_GPIO_Init+0x2f0>)
 8001692:	f001 fdaf 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800169c:	4875      	ldr	r0, [pc, #468]	@ (8001874 <MX_GPIO_Init+0x2f4>)
 800169e:	f001 fda9 	bl	80031f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80016a2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016b4:	230c      	movs	r3, #12
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016bc:	4619      	mov	r1, r3
 80016be:	486e      	ldr	r0, [pc, #440]	@ (8001878 <MX_GPIO_Init+0x2f8>)
 80016c0:	f001 fae0 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80016c4:	2301      	movs	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016d4:	230c      	movs	r3, #12
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	4862      	ldr	r0, [pc, #392]	@ (8001868 <MX_GPIO_Init+0x2e8>)
 80016e0:	f001 fad0 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80016e4:	2316      	movs	r3, #22
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	485b      	ldr	r0, [pc, #364]	@ (8001868 <MX_GPIO_Init+0x2e8>)
 80016fc:	f001 fac2 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001700:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001706:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001714:	4619      	mov	r1, r3
 8001716:	4855      	ldr	r0, [pc, #340]	@ (800186c <MX_GPIO_Init+0x2ec>)
 8001718:	f001 fab4 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	484e      	ldr	r0, [pc, #312]	@ (800186c <MX_GPIO_Init+0x2ec>)
 8001734:	f001 faa6 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001738:	2320      	movs	r3, #32
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800173c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	4619      	mov	r1, r3
 800174c:	4846      	ldr	r0, [pc, #280]	@ (8001868 <MX_GPIO_Init+0x2e8>)
 800174e:	f001 fa99 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	4845      	ldr	r0, [pc, #276]	@ (800187c <MX_GPIO_Init+0x2fc>)
 8001766:	f001 fa8d 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800176a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177c:	230c      	movs	r3, #12
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	483b      	ldr	r0, [pc, #236]	@ (8001874 <MX_GPIO_Init+0x2f4>)
 8001788:	f001 fa7c 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800178c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179e:	230c      	movs	r3, #12
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4835      	ldr	r0, [pc, #212]	@ (8001880 <MX_GPIO_Init+0x300>)
 80017aa:	f001 fa6b 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80017ae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80017c0:	230c      	movs	r3, #12
 80017c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	482c      	ldr	r0, [pc, #176]	@ (800187c <MX_GPIO_Init+0x2fc>)
 80017cc:	f001 fa5a 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80017d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4825      	ldr	r0, [pc, #148]	@ (800187c <MX_GPIO_Init+0x2fc>)
 80017e6:	f001 fa4d 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80017ea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fc:	230c      	movs	r3, #12
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	481a      	ldr	r0, [pc, #104]	@ (8001870 <MX_GPIO_Init+0x2f0>)
 8001808:	f001 fa3c 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800180c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	4813      	ldr	r0, [pc, #76]	@ (8001870 <MX_GPIO_Init+0x2f0>)
 8001822:	f001 fa2f 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001826:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182c:	2301      	movs	r3, #1
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	480c      	ldr	r0, [pc, #48]	@ (8001870 <MX_GPIO_Init+0x2f0>)
 8001840:	f001 fa20 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001844:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001856:	2307      	movs	r3, #7
 8001858:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	e010      	b.n	8001884 <MX_GPIO_Init+0x304>
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40020800 	.word	0x40020800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021800 	.word	0x40021800
 8001878:	40021400 	.word	0x40021400
 800187c:	40020400 	.word	0x40020400
 8001880:	40021000 	.word	0x40021000
 8001884:	4812      	ldr	r0, [pc, #72]	@ (80018d0 <MX_GPIO_Init+0x350>)
 8001886:	f001 f9fd 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800188a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <MX_GPIO_Init+0x354>)
 80018a4:	f001 f9ee 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80018a8:	2360      	movs	r3, #96	@ 0x60
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b8:	230c      	movs	r3, #12
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_GPIO_Init+0x358>)
 80018c4:	f001 f9de 	bl	8002c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c8:	bf00      	nop
 80018ca:	3738      	adds	r7, #56	@ 0x38
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40020400 	.word	0x40020400

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e0:	b672      	cpsid	i
}
 80018e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <Error_Handler+0x8>

080018e8 <mapp>:
#include "motorDriver.h"

// Parameter that affects turning sensitivity
#define TURNFACTOR 1

uint32_t mapp(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	69b9      	ldr	r1, [r7, #24]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	1a8a      	subs	r2, r1, r2
 8001902:	fb03 f202 	mul.w	r2, r3, r2
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1acb      	subs	r3, r1, r3
 800190c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	4413      	add	r3, r2
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <motor_CalculatePower>:

void motor_CalculatePower(uint16_t xPos, uint16_t yPos, motorPowTypeDef * motorPow) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	4603      	mov	r3, r0
 8001928:	603a      	str	r2, [r7, #0]
 800192a:	80fb      	strh	r3, [r7, #6]
 800192c:	460b      	mov	r3, r1
 800192e:	80bb      	strh	r3, [r7, #4]

	uint16_t base = (uint16_t) mapp(xPos, 512, 1024, 0, 100);
 8001930:	88f8      	ldrh	r0, [r7, #6]
 8001932:	2364      	movs	r3, #100	@ 0x64
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800193c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001940:	f7ff ffd2 	bl	80018e8 <mapp>
 8001944:	4603      	mov	r3, r0
 8001946:	817b      	strh	r3, [r7, #10]

	// Adjustment value that is applied to both motors
	int16_t adjust = (int16_t) (mapp(512 - yPos, 0, 1024, 0, 100)) * TURNFACTOR;
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800194e:	4618      	mov	r0, r3
 8001950:	2364      	movs	r3, #100	@ 0x64
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195a:	2100      	movs	r1, #0
 800195c:	f7ff ffc4 	bl	80018e8 <mapp>
 8001960:	4603      	mov	r3, r0
 8001962:	813b      	strh	r3, [r7, #8]

	// Apply adjustment
	int16_t rightMotor = base - adjust;
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	81fb      	strh	r3, [r7, #14]
	int16_t leftMotor = base + adjust;
 800196e:	893a      	ldrh	r2, [r7, #8]
 8001970:	897b      	ldrh	r3, [r7, #10]
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	81bb      	strh	r3, [r7, #12]

	// When joystick is fully back, send HIGH signal to brakePinLeft then set power to 0.
	if ((rightMotor < 0 && leftMotor < 0) || (xPos <= 515 && yPos <= 515)) {
 8001978:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da03      	bge.n	8001988 <motor_CalculatePower+0x68>
 8001980:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db07      	blt.n	8001998 <motor_CalculatePower+0x78>
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800198e:	d20e      	bcs.n	80019ae <motor_CalculatePower+0x8e>
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8001996:	d20a      	bcs.n	80019ae <motor_CalculatePower+0x8e>
	    rightMotor = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	81fb      	strh	r3, [r7, #14]
	    leftMotor = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	81bb      	strh	r3, [r7, #12]

	    // Store motor power
	    motorPow->leftPow = leftMotor;
 80019a0:	89ba      	ldrh	r2, [r7, #12]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	801a      	strh	r2, [r3, #0]
	    motorPow->rightPow = rightMotor;
 80019a6:	89fa      	ldrh	r2, [r7, #14]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	805a      	strh	r2, [r3, #2]
 80019ac:	e01e      	b.n	80019ec <motor_CalculatePower+0xcc>
	}

	else {

		//////////////// Removing values >255 or <0 and setting them to 255 and 0 respectively ///////////////////////
		if (rightMotor < 0) {
 80019ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da01      	bge.n	80019ba <motor_CalculatePower+0x9a>
			rightMotor = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor < 0) {
 80019ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da01      	bge.n	80019c6 <motor_CalculatePower+0xa6>
			leftMotor = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	81bb      	strh	r3, [r7, #12]
		}

		if (rightMotor > 100) {
 80019c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	dd01      	ble.n	80019d2 <motor_CalculatePower+0xb2>
			rightMotor = 100;
 80019ce:	2364      	movs	r3, #100	@ 0x64
 80019d0:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor > 100) {
 80019d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	dd01      	ble.n	80019de <motor_CalculatePower+0xbe>
			leftMotor = 100;
 80019da:	2364      	movs	r3, #100	@ 0x64
 80019dc:	81bb      	strh	r3, [r7, #12]
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////


		// Store motor power
		motorPow->leftPow = leftMotor;
 80019de:	89ba      	ldrh	r2, [r7, #12]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	801a      	strh	r2, [r3, #0]
		motorPow->rightPow = rightMotor;
 80019e4:	89fa      	ldrh	r2, [r7, #14]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	805a      	strh	r2, [r3, #2]
	}
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <motor_ApplyPower>:

void motor_ApplyPower(uint16_t powerLeft, uint16_t powerRight) {
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	460a      	mov	r2, r1
 80019fe:	80fb      	strh	r3, [r7, #6]
 8001a00:	4613      	mov	r3, r2
 8001a02:	80bb      	strh	r3, [r7, #4]

	// TODO: Disable Brakes Here

	TIM3->CCR1 = powerLeft;		// Set the left CCR register to change PWM
 8001a04:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <motor_ApplyPower+0x28>)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR3 = powerRight;	// Set the right CCR register to change PWM
 8001a0a:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <motor_ApplyPower+0x28>)
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40000400 	.word	0x40000400

08001a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a36:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_MspInit+0x4c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5e:	2007      	movs	r0, #7
 8001a60:	f001 f8dc 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	@ 0x30
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_ADC_MspInit+0xd8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d128      	bne.n	8001ae4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	61bb      	str	r3, [r7, #24]
 8001aac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a25      	ldr	r2, [pc, #148]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b23      	ldr	r3, [pc, #140]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aca:	2320      	movs	r3, #32
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	481c      	ldr	r0, [pc, #112]	@ (8001b50 <HAL_ADC_MspInit+0xe0>)
 8001ade:	f001 f8d1 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ae2:	e02c      	b.n	8001b3e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8001b54 <HAL_ADC_MspInit+0xe4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d127      	bne.n	8001b3e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001af8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a0e      	ldr	r2, [pc, #56]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <HAL_ADC_MspInit+0xdc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b26:	2308      	movs	r3, #8
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <HAL_ADC_MspInit+0xe8>)
 8001b3a:	f001 f8a3 	bl	8002c84 <HAL_GPIO_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	3730      	adds	r7, #48	@ 0x30
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40012100 	.word	0x40012100
 8001b58:	40020800 	.word	0x40020800

08001b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a29      	ldr	r2, [pc, #164]	@ (8001c20 <HAL_I2C_MspInit+0xc4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d14b      	bne.n	8001c16 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a27      	ldr	r2, [pc, #156]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4815      	ldr	r0, [pc, #84]	@ (8001c28 <HAL_I2C_MspInit+0xcc>)
 8001bd4:	f001 f856 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bde:	2312      	movs	r3, #18
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bea:	2304      	movs	r3, #4
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480d      	ldr	r0, [pc, #52]	@ (8001c2c <HAL_I2C_MspInit+0xd0>)
 8001bf6:	f001 f845 	bl	8002c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001c04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_I2C_MspInit+0xc8>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40005c00 	.word	0x40005c00
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b09a      	sub	sp, #104	@ 0x68
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4c:	2230      	movs	r2, #48	@ 0x30
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 ff2f 	bl	8005ab4 <memset>
  if(hltdc->Instance==LTDC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a81      	ldr	r2, [pc, #516]	@ (8001e60 <HAL_LTDC_MspInit+0x230>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f040 80fa 	bne.w	8001e56 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c62:	2308      	movs	r3, #8
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001c66:	2332      	movs	r3, #50	@ 0x32
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 fbc0 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001c82:	f7ff fe2b 	bl	80018dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	4b76      	ldr	r3, [pc, #472]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a75      	ldr	r2, [pc, #468]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b73      	ldr	r3, [pc, #460]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cac:	f043 0320 	orr.w	r3, r3, #32
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	4b68      	ldr	r3, [pc, #416]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a67      	ldr	r2, [pc, #412]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b65      	ldr	r3, [pc, #404]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	4b61      	ldr	r3, [pc, #388]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a60      	ldr	r2, [pc, #384]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b5e      	ldr	r3, [pc, #376]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a59      	ldr	r2, [pc, #356]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b57      	ldr	r3, [pc, #348]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a52      	ldr	r2, [pc, #328]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b50      	ldr	r3, [pc, #320]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b4c      	ldr	r3, [pc, #304]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a4b      	ldr	r2, [pc, #300]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b49      	ldr	r3, [pc, #292]	@ (8001e64 <HAL_LTDC_MspInit+0x234>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d4e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d5c:	230e      	movs	r3, #14
 8001d5e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d64:	4619      	mov	r1, r3
 8001d66:	4840      	ldr	r0, [pc, #256]	@ (8001e68 <HAL_LTDC_MspInit+0x238>)
 8001d68:	f000 ff8c 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d6c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d70:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d7e:	230e      	movs	r3, #14
 8001d80:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d86:	4619      	mov	r1, r3
 8001d88:	4838      	ldr	r0, [pc, #224]	@ (8001e6c <HAL_LTDC_MspInit+0x23c>)
 8001d8a:	f000 ff7b 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d9e:	2309      	movs	r3, #9
 8001da0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da6:	4619      	mov	r1, r3
 8001da8:	4831      	ldr	r0, [pc, #196]	@ (8001e70 <HAL_LTDC_MspInit+0x240>)
 8001daa:	f000 ff6b 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001dae:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001db2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dc0:	230e      	movs	r3, #14
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4829      	ldr	r0, [pc, #164]	@ (8001e70 <HAL_LTDC_MspInit+0x240>)
 8001dcc:	f000 ff5a 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001dd0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001dd4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001de2:	230e      	movs	r3, #14
 8001de4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dea:	4619      	mov	r1, r3
 8001dec:	4821      	ldr	r0, [pc, #132]	@ (8001e74 <HAL_LTDC_MspInit+0x244>)
 8001dee:	f000 ff49 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001df2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001df6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e04:	230e      	movs	r3, #14
 8001e06:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481a      	ldr	r0, [pc, #104]	@ (8001e78 <HAL_LTDC_MspInit+0x248>)
 8001e10:	f000 ff38 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e14:	2348      	movs	r3, #72	@ 0x48
 8001e16:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e24:	230e      	movs	r3, #14
 8001e26:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4813      	ldr	r0, [pc, #76]	@ (8001e7c <HAL_LTDC_MspInit+0x24c>)
 8001e30:	f000 ff28 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e38:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e46:	2309      	movs	r3, #9
 8001e48:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <HAL_LTDC_MspInit+0x244>)
 8001e52:	f000 ff17 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001e56:	bf00      	nop
 8001e58:	3768      	adds	r7, #104	@ 0x68
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40016800 	.word	0x40016800
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00

08001e80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_RNG_MspInit+0x3c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10d      	bne.n	8001eae <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_RNG_MspInit+0x40>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <HAL_RNG_MspInit+0x40>)
 8001e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea0:	6353      	str	r3, [r2, #52]	@ 0x34
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <HAL_RNG_MspInit+0x40>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	50060800 	.word	0x50060800
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <HAL_SPI_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12c      	bne.n	8001f40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eee:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f0c:	f043 0320 	orr.w	r3, r3, #32
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <HAL_SPI_MspInit+0x88>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f1e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f30:	2305      	movs	r3, #5
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	@ (8001f50 <HAL_SPI_MspInit+0x8c>)
 8001f3c:	f000 fea2 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40015000 	.word	0x40015000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40021400 	.word	0x40021400

08001f54 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_SPI_MspDeInit+0x30>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10a      	bne.n	8001f7c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_SPI_MspDeInit+0x34>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <HAL_SPI_MspDeInit+0x34>)
 8001f6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001f70:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f72:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <HAL_SPI_MspDeInit+0x38>)
 8001f78:	f001 f830 	bl	8002fdc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40015000 	.word	0x40015000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40021400 	.word	0x40021400

08001f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_TIM_Base_MspInit+0x3c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10d      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x40>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x40>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x40>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40000400 	.word	0x40000400
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <HAL_TIM_MspPostInit+0xa4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d13c      	bne.n	8002070 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a18      	ldr	r2, [pc, #96]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <HAL_TIM_MspPostInit+0xa8>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800202e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002040:	2302      	movs	r3, #2
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <HAL_TIM_MspPostInit+0xac>)
 800204c:	f000 fe1a 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002050:	2310      	movs	r3, #16
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002060:	2302      	movs	r3, #2
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <HAL_TIM_MspPostInit+0xb0>)
 800206c:	f000 fe0a 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	@ 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40000400 	.word	0x40000400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020800 	.word	0x40020800
 8002084:	40020400 	.word	0x40020400

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <NMI_Handler+0x4>

08002090 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <MemManage_Handler+0x4>

080020a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <UsageFault_Handler+0x4>

080020b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020de:	f000 f897 	bl	8002210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <SystemInit+0x20>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <SystemInit+0x20>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800211c:	f7ff ffea 	bl	80020f4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002120:	480c      	ldr	r0, [pc, #48]	@ (8002154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002122:	490d      	ldr	r1, [pc, #52]	@ (8002158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002128:	e002      	b.n	8002130 <LoopCopyDataInit>

0800212a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800212c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212e:	3304      	adds	r3, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002134:	d3f9      	bcc.n	800212a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002138:	4c0a      	ldr	r4, [pc, #40]	@ (8002164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800213c:	e001      	b.n	8002142 <LoopFillZerobss>

0800213e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002140:	3204      	adds	r2, #4

08002142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002144:	d3fb      	bcc.n	800213e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002146:	f003 fcbd 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214a:	f7fe ff53 	bl	8000ff4 <main>
  bx  lr    
 800214e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002150:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800215c:	08005b68 	.word	0x08005b68
  ldr r2, =_sbss
 8002160:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002164:	20025ba0 	.word	0x20025ba0

08002168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC_IRQHandler>
	...

0800216c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <HAL_Init+0x40>)
 8002176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <HAL_Init+0x40>)
 8002182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002188:	4b08      	ldr	r3, [pc, #32]	@ (80021ac <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <HAL_Init+0x40>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002194:	2003      	movs	r0, #3
 8002196:	f000 fd41 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219a:	2000      	movs	r0, #0
 800219c:	f000 f808 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a0:	f7ff fc3e 	bl	8001a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023c00 	.word	0x40023c00

080021b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_InitTick+0x54>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_InitTick+0x58>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fd4b 	bl	8002c6a <HAL_SYSTICK_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e00e      	b.n	80021fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d80a      	bhi.n	80021fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e4:	2200      	movs	r2, #0
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f000 fd21 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f0:	4a06      	ldr	r2, [pc, #24]	@ (800220c <HAL_InitTick+0x5c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000004 	.word	0x20000004
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000008 	.word	0x20000008

08002210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_IncTick+0x20>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x24>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4413      	add	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_IncTick+0x24>)
 8002222:	6013      	str	r3, [r2, #0]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000000c 	.word	0x2000000c
 8002234:	20025b9c 	.word	0x20025b9c

08002238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return uwTick;
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <HAL_GetTick+0x14>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20025b9c 	.word	0x20025b9c

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff ffee 	bl	8002238 <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffde 	bl	8002238 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000000c 	.word	0x2000000c

08002298 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e033      	b.n	8002316 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fbda 	bl	8001a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d118      	bne.n	8002308 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022de:	f023 0302 	bic.w	r3, r3, #2
 80022e2:	f043 0202 	orr.w	r2, r3, #2
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fae8 	bl	80028c0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
 8002306:	e001      	b.n	800230c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_ADC_Start+0x1a>
 8002336:	2302      	movs	r3, #2
 8002338:	e0b2      	b.n	80024a0 <HAL_ADC_Start+0x180>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d018      	beq.n	8002382 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002360:	4b52      	ldr	r3, [pc, #328]	@ (80024ac <HAL_ADC_Start+0x18c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_ADC_Start+0x190>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0c9a      	lsrs	r2, r3, #18
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d17a      	bne.n	8002486 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ce:	d106      	bne.n	80023de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	f023 0206 	bic.w	r2, r3, #6
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	645a      	str	r2, [r3, #68]	@ 0x44
 80023dc:	e002      	b.n	80023e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	4b31      	ldr	r3, [pc, #196]	@ (80024b4 <HAL_ADC_Start+0x194>)
 80023ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80023f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12a      	bne.n	800245c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2b      	ldr	r2, [pc, #172]	@ (80024b8 <HAL_ADC_Start+0x198>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d015      	beq.n	800243c <HAL_ADC_Start+0x11c>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <HAL_ADC_Start+0x19c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d105      	bne.n	8002426 <HAL_ADC_Start+0x106>
 800241a:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_ADC_Start+0x194>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 031f 	and.w	r3, r3, #31
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a25      	ldr	r2, [pc, #148]	@ (80024c0 <HAL_ADC_Start+0x1a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d136      	bne.n	800249e <HAL_ADC_Start+0x17e>
 8002430:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_ADC_Start+0x194>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d130      	bne.n	800249e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d129      	bne.n	800249e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	e020      	b.n	800249e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a15      	ldr	r2, [pc, #84]	@ (80024b8 <HAL_ADC_Start+0x198>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11b      	bne.n	800249e <HAL_ADC_Start+0x17e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d114      	bne.n	800249e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e00b      	b.n	800249e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	20000004 	.word	0x20000004
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	40012300 	.word	0x40012300
 80024b8:	40012000 	.word	0x40012000
 80024bc:	40012100 	.word	0x40012100
 80024c0:	40012200 	.word	0x40012200

080024c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Stop+0x16>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e021      	b.n	800251e <HAL_ADC_Stop+0x5a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002546:	d113      	bne.n	8002570 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002556:	d10b      	bne.n	8002570 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0220 	orr.w	r2, r3, #32
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e063      	b.n	8002638 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002570:	f7ff fe62 	bl	8002238 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002576:	e021      	b.n	80025bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257e:	d01d      	beq.n	80025bc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <HAL_ADC_PollForConversion+0x6c>
 8002586:	f7ff fe57 	bl	8002238 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d212      	bcs.n	80025bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d00b      	beq.n	80025bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03d      	b.n	8002638 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d1d6      	bne.n	8002578 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0212 	mvn.w	r2, #18
 80025d2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d123      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11f      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002600:	2b00      	cmp	r3, #0
 8002602:	d006      	beq.n	8002612 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800260e:	2b00      	cmp	r3, #0
 8002610:	d111      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d105      	bne.n	8002636 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e113      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x244>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d925      	bls.n	80026d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4613      	mov	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	4413      	add	r3, r2
 800269c:	3b1e      	subs	r3, #30
 800269e:	2207      	movs	r2, #7
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	4603      	mov	r3, r0
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4403      	add	r3, r0
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	409a      	lsls	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	e022      	b.n	800271a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6919      	ldr	r1, [r3, #16]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	2207      	movs	r2, #7
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43da      	mvns	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	400a      	ands	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	4603      	mov	r3, r0
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4403      	add	r3, r0
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b06      	cmp	r3, #6
 8002720:	d824      	bhi.n	800276c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	3b05      	subs	r3, #5
 8002734:	221f      	movs	r2, #31
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	400a      	ands	r2, r1
 8002742:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b05      	subs	r3, #5
 800275e:	fa00 f203 	lsl.w	r2, r0, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
 800276a:	e04c      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d824      	bhi.n	80027be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b23      	subs	r3, #35	@ 0x23
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	3b23      	subs	r3, #35	@ 0x23
 80027b0:	fa00 f203 	lsl.w	r2, r0, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80027bc:	e023      	b.n	8002806 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	3b41      	subs	r3, #65	@ 0x41
 80027d0:	221f      	movs	r2, #31
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	3b41      	subs	r3, #65	@ 0x41
 80027fa:	fa00 f203 	lsl.w	r2, r0, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002806:	4b29      	ldr	r3, [pc, #164]	@ (80028ac <HAL_ADC_ConfigChannel+0x250>)
 8002808:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d10f      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b12      	cmp	r3, #18
 800281a:	d10b      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_ADC_ConfigChannel+0x254>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d12b      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x1f4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b11      	cmp	r3, #17
 800284e:	d122      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	@ (80028b4 <HAL_ADC_ConfigChannel+0x258>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002872:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <HAL_ADC_ConfigChannel+0x25c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_ADC_ConfigChannel+0x260>)
 8002878:	fba2 2303 	umull	r2, r3, r2, r3
 800287c:	0c9a      	lsrs	r2, r3, #18
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40012300 	.word	0x40012300
 80028b0:	40012000 	.word	0x40012000
 80028b4:	10000012 	.word	0x10000012
 80028b8:	20000004 	.word	0x20000004
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c8:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <ADC_Init+0x1f0>)
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	021a      	lsls	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800293a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	4a58      	ldr	r2, [pc, #352]	@ (8002ab4 <ADC_Init+0x1f4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d022      	beq.n	800299e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	e00f      	b.n	80029be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 0202 	bic.w	r2, r2, #2
 80029cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e1b      	ldrb	r3, [r3, #24]
 80029d8:	005a      	lsls	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	3b01      	subs	r3, #1
 8002a18:	035a      	lsls	r2, r3, #13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	e007      	b.n	8002a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	051a      	lsls	r2, r3, #20
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a76:	025a      	lsls	r2, r3, #9
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6899      	ldr	r1, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	029a      	lsls	r2, r3, #10
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40012300 	.word	0x40012300
 8002ab4:	0f000001 	.word	0x0f000001

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	@ (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff47 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff5c 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff8e 	bl	8002b70 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5d 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff ffb0 	bl	8002bd8 <SysTick_Config>
 8002c78:	4603      	mov	r3, r0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e177      	b.n	8002f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f040 8166 	bne.w	8002f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d005      	beq.n	8002cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d130      	bne.n	8002d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 0201 	and.w	r2, r3, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d017      	beq.n	8002d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d123      	bne.n	8002dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	08da      	lsrs	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3208      	adds	r2, #8
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	220f      	movs	r2, #15
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	08da      	lsrs	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3208      	adds	r2, #8
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80c0 	beq.w	8002f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	4b66      	ldr	r3, [pc, #408]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	4a65      	ldr	r2, [pc, #404]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1a:	4b63      	ldr	r3, [pc, #396]	@ (8002fa8 <HAL_GPIO_Init+0x324>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e26:	4a61      	ldr	r2, [pc, #388]	@ (8002fac <HAL_GPIO_Init+0x328>)
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	220f      	movs	r2, #15
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a58      	ldr	r2, [pc, #352]	@ (8002fb0 <HAL_GPIO_Init+0x32c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d037      	beq.n	8002ec2 <HAL_GPIO_Init+0x23e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a57      	ldr	r2, [pc, #348]	@ (8002fb4 <HAL_GPIO_Init+0x330>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_GPIO_Init+0x23a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a56      	ldr	r2, [pc, #344]	@ (8002fb8 <HAL_GPIO_Init+0x334>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02b      	beq.n	8002eba <HAL_GPIO_Init+0x236>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a55      	ldr	r2, [pc, #340]	@ (8002fbc <HAL_GPIO_Init+0x338>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d025      	beq.n	8002eb6 <HAL_GPIO_Init+0x232>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a54      	ldr	r2, [pc, #336]	@ (8002fc0 <HAL_GPIO_Init+0x33c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01f      	beq.n	8002eb2 <HAL_GPIO_Init+0x22e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a53      	ldr	r2, [pc, #332]	@ (8002fc4 <HAL_GPIO_Init+0x340>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d019      	beq.n	8002eae <HAL_GPIO_Init+0x22a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a52      	ldr	r2, [pc, #328]	@ (8002fc8 <HAL_GPIO_Init+0x344>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0x226>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a51      	ldr	r2, [pc, #324]	@ (8002fcc <HAL_GPIO_Init+0x348>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00d      	beq.n	8002ea6 <HAL_GPIO_Init+0x222>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a50      	ldr	r2, [pc, #320]	@ (8002fd0 <HAL_GPIO_Init+0x34c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x21e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	@ (8002fd4 <HAL_GPIO_Init+0x350>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d101      	bne.n	8002e9e <HAL_GPIO_Init+0x21a>
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	e012      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	e010      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	e00e      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	e00c      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eaa:	2306      	movs	r3, #6
 8002eac:	e00a      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eae:	2305      	movs	r3, #5
 8002eb0:	e008      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	e006      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e004      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_GPIO_Init+0x240>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	f002 0203 	and.w	r2, r2, #3
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4093      	lsls	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed4:	4935      	ldr	r1, [pc, #212]	@ (8002fac <HAL_GPIO_Init+0x328>)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f06:	4a34      	ldr	r2, [pc, #208]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f0c:	4b32      	ldr	r3, [pc, #200]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f30:	4a29      	ldr	r2, [pc, #164]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f36:	4b28      	ldr	r3, [pc, #160]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f84:	4a14      	ldr	r2, [pc, #80]	@ (8002fd8 <HAL_GPIO_Init+0x354>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	f67f ae84 	bls.w	8002ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f98:	bf00      	nop
 8002f9a:	bf00      	nop
 8002f9c:	3724      	adds	r7, #36	@ 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	40020000 	.word	0x40020000
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020800 	.word	0x40020800
 8002fbc:	40020c00 	.word	0x40020c00
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40021400 	.word	0x40021400
 8002fc8:	40021800 	.word	0x40021800
 8002fcc:	40021c00 	.word	0x40021c00
 8002fd0:	40022000 	.word	0x40022000
 8002fd4:	40022400 	.word	0x40022400
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e0d9      	b.n	80031ac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	f040 80c9 	bne.w	80031a6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003014:	4a6b      	ldr	r2, [pc, #428]	@ (80031c4 <HAL_GPIO_DeInit+0x1e8>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a63      	ldr	r2, [pc, #396]	@ (80031c8 <HAL_GPIO_DeInit+0x1ec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d037      	beq.n	80030ae <HAL_GPIO_DeInit+0xd2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a62      	ldr	r2, [pc, #392]	@ (80031cc <HAL_GPIO_DeInit+0x1f0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d031      	beq.n	80030aa <HAL_GPIO_DeInit+0xce>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a61      	ldr	r2, [pc, #388]	@ (80031d0 <HAL_GPIO_DeInit+0x1f4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02b      	beq.n	80030a6 <HAL_GPIO_DeInit+0xca>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a60      	ldr	r2, [pc, #384]	@ (80031d4 <HAL_GPIO_DeInit+0x1f8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d025      	beq.n	80030a2 <HAL_GPIO_DeInit+0xc6>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a5f      	ldr	r2, [pc, #380]	@ (80031d8 <HAL_GPIO_DeInit+0x1fc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01f      	beq.n	800309e <HAL_GPIO_DeInit+0xc2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a5e      	ldr	r2, [pc, #376]	@ (80031dc <HAL_GPIO_DeInit+0x200>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d019      	beq.n	800309a <HAL_GPIO_DeInit+0xbe>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a5d      	ldr	r2, [pc, #372]	@ (80031e0 <HAL_GPIO_DeInit+0x204>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_DeInit+0xba>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a5c      	ldr	r2, [pc, #368]	@ (80031e4 <HAL_GPIO_DeInit+0x208>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00d      	beq.n	8003092 <HAL_GPIO_DeInit+0xb6>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a5b      	ldr	r2, [pc, #364]	@ (80031e8 <HAL_GPIO_DeInit+0x20c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_DeInit+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a5a      	ldr	r2, [pc, #360]	@ (80031ec <HAL_GPIO_DeInit+0x210>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_GPIO_DeInit+0xae>
 8003086:	2309      	movs	r3, #9
 8003088:	e012      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 800308a:	230a      	movs	r3, #10
 800308c:	e010      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 800308e:	2308      	movs	r3, #8
 8003090:	e00e      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 8003092:	2307      	movs	r3, #7
 8003094:	e00c      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 8003096:	2306      	movs	r3, #6
 8003098:	e00a      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 800309a:	2305      	movs	r3, #5
 800309c:	e008      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 800309e:	2304      	movs	r3, #4
 80030a0:	e006      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 80030a2:	2303      	movs	r3, #3
 80030a4:	e004      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_GPIO_DeInit+0xd4>
 80030ae:	2300      	movs	r3, #0
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	f002 0203 	and.w	r2, r2, #3
 80030b6:	0092      	lsls	r2, r2, #2
 80030b8:	4093      	lsls	r3, r2
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d132      	bne.n	8003126 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030c0:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4949      	ldr	r1, [pc, #292]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030ce:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4946      	ldr	r1, [pc, #280]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030d8:	4013      	ands	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030dc:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4942      	ldr	r1, [pc, #264]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	493f      	ldr	r1, [pc, #252]	@ (80031f0 <HAL_GPIO_DeInit+0x214>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003108:	4a2e      	ldr	r2, [pc, #184]	@ (80031c4 <HAL_GPIO_DeInit+0x1e8>)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	089b      	lsrs	r3, r3, #2
 800310e:	3302      	adds	r3, #2
 8003110:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	43da      	mvns	r2, r3
 8003118:	482a      	ldr	r0, [pc, #168]	@ (80031c4 <HAL_GPIO_DeInit+0x1e8>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	400a      	ands	r2, r1
 8003120:	3302      	adds	r3, #2
 8003122:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2103      	movs	r1, #3
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	08da      	lsrs	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3208      	adds	r2, #8
 8003144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	08d2      	lsrs	r2, r2, #3
 800315c:	4019      	ands	r1, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3208      	adds	r2, #8
 8003162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2103      	movs	r1, #3
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	2101      	movs	r1, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2103      	movs	r1, #3
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	f67f af22 	bls.w	8002ff8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40013800 	.word	0x40013800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40020400 	.word	0x40020400
 80031d0:	40020800 	.word	0x40020800
 80031d4:	40020c00 	.word	0x40020c00
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40021400 	.word	0x40021400
 80031e0:	40021800 	.word	0x40021800
 80031e4:	40021c00 	.word	0x40021c00
 80031e8:	40022000 	.word	0x40022000
 80031ec:	40022400 	.word	0x40022400
 80031f0:	40013c00 	.word	0x40013c00

080031f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	807b      	strh	r3, [r7, #2]
 8003200:	4613      	mov	r3, r2
 8003202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003204:	787b      	ldrb	r3, [r7, #1]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	041a      	lsls	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e12b      	b.n	8003492 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fc84 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	@ 0x24
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800328a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800328c:	f001 f8a2 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4a81      	ldr	r2, [pc, #516]	@ (800349c <HAL_I2C_Init+0x274>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d807      	bhi.n	80032ac <HAL_I2C_Init+0x84>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4a80      	ldr	r2, [pc, #512]	@ (80034a0 <HAL_I2C_Init+0x278>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	bf94      	ite	ls
 80032a4:	2301      	movls	r3, #1
 80032a6:	2300      	movhi	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e006      	b.n	80032ba <HAL_I2C_Init+0x92>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a7d      	ldr	r2, [pc, #500]	@ (80034a4 <HAL_I2C_Init+0x27c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bf94      	ite	ls
 80032b4:	2301      	movls	r3, #1
 80032b6:	2300      	movhi	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0e7      	b.n	8003492 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a78      	ldr	r2, [pc, #480]	@ (80034a8 <HAL_I2C_Init+0x280>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	430a      	orrs	r2, r1
 80032e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a6a      	ldr	r2, [pc, #424]	@ (800349c <HAL_I2C_Init+0x274>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d802      	bhi.n	80032fc <HAL_I2C_Init+0xd4>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	e009      	b.n	8003310 <HAL_I2C_Init+0xe8>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	4a69      	ldr	r2, [pc, #420]	@ (80034ac <HAL_I2C_Init+0x284>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	3301      	adds	r3, #1
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	430b      	orrs	r3, r1
 8003316:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003322:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	495c      	ldr	r1, [pc, #368]	@ (800349c <HAL_I2C_Init+0x274>)
 800332c:	428b      	cmp	r3, r1
 800332e:	d819      	bhi.n	8003364 <HAL_I2C_Init+0x13c>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1e59      	subs	r1, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	fbb1 f3f3 	udiv	r3, r1, r3
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003344:	400b      	ands	r3, r1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_I2C_Init+0x138>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e59      	subs	r1, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fbb1 f3f3 	udiv	r3, r1, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335e:	e051      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003360:	2304      	movs	r3, #4
 8003362:	e04f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_I2C_Init+0x168>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e012      	b.n	80033b6 <HAL_I2C_Init+0x18e>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	0099      	lsls	r1, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a6:	3301      	adds	r3, #1
 80033a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x196>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e022      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10e      	bne.n	80033e4 <HAL_I2C_Init+0x1bc>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e58      	subs	r0, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	440b      	add	r3, r1
 80033d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033e2:	e00f      	b.n	8003404 <HAL_I2C_Init+0x1dc>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	0099      	lsls	r1, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6809      	ldr	r1, [r1, #0]
 8003408:	4313      	orrs	r3, r2
 800340a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003432:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6911      	ldr	r1, [r2, #16]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	4311      	orrs	r1, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	430b      	orrs	r3, r1
 8003446:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	000186a0 	.word	0x000186a0
 80034a0:	001e847f 	.word	0x001e847f
 80034a4:	003d08ff 	.word	0x003d08ff
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	10624dd3 	.word	0x10624dd3

080034b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d129      	bne.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2224      	movs	r2, #36	@ 0x24
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0210 	bic.w	r2, r2, #16
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	e000      	b.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d12a      	bne.n	8003598 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2224      	movs	r2, #36	@ 0x24
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	f023 030f 	bic.w	r3, r3, #15
 8003568:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	89fb      	ldrh	r3, [r7, #14]
 8003570:	4313      	orrs	r3, r2
 8003572:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	89fa      	ldrh	r2, [r7, #14]
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0bf      	b.n	800373a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fb2e 	bl	8001c30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80035ea:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003600:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b4a      	ldr	r3, [pc, #296]	@ (8003744 <HAL_LTDC_Init+0x19c>)
 800361c:	400b      	ands	r3, r1
 800361e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68d9      	ldr	r1, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b3e      	ldr	r3, [pc, #248]	@ (8003744 <HAL_LTDC_Init+0x19c>)
 800364a:	400b      	ands	r3, r1
 800364c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68d9      	ldr	r1, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6919      	ldr	r1, [r3, #16]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b33      	ldr	r3, [pc, #204]	@ (8003744 <HAL_LTDC_Init+0x19c>)
 8003678:	400b      	ands	r3, r1
 800367a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6919      	ldr	r1, [r3, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6959      	ldr	r1, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_LTDC_Init+0x19c>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	041b      	lsls	r3, r3, #16
 80036b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6959      	ldr	r1, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80036d8:	041b      	lsls	r3, r3, #16
 80036da:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80036ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0206 	orr.w	r2, r2, #6
 8003716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	f000f800 	.word	0xf000f800

08003748 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_LTDC_ConfigLayer+0x1a>
 800375e:	2302      	movs	r3, #2
 8003760:	e02c      	b.n	80037bc <HAL_LTDC_ConfigLayer+0x74>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2134      	movs	r1, #52	@ 0x34
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800378a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800378c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800378e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f811 	bl	80037c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2201      	movs	r2, #1
 80037a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}

080037c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	4413      	add	r3, r2
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	01db      	lsls	r3, r3, #7
 80037f0:	4413      	add	r3, r2
 80037f2:	3384      	adds	r3, #132	@ 0x84
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	4611      	mov	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	01d2      	lsls	r2, r2, #7
 8003800:	440a      	add	r2, r1
 8003802:	3284      	adds	r2, #132	@ 0x84
 8003804:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003808:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800381a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800381c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	01db      	lsls	r3, r3, #7
 8003828:	440b      	add	r3, r1
 800382a:	3384      	adds	r3, #132	@ 0x84
 800382c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003832:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003842:	4413      	add	r3, r2
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	01db      	lsls	r3, r3, #7
 8003852:	4413      	add	r3, r2
 8003854:	3384      	adds	r3, #132	@ 0x84
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4611      	mov	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	01d2      	lsls	r2, r2, #7
 8003862:	440a      	add	r2, r1
 8003864:	3284      	adds	r2, #132	@ 0x84
 8003866:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800386a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387a:	4413      	add	r3, r2
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4619      	mov	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	01db      	lsls	r3, r3, #7
 8003888:	440b      	add	r3, r1
 800388a:	3384      	adds	r3, #132	@ 0x84
 800388c:	4619      	mov	r1, r3
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	01db      	lsls	r3, r3, #7
 800389e:	4413      	add	r3, r2
 80038a0:	3384      	adds	r3, #132	@ 0x84
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	4611      	mov	r1, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	01d2      	lsls	r2, r2, #7
 80038ae:	440a      	add	r2, r1
 80038b0:	3284      	adds	r2, #132	@ 0x84
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	01db      	lsls	r3, r3, #7
 80038c2:	4413      	add	r3, r2
 80038c4:	3384      	adds	r3, #132	@ 0x84
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80038de:	041b      	lsls	r3, r3, #16
 80038e0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	01db      	lsls	r3, r3, #7
 80038f4:	4413      	add	r3, r2
 80038f6:	3384      	adds	r3, #132	@ 0x84
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	4413      	add	r3, r2
 8003906:	3384      	adds	r3, #132	@ 0x84
 8003908:	461a      	mov	r2, r3
 800390a:	2300      	movs	r3, #0
 800390c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003914:	461a      	mov	r2, r3
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	431a      	orrs	r2, r3
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	431a      	orrs	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	01db      	lsls	r3, r3, #7
 8003928:	440b      	add	r3, r1
 800392a:	3384      	adds	r3, #132	@ 0x84
 800392c:	4619      	mov	r1, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	01db      	lsls	r3, r3, #7
 800393e:	4413      	add	r3, r2
 8003940:	3384      	adds	r3, #132	@ 0x84
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	4611      	mov	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	01d2      	lsls	r2, r2, #7
 800394e:	440a      	add	r2, r1
 8003950:	3284      	adds	r2, #132	@ 0x84
 8003952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003956:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	01db      	lsls	r3, r3, #7
 8003962:	4413      	add	r3, r2
 8003964:	3384      	adds	r3, #132	@ 0x84
 8003966:	461a      	mov	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	01db      	lsls	r3, r3, #7
 8003978:	4413      	add	r3, r2
 800397a:	3384      	adds	r3, #132	@ 0x84
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4611      	mov	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	01d2      	lsls	r2, r2, #7
 8003988:	440a      	add	r2, r1
 800398a:	3284      	adds	r2, #132	@ 0x84
 800398c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003990:	f023 0307 	bic.w	r3, r3, #7
 8003994:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	6809      	ldr	r1, [r1, #0]
 80039a2:	4608      	mov	r0, r1
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	01c9      	lsls	r1, r1, #7
 80039a8:	4401      	add	r1, r0
 80039aa:	3184      	adds	r1, #132	@ 0x84
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	4413      	add	r3, r2
 80039bc:	3384      	adds	r3, #132	@ 0x84
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	01db      	lsls	r3, r3, #7
 80039ca:	4413      	add	r3, r2
 80039cc:	3384      	adds	r3, #132	@ 0x84
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	01db      	lsls	r3, r3, #7
 80039de:	4413      	add	r3, r2
 80039e0:	3384      	adds	r3, #132	@ 0x84
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80039f2:	2304      	movs	r3, #4
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	e01b      	b.n	8003a30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003a00:	2303      	movs	r3, #3
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	e014      	b.n	8003a30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00b      	beq.n	8003a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d007      	beq.n	8003a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d003      	beq.n	8003a26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d102      	bne.n	8003a2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003a26:	2302      	movs	r3, #2
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e001      	b.n	8003a30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	01db      	lsls	r3, r3, #7
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3384      	adds	r3, #132	@ 0x84
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	4611      	mov	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	01d2      	lsls	r2, r2, #7
 8003a4a:	440a      	add	r2, r1
 8003a4c:	3284      	adds	r2, #132	@ 0x84
 8003a4e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1acb      	subs	r3, r1, r3
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	6809      	ldr	r1, [r1, #0]
 8003a76:	4608      	mov	r0, r1
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	01c9      	lsls	r1, r1, #7
 8003a7c:	4401      	add	r1, r0
 8003a7e:	3184      	adds	r1, #132	@ 0x84
 8003a80:	4313      	orrs	r3, r2
 8003a82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	01db      	lsls	r3, r3, #7
 8003a8e:	4413      	add	r3, r2
 8003a90:	3384      	adds	r3, #132	@ 0x84
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	01d2      	lsls	r2, r2, #7
 8003a9e:	440a      	add	r2, r1
 8003aa0:	3284      	adds	r2, #132	@ 0x84
 8003aa2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003aa6:	f023 0307 	bic.w	r3, r3, #7
 8003aaa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3384      	adds	r3, #132	@ 0x84
 8003aba:	461a      	mov	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	01db      	lsls	r3, r3, #7
 8003acc:	4413      	add	r3, r2
 8003ace:	3384      	adds	r3, #132	@ 0x84
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	01d2      	lsls	r2, r2, #7
 8003adc:	440a      	add	r2, r1
 8003ade:	3284      	adds	r2, #132	@ 0x84
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3724      	adds	r7, #36	@ 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e267      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d075      	beq.n	8003bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b12:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1e:	4b85      	ldr	r3, [pc, #532]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d112      	bne.n	8003b50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2a:	4b82      	ldr	r3, [pc, #520]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b36:	d10b      	bne.n	8003b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	4b7e      	ldr	r3, [pc, #504]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d05b      	beq.n	8003bfc <HAL_RCC_OscConfig+0x108>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d157      	bne.n	8003bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e242      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d106      	bne.n	8003b68 <HAL_RCC_OscConfig+0x74>
 8003b5a:	4b76      	ldr	r3, [pc, #472]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a75      	ldr	r2, [pc, #468]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e01d      	b.n	8003ba4 <HAL_RCC_OscConfig+0xb0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b70:	d10c      	bne.n	8003b8c <HAL_RCC_OscConfig+0x98>
 8003b72:	4b70      	ldr	r3, [pc, #448]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6f      	ldr	r2, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a6c      	ldr	r2, [pc, #432]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0xb0>
 8003b8c:	4b69      	ldr	r3, [pc, #420]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a68      	ldr	r2, [pc, #416]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b66      	ldr	r3, [pc, #408]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a65      	ldr	r2, [pc, #404]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d013      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fb44 	bl	8002238 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb4:	f7fe fb40 	bl	8002238 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	@ 0x64
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e207      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0xc0>
 8003bd2:	e014      	b.n	8003bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fb30 	bl	8002238 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fb2c 	bl	8002238 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1f3      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bee:	4b51      	ldr	r3, [pc, #324]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0xe8>
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d063      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c16:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d11c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c22:	4b44      	ldr	r3, [pc, #272]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d116      	bne.n	8003c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	4b41      	ldr	r3, [pc, #260]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x152>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e1c7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b3b      	ldr	r3, [pc, #236]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4937      	ldr	r1, [pc, #220]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	e03a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c64:	4b34      	ldr	r3, [pc, #208]	@ (8003d38 <HAL_RCC_OscConfig+0x244>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fe fae5 	bl	8002238 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe fae1 	bl	8002238 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e1a8      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c84:	4b2b      	ldr	r3, [pc, #172]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b28      	ldr	r3, [pc, #160]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4925      	ldr	r1, [pc, #148]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <HAL_RCC_OscConfig+0x244>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fac4 	bl	8002238 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fac0 	bl	8002238 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e187      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d036      	beq.n	8003d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <HAL_RCC_OscConfig+0x248>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fe faa4 	bl	8002238 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fe faa0 	bl	8002238 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e167      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d06:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_RCC_OscConfig+0x240>)
 8003d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x200>
 8003d12:	e01b      	b.n	8003d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d14:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <HAL_RCC_OscConfig+0x248>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fa8d 	bl	8002238 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d20:	e00e      	b.n	8003d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d22:	f7fe fa89 	bl	8002238 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d907      	bls.n	8003d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e150      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	42470000 	.word	0x42470000
 8003d3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	4b88      	ldr	r3, [pc, #544]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ea      	bne.n	8003d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8097 	beq.w	8003e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5e:	4b81      	ldr	r3, [pc, #516]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10f      	bne.n	8003d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	4a7c      	ldr	r2, [pc, #496]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	4b77      	ldr	r3, [pc, #476]	@ (8003f68 <HAL_RCC_OscConfig+0x474>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d118      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d96:	4b74      	ldr	r3, [pc, #464]	@ (8003f68 <HAL_RCC_OscConfig+0x474>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a73      	ldr	r2, [pc, #460]	@ (8003f68 <HAL_RCC_OscConfig+0x474>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da2:	f7fe fa49 	bl	8002238 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fe fa45 	bl	8002238 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e10c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f68 <HAL_RCC_OscConfig+0x474>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x2ea>
 8003dd0:	4b64      	ldr	r3, [pc, #400]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	4a63      	ldr	r2, [pc, #396]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCC_OscConfig+0x324>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x30c>
 8003de6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	4a5e      	ldr	r2, [pc, #376]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x324>
 8003e00:	4b58      	ldr	r3, [pc, #352]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e04:	4a57      	ldr	r2, [pc, #348]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0c:	4b55      	ldr	r3, [pc, #340]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e10:	4a54      	ldr	r2, [pc, #336]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d015      	beq.n	8003e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e20:	f7fe fa0a 	bl	8002238 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e28:	f7fe fa06 	bl	8002238 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0cb      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	4b49      	ldr	r3, [pc, #292]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ee      	beq.n	8003e28 <HAL_RCC_OscConfig+0x334>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fe f9f4 	bl	8002238 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe f9f0 	bl	8002238 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0b5      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1ee      	bne.n	8003e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4b39      	ldr	r3, [pc, #228]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	4a38      	ldr	r2, [pc, #224]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a1 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e92:	4b34      	ldr	r3, [pc, #208]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d05c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d141      	bne.n	8003f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b31      	ldr	r3, [pc, #196]	@ (8003f6c <HAL_RCC_OscConfig+0x478>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe f9c4 	bl	8002238 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fe f9c0 	bl	8002238 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e087      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	4b27      	ldr	r3, [pc, #156]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	3b01      	subs	r3, #1
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	491b      	ldr	r1, [pc, #108]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_RCC_OscConfig+0x478>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f02:	f7fe f999 	bl	8002238 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0a:	f7fe f995 	bl	8002238 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e05c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1c:	4b11      	ldr	r3, [pc, #68]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x416>
 8003f28:	e054      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <HAL_RCC_OscConfig+0x478>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fe f982 	bl	8002238 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fe f97e 	bl	8002238 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e045      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x444>
 8003f56:	e03d      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e038      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCC_OscConfig+0x4ec>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d028      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d121      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d11a      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d111      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0cc      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b68      	ldr	r3, [pc, #416]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d90c      	bls.n	8004020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b65      	ldr	r3, [pc, #404]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a58      	ldr	r2, [pc, #352]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a52      	ldr	r2, [pc, #328]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800405a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d044      	beq.n	8004104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d119      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b3f      	ldr	r3, [pc, #252]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e06f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e067      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c2:	4b37      	ldr	r3, [pc, #220]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4934      	ldr	r1, [pc, #208]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d4:	f7fe f8b0 	bl	8002238 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fe f8ac 	bl	8002238 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e04f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d1eb      	bne.n	80040dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b25      	ldr	r3, [pc, #148]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d20c      	bcs.n	800412c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b22      	ldr	r3, [pc, #136]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	@ (800419c <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f810 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40023c00 	.word	0x40023c00
 80041a0:	40023800 	.word	0x40023800
 80041a4:	08005b40 	.word	0x08005b40
 80041a8:	20000004 	.word	0x20000004
 80041ac:	20000008 	.word	0x20000008

080041b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b094      	sub	sp, #80	@ 0x50
 80041b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c8:	4b79      	ldr	r3, [pc, #484]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d00d      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x40>
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	f200 80e1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x34>
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x3a>
 80041e2:	e0db      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041e8:	e0db      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ea:	4b73      	ldr	r3, [pc, #460]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ee:	e0d8      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b6f      	ldr	r3, [pc, #444]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fa:	4b6d      	ldr	r3, [pc, #436]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d063      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b6a      	ldr	r3, [pc, #424]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	2200      	movs	r2, #0
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004210:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004218:	633b      	str	r3, [r7, #48]	@ 0x30
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	@ 0x34
 800421e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004234:	0150      	lsls	r0, r2, #5
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4621      	mov	r1, r4
 800423c:	1a51      	subs	r1, r2, r1
 800423e:	6139      	str	r1, [r7, #16]
 8004240:	4629      	mov	r1, r5
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004254:	4659      	mov	r1, fp
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	4651      	mov	r1, sl
 800425a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425e:	4651      	mov	r1, sl
 8004260:	018a      	lsls	r2, r1, #6
 8004262:	4651      	mov	r1, sl
 8004264:	ebb2 0801 	subs.w	r8, r2, r1
 8004268:	4659      	mov	r1, fp
 800426a:	eb63 0901 	sbc.w	r9, r3, r1
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800427a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004282:	4690      	mov	r8, r2
 8004284:	4699      	mov	r9, r3
 8004286:	4623      	mov	r3, r4
 8004288:	eb18 0303 	adds.w	r3, r8, r3
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	462b      	mov	r3, r5
 8004290:	eb49 0303 	adc.w	r3, r9, r3
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042a2:	4629      	mov	r1, r5
 80042a4:	024b      	lsls	r3, r1, #9
 80042a6:	4621      	mov	r1, r4
 80042a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042ac:	4621      	mov	r1, r4
 80042ae:	024a      	lsls	r2, r1, #9
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042c0:	f7fb ff94 	bl	80001ec <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042cc:	e058      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b38      	ldr	r3, [pc, #224]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	2200      	movs	r2, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	4611      	mov	r1, r2
 80042da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e8:	4642      	mov	r2, r8
 80042ea:	464b      	mov	r3, r9
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fa:	0150      	lsls	r0, r2, #5
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4641      	mov	r1, r8
 8004302:	ebb2 0a01 	subs.w	sl, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb63 0b01 	sbc.w	fp, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004318:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800431c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004320:	ebb2 040a 	subs.w	r4, r2, sl
 8004324:	eb63 050b 	sbc.w	r5, r3, fp
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	00eb      	lsls	r3, r5, #3
 8004332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004336:	00e2      	lsls	r2, r4, #3
 8004338:	4614      	mov	r4, r2
 800433a:	461d      	mov	r5, r3
 800433c:	4643      	mov	r3, r8
 800433e:	18e3      	adds	r3, r4, r3
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	464b      	mov	r3, r9
 8004344:	eb45 0303 	adc.w	r3, r5, r3
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800436a:	2200      	movs	r2, #0
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	61fa      	str	r2, [r7, #28]
 8004370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004374:	f7fb ff3a 	bl	80001ec <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004380:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004390:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3750      	adds	r7, #80	@ 0x50
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	@ (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000004 	.word	0x20000004

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	@ (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08005b50 	.word	0x08005b50

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800442c:	2b00      	cmp	r3, #0
 800442e:	d075      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004430:	4b91      	ldr	r3, [pc, #580]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004436:	f7fd feff 	bl	8002238 <HAL_GetTick>
 800443a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800443e:	f7fd fefb 	bl	8002238 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e189      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004450:	4b8a      	ldr	r3, [pc, #552]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	019a      	lsls	r2, r3, #6
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	071b      	lsls	r3, r3, #28
 8004474:	4981      	ldr	r1, [pc, #516]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004488:	4b7c      	ldr	r3, [pc, #496]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448e:	0f1b      	lsrs	r3, r3, #28
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	019a      	lsls	r2, r3, #6
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	431a      	orrs	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	071b      	lsls	r3, r3, #28
 80044a8:	4974      	ldr	r1, [pc, #464]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044b0:	4b72      	ldr	r3, [pc, #456]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044b6:	f023 021f 	bic.w	r2, r3, #31
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	3b01      	subs	r3, #1
 80044c0:	496e      	ldr	r1, [pc, #440]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	019a      	lsls	r2, r3, #6
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	071b      	lsls	r3, r3, #28
 80044e8:	4964      	ldr	r1, [pc, #400]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044f0:	4b61      	ldr	r3, [pc, #388]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fe9f 	bl	8002238 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044fe:	f7fd fe9b 	bl	8002238 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e129      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004510:	4b5a      	ldr	r3, [pc, #360]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d079      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004534:	4b52      	ldr	r3, [pc, #328]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800453a:	f7fd fe7d 	bl	8002238 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004542:	f7fd fe79 	bl	8002238 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e107      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004554:	4b49      	ldr	r3, [pc, #292]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004560:	d0ef      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d020      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800456e:	4b43      	ldr	r3, [pc, #268]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	0f1b      	lsrs	r3, r3, #28
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	019a      	lsls	r2, r3, #6
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	431a      	orrs	r2, r3
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	493b      	ldr	r1, [pc, #236]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004596:	4b39      	ldr	r3, [pc, #228]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	4934      	ldr	r1, [pc, #208]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01e      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045bc:	4b2f      	ldr	r3, [pc, #188]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	0e1b      	lsrs	r3, r3, #24
 80045c4:	f003 030f 	and.w	r3, r3, #15
 80045c8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	061b      	lsls	r3, r3, #24
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	071b      	lsls	r3, r3, #28
 80045dc:	4927      	ldr	r1, [pc, #156]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	4922      	ldr	r1, [pc, #136]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045fa:	4b21      	ldr	r3, [pc, #132]	@ (8004680 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004600:	f7fd fe1a 	bl	8002238 <HAL_GetTick>
 8004604:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004608:	f7fd fe16 	bl	8002238 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e0a4      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004626:	d1ef      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808b 	beq.w	800474c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	4b10      	ldr	r3, [pc, #64]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	4a0f      	ldr	r2, [pc, #60]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	@ 0x40
 8004646:	4b0d      	ldr	r3, [pc, #52]	@ (800467c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004652:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0b      	ldr	r2, [pc, #44]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800465c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465e:	f7fd fdeb 	bl	8002238 <HAL_GetTick>
 8004662:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004664:	e010      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004666:	f7fd fde7 	bl	8002238 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d909      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e075      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004678:	42470068 	.word	0x42470068
 800467c:	40023800 	.word	0x40023800
 8004680:	42470070 	.word	0x42470070
 8004684:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004688:	4b38      	ldr	r3, [pc, #224]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0e8      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004694:	4b36      	ldr	r3, [pc, #216]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02f      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d028      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046c8:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ce:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d114      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd fdad 	bl	8002238 <HAL_GetTick>
 80046de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fda9 	bl	8002238 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e035      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800470c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004710:	d10d      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004712:	4b17      	ldr	r3, [pc, #92]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004726:	4912      	ldr	r1, [pc, #72]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
 800472c:	e005      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a0f      	ldr	r2, [pc, #60]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004734:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004738:	6093      	str	r3, [r2, #8]
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800473c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004746:	490a      	ldr	r1, [pc, #40]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004748:	4313      	orrs	r3, r2
 800474a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004760:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40007000 	.word	0x40007000
 8004770:	40023800 	.word	0x40023800
 8004774:	42470e40 	.word	0x42470e40
 8004778:	424711e0 	.word	0x424711e0

0800477c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e01c      	b.n	80047c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	795b      	ldrb	r3, [r3, #5]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd fb6e 	bl	8001e80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0204 	orr.w	r2, r2, #4
 80047b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07b      	b.n	80048da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047f2:	d009      	beq.n	8004808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
 80047fa:	e005      	b.n	8004808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fb4e 	bl	8001ec4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800483e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	ea42 0103 	orr.w	r1, r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0104 	and.w	r1, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	f003 0210 	and.w	r2, r3, #16
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69da      	ldr	r2, [r3, #28]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800490a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7fd fb21 	bl	8001f54 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004942:	f7fd fc79 	bl	8002238 <HAL_GetTick>
 8004946:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	d001      	beq.n	800495c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
 800495a:	e12a      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Transmit+0x36>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e122      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_SPI_Transmit+0x48>
 8004976:	2302      	movs	r3, #2
 8004978:	e11b      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2203      	movs	r2, #3
 8004986:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c8:	d10f      	bne.n	80049ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b40      	cmp	r3, #64	@ 0x40
 80049f6:	d007      	beq.n	8004a08 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a10:	d152      	bne.n	8004ab8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_SPI_Transmit+0xee>
 8004a1a:	8b7b      	ldrh	r3, [r7, #26]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d145      	bne.n	8004aac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a24:	881a      	ldrh	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a30:	1c9a      	adds	r2, r3, #2
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a44:	e032      	b.n	8004aac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d112      	bne.n	8004a7a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a78:	e018      	b.n	8004aac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a7a:	f7fd fbdd 	bl	8002238 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d803      	bhi.n	8004a92 <HAL_SPI_Transmit+0x160>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d102      	bne.n	8004a98 <HAL_SPI_Transmit+0x166>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e082      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1c7      	bne.n	8004a46 <HAL_SPI_Transmit+0x114>
 8004ab6:	e053      	b.n	8004b60 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_SPI_Transmit+0x194>
 8004ac0:	8b7b      	ldrh	r3, [r7, #26]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d147      	bne.n	8004b56 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aec:	e033      	b.n	8004b56 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d113      	bne.n	8004b24 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004b22:	e018      	b.n	8004b56 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b24:	f7fd fb88 	bl	8002238 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d803      	bhi.n	8004b3c <HAL_SPI_Transmit+0x20a>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d102      	bne.n	8004b42 <HAL_SPI_Transmit+0x210>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e02d      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1c6      	bne.n	8004aee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	6839      	ldr	r1, [r7, #0]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f8bf 	bl	8004ce8 <SPI_EndRxTxTransaction>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc8:	b2db      	uxtb	r3, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	4613      	mov	r3, r2
 8004be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004be8:	f7fd fb26 	bl	8002238 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bf8:	f7fd fb1e 	bl	8002238 <HAL_GetTick>
 8004bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bfe:	4b39      	ldr	r3, [pc, #228]	@ (8004ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	0d1b      	lsrs	r3, r3, #20
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	fb02 f303 	mul.w	r3, r2, r3
 8004c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0e:	e054      	b.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d050      	beq.n	8004cba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c18:	f7fd fb0e 	bl	8002238 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d902      	bls.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d13d      	bne.n	8004caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c46:	d111      	bne.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c50:	d004      	beq.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d107      	bne.n	8004c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d10f      	bne.n	8004c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e017      	b.n	8004cda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d19b      	bne.n	8004c10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3720      	adds	r7, #32
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000004 	.word	0x20000004

08004ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff ff6a 	bl	8004bd8 <SPI_WaitFlagStateUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e032      	b.n	8004d80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <SPI_EndRxTxTransaction+0xa0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <SPI_EndRxTxTransaction+0xa4>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	0d5b      	lsrs	r3, r3, #21
 8004d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d38:	d112      	bne.n	8004d60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2180      	movs	r1, #128	@ 0x80
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7ff ff47 	bl	8004bd8 <SPI_WaitFlagStateUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e00f      	b.n	8004d80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d76:	2b80      	cmp	r3, #128	@ 0x80
 8004d78:	d0f2      	beq.n	8004d60 <SPI_EndRxTxTransaction+0x78>
 8004d7a:	e000      	b.n	8004d7e <SPI_EndRxTxTransaction+0x96>
        break;
 8004d7c:	bf00      	nop
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	165e9f81 	.word	0x165e9f81

08004d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e041      	b.n	8004e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fd f8ea 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	f000 fad8 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e041      	b.n	8004ec4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f839 	bl	8004ecc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f000 fa89 	bl	8005384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d109      	bne.n	8004f04 <HAL_TIM_PWM_Start+0x24>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	e022      	b.n	8004f4a <HAL_TIM_PWM_Start+0x6a>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d109      	bne.n	8004f1e <HAL_TIM_PWM_Start+0x3e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	e015      	b.n	8004f4a <HAL_TIM_PWM_Start+0x6a>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d109      	bne.n	8004f38 <HAL_TIM_PWM_Start+0x58>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	e008      	b.n	8004f4a <HAL_TIM_PWM_Start+0x6a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07c      	b.n	800504c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x82>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f60:	e013      	b.n	8004f8a <HAL_TIM_PWM_Start+0xaa>
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d104      	bne.n	8004f72 <HAL_TIM_PWM_Start+0x92>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f70:	e00b      	b.n	8004f8a <HAL_TIM_PWM_Start+0xaa>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d104      	bne.n	8004f82 <HAL_TIM_PWM_Start+0xa2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	e003      	b.n	8004f8a <HAL_TIM_PWM_Start+0xaa>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fcec 	bl	8005970 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_TIM_PWM_Start+0x174>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_TIM_PWM_Start+0xcc>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8005058 <HAL_TIM_PWM_Start+0x178>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0xd0>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_TIM_PWM_Start+0xd2>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a22      	ldr	r2, [pc, #136]	@ (8005054 <HAL_TIM_PWM_Start+0x174>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd8:	d01d      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1f      	ldr	r2, [pc, #124]	@ (800505c <HAL_TIM_PWM_Start+0x17c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <HAL_TIM_PWM_Start+0x180>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <HAL_TIM_PWM_Start+0x184>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <HAL_TIM_PWM_Start+0x178>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a18      	ldr	r2, [pc, #96]	@ (8005068 <HAL_TIM_PWM_Start+0x188>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIM_PWM_Start+0x136>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a16      	ldr	r2, [pc, #88]	@ (800506c <HAL_TIM_PWM_Start+0x18c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b06      	cmp	r3, #6
 8005026:	d010      	beq.n	800504a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005038:	e007      	b.n	800504a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40010000 	.word	0x40010000
 8005058:	40010400 	.word	0x40010400
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40001800 	.word	0x40001800

08005070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e0ae      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	f200 809f 	bhi.w	80051dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800509e:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080051dd 	.word	0x080051dd
 80050ac:	080051dd 	.word	0x080051dd
 80050b0:	080051dd 	.word	0x080051dd
 80050b4:	08005119 	.word	0x08005119
 80050b8:	080051dd 	.word	0x080051dd
 80050bc:	080051dd 	.word	0x080051dd
 80050c0:	080051dd 	.word	0x080051dd
 80050c4:	0800515b 	.word	0x0800515b
 80050c8:	080051dd 	.word	0x080051dd
 80050cc:	080051dd 	.word	0x080051dd
 80050d0:	080051dd 	.word	0x080051dd
 80050d4:	0800519b 	.word	0x0800519b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f9fc 	bl	80054dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	619a      	str	r2, [r3, #24]
      break;
 8005116:	e064      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fa4c 	bl	80055bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6999      	ldr	r1, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
      break;
 8005158:	e043      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 faa1 	bl	80056a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      break;
 8005198:	e023      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 faf5 	bl	8005790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
      break;
 80051da:	e002      	b.n	80051e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x1c>
 800520c:	2302      	movs	r3, #2
 800520e:	e0b4      	b.n	800537a <HAL_TIM_ConfigClockSource+0x186>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd4>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005256:	f000 8086 	beq.w	8005366 <HAL_TIM_ConfigClockSource+0x172>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b70      	cmp	r3, #112	@ 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xa6>
 8005264:	2b70      	cmp	r3, #112	@ 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b60      	cmp	r3, #96	@ 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x11a>
 800526c:	2b60      	cmp	r3, #96	@ 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b50      	cmp	r3, #80	@ 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfa>
 8005274:	2b50      	cmp	r3, #80	@ 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b40      	cmp	r3, #64	@ 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x13a>
 800527c:	2b40      	cmp	r3, #64	@ 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b30      	cmp	r3, #48	@ 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b30      	cmp	r3, #48	@ 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15a>
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052aa:	f000 fb41 	bl	8005930 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04f      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d8:	f000 fb2a 	bl	8005930 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 fa9e 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	@ 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 faf7 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 800530c:	e02c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800531a:	461a      	mov	r2, r3
 800531c:	f000 fabd 	bl	800589a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	@ 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fae7 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 800532c:	e01c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800533a:	461a      	mov	r2, r3
 800533c:	f000 fa7e 	bl	800583c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	@ 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 fad7 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 800534c:	e00c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 face 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 800535e:	e003      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e000      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a46      	ldr	r2, [pc, #280]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d013      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a43      	ldr	r2, [pc, #268]	@ (80054b4 <TIM_Base_SetConfig+0x130>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a42      	ldr	r2, [pc, #264]	@ (80054b8 <TIM_Base_SetConfig+0x134>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a41      	ldr	r2, [pc, #260]	@ (80054bc <TIM_Base_SetConfig+0x138>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a40      	ldr	r2, [pc, #256]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a35      	ldr	r2, [pc, #212]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e4:	d027      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a32      	ldr	r2, [pc, #200]	@ (80054b4 <TIM_Base_SetConfig+0x130>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d023      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a31      	ldr	r2, [pc, #196]	@ (80054b8 <TIM_Base_SetConfig+0x134>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a30      	ldr	r2, [pc, #192]	@ (80054bc <TIM_Base_SetConfig+0x138>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a2f      	ldr	r2, [pc, #188]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d017      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2e      	ldr	r2, [pc, #184]	@ (80054c4 <TIM_Base_SetConfig+0x140>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2d      	ldr	r2, [pc, #180]	@ (80054c8 <TIM_Base_SetConfig+0x144>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <TIM_Base_SetConfig+0x148>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2b      	ldr	r2, [pc, #172]	@ (80054d0 <TIM_Base_SetConfig+0x14c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2a      	ldr	r2, [pc, #168]	@ (80054d4 <TIM_Base_SetConfig+0x150>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a29      	ldr	r2, [pc, #164]	@ (80054d8 <TIM_Base_SetConfig+0x154>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a10      	ldr	r2, [pc, #64]	@ (80054b0 <TIM_Base_SetConfig+0x12c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0xf8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a12      	ldr	r2, [pc, #72]	@ (80054c0 <TIM_Base_SetConfig+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d103      	bne.n	8005484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b01      	cmp	r3, #1
 8005494:	d105      	bne.n	80054a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f023 0201 	bic.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	611a      	str	r2, [r3, #16]
  }
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40010000 	.word	0x40010000
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00
 80054c0:	40010400 	.word	0x40010400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800
 80054d0:	40001800 	.word	0x40001800
 80054d4:	40001c00 	.word	0x40001c00
 80054d8:	40002000 	.word	0x40002000

080054dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0201 	bic.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f023 0302 	bic.w	r3, r3, #2
 8005524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a20      	ldr	r2, [pc, #128]	@ (80055b4 <TIM_OC1_SetConfig+0xd8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC1_SetConfig+0x64>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a1f      	ldr	r2, [pc, #124]	@ (80055b8 <TIM_OC1_SetConfig+0xdc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d10c      	bne.n	800555a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0308 	bic.w	r3, r3, #8
 8005546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <TIM_OC1_SetConfig+0xd8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC1_SetConfig+0x8e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a14      	ldr	r2, [pc, #80]	@ (80055b8 <TIM_OC1_SetConfig+0xdc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40010400 	.word	0x40010400

080055bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f023 0210 	bic.w	r2, r3, #16
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0320 	bic.w	r3, r3, #32
 8005606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <TIM_OC2_SetConfig+0xe4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_OC2_SetConfig+0x68>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a21      	ldr	r2, [pc, #132]	@ (80056a4 <TIM_OC2_SetConfig+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d10d      	bne.n	8005640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <TIM_OC2_SetConfig+0xe4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC2_SetConfig+0x94>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <TIM_OC2_SetConfig+0xe8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d113      	bne.n	8005678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	021b      	lsls	r3, r3, #8
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <TIM_OC3_SetConfig+0xe0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_OC3_SetConfig+0x66>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a20      	ldr	r2, [pc, #128]	@ (800578c <TIM_OC3_SetConfig+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10d      	bne.n	800572a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a16      	ldr	r2, [pc, #88]	@ (8005788 <TIM_OC3_SetConfig+0xe0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_OC3_SetConfig+0x92>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	@ (800578c <TIM_OC3_SetConfig+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d113      	bne.n	8005762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	621a      	str	r2, [r3, #32]
}
 800577c:	bf00      	nop
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400

08005790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	031b      	lsls	r3, r3, #12
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <TIM_OC4_SetConfig+0xa4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x68>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a11      	ldr	r2, [pc, #68]	@ (8005838 <TIM_OC4_SetConfig+0xa8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40010000 	.word	0x40010000
 8005838:	40010400 	.word	0x40010400

0800583c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0201 	bic.w	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 030a 	bic.w	r3, r3, #10
 8005878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 0210 	bic.w	r2, r3, #16
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	031b      	lsls	r3, r3, #12
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	f043 0307 	orr.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800594a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	021a      	lsls	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	431a      	orrs	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	609a      	str	r2, [r3, #8]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005970:	b480      	push	{r7}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a1a      	ldr	r2, [r3, #32]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a1a      	ldr	r2, [r3, #32]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	fa01 f303 	lsl.w	r3, r1, r3
 80059a8:	431a      	orrs	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e05a      	b.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a20:	d01d      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1d      	ldr	r2, [pc, #116]	@ (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	@ (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a18      	ldr	r2, [pc, #96]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a15      	ldr	r2, [pc, #84]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10c      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40010400 	.word	0x40010400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40001800 	.word	0x40001800

08005ab4 <memset>:
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d100      	bne.n	8005abe <memset+0xa>
 8005abc:	4770      	bx	lr
 8005abe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac2:	e7f9      	b.n	8005ab8 <memset+0x4>

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 f826 	bl	8005b28 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08005b60 	.word	0x08005b60
 8005b00:	08005b60 	.word	0x08005b60
 8005b04:	08005b60 	.word	0x08005b60
 8005b08:	08005b64 	.word	0x08005b64

08005b0c <memcpy>:
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b14:	d100      	bne.n	8005b18 <memcpy+0xc>
 8005b16:	4770      	bx	lr
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d1f9      	bne.n	8005b1a <memcpy+0xe>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
