
SKadkhodayanFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007118  08007118  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007120  08007120  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007124  08007124  00008124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007128  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          00025b94  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025bb0  20025bb0  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013dee  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003059  00000000  00000000  0001ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0001fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb8  00000000  00000000  000212f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002856e  00000000  00000000  000222b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2a4  00000000  00000000  0004a81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef035  00000000  00000000  00064ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153af7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000555c  00000000  00000000  00153b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00159098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005f18 	.word	0x08005f18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005f18 	.word	0x08005f18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 fff9 	bl	80024d6 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f912 	bl	800070c <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f8cf 	bl	800068c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fa00 	bl	80008f8 <LCD_Clear>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	@ 0x30
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
 8000506:	4b5a      	ldr	r3, [pc, #360]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050a:	4a59      	ldr	r2, [pc, #356]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800050c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000510:	6453      	str	r3, [r2, #68]	@ 0x44
 8000512:	4b57      	ldr	r3, [pc, #348]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	4b53      	ldr	r3, [pc, #332]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a52      	ldr	r2, [pc, #328]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	4b4c      	ldr	r3, [pc, #304]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a4b      	ldr	r2, [pc, #300]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b45      	ldr	r3, [pc, #276]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a44      	ldr	r2, [pc, #272]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b42      	ldr	r3, [pc, #264]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	4b3e      	ldr	r3, [pc, #248]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a3d      	ldr	r2, [pc, #244]	@ (8000670 <LCD_GPIO_Init+0x174>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <LCD_GPIO_Init+0x174>)
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80005c6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80005ca:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80005d4:	2302      	movs	r3, #2
 80005d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80005d8:	230e      	movs	r3, #14
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005dc:	f107 031c 	add.w	r3, r7, #28
 80005e0:	4619      	mov	r1, r3
 80005e2:	4824      	ldr	r0, [pc, #144]	@ (8000674 <LCD_GPIO_Init+0x178>)
 80005e4:	f002 fd46 	bl	8003074 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80005e8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80005ec:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	4619      	mov	r1, r3
 80005f4:	4820      	ldr	r0, [pc, #128]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 80005f6:	f002 fd3d 	bl	8003074 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80005fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80005fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	481d      	ldr	r0, [pc, #116]	@ (800067c <LCD_GPIO_Init+0x180>)
 8000608:	f002 fd34 	bl	8003074 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800060c:	2348      	movs	r3, #72	@ 0x48
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	481a      	ldr	r0, [pc, #104]	@ (8000680 <LCD_GPIO_Init+0x184>)
 8000618:	f002 fd2c 	bl	8003074 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4816      	ldr	r0, [pc, #88]	@ (8000684 <LCD_GPIO_Init+0x188>)
 800062a:	f002 fd23 	bl	8003074 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800062e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000632:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4813      	ldr	r0, [pc, #76]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 800063c:	f002 fd1a 	bl	8003074 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000644:	2309      	movs	r3, #9
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480a      	ldr	r0, [pc, #40]	@ (8000678 <LCD_GPIO_Init+0x17c>)
 8000650:	f002 fd10 	bl	8003074 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000654:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <LCD_GPIO_Init+0x18c>)
 8000662:	f002 fd07 	bl	8003074 <HAL_GPIO_Init>
}
 8000666:	bf00      	nop
 8000668:	3730      	adds	r7, #48	@ 0x30
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800

0800068c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	@ 0x40
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800069a:	23f0      	movs	r3, #240	@ 0xf0
 800069c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80006a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006a6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80006ac:	23ff      	movs	r3, #255	@ 0xff
 80006ae:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80006b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <LTCD_Layer_Init+0x78>)
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80006c8:	23f0      	movs	r3, #240	@ 0xf0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80006cc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <LTCD_Layer_Init+0x7c>)
 80006ee:	f003 fa23 	bl	8003b38 <HAL_LTDC_ConfigLayer>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80006f8:	f000 f9d0 	bl	8000a9c <LCD_Error_Handler>
	}
}
 80006fc:	bf00      	nop
 80006fe:	3740      	adds	r7, #64	@ 0x40
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000114 	.word	0x20000114
 8000708:	20000038 	.word	0x20000038

0800070c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <LTCD__Init+0xb0>)
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <LTCD__Init+0xb4>)
 8000714:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000716:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <LTCD__Init+0xb0>)
 8000718:	2209      	movs	r2, #9
 800071a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <LTCD__Init+0xb0>)
 800071e:	2201      	movs	r2, #1
 8000720:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000722:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <LTCD__Init+0xb0>)
 8000724:	221d      	movs	r2, #29
 8000726:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000728:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <LTCD__Init+0xb0>)
 800072a:	2203      	movs	r2, #3
 800072c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800072e:	4b23      	ldr	r3, [pc, #140]	@ (80007bc <LTCD__Init+0xb0>)
 8000730:	f240 120d 	movw	r2, #269	@ 0x10d
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <LTCD__Init+0xb0>)
 8000738:	f240 1243 	movw	r2, #323	@ 0x143
 800073c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <LTCD__Init+0xb0>)
 8000740:	f240 1217 	movw	r2, #279	@ 0x117
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <LTCD__Init+0xb0>)
 8000748:	f240 1247 	movw	r2, #327	@ 0x147
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <LTCD__Init+0xb0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <LTCD__Init+0xb0>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <LTCD__Init+0xb0>)
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <LTCD__Init+0xb8>)
 8000768:	2208      	movs	r2, #8
 800076a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <LTCD__Init+0xb8>)
 800076e:	22c0      	movs	r2, #192	@ 0xc0
 8000770:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <LTCD__Init+0xb8>)
 8000774:	2204      	movs	r2, #4
 8000776:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <LTCD__Init+0xb8>)
 800077a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800077e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000780:	4810      	ldr	r0, [pc, #64]	@ (80007c4 <LTCD__Init+0xb8>)
 8000782:	f004 f833 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000786:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <LTCD__Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800078c:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <LTCD__Init+0xb0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <LTCD__Init+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <LTCD__Init+0xb0>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800079e:	f7ff fead 	bl	80004fc <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007a2:	4806      	ldr	r0, [pc, #24]	@ (80007bc <LTCD__Init+0xb0>)
 80007a4:	f003 f8f8 	bl	8003998 <HAL_LTDC_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80007ae:	f000 f975 	bl	8000a9c <LCD_Error_Handler>
	 }

	ili9341_Init();
 80007b2:	f000 fa45 	bl	8000c40 <ili9341_Init>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000038 	.word	0x20000038
 80007c0:	40016800 	.word	0x40016800
 80007c4:	200000e0 	.word	0x200000e0

080007c8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	460b      	mov	r3, r1
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	4613      	mov	r3, r2
 80007d8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	4413      	add	r3, r2
 80007ea:	4905      	ldr	r1, [pc, #20]	@ (8000800 <LCD_Draw_Pixel+0x38>)
 80007ec:	887a      	ldrh	r2, [r7, #2]
 80007ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000114 	.word	0x20000114

08000804 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4604      	mov	r4, r0
 800080c:	4608      	mov	r0, r1
 800080e:	4611      	mov	r1, r2
 8000810:	461a      	mov	r2, r3
 8000812:	4623      	mov	r3, r4
 8000814:	80fb      	strh	r3, [r7, #6]
 8000816:	4603      	mov	r3, r0
 8000818:	80bb      	strh	r3, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	807b      	strh	r3, [r7, #2]
 800081e:	4613      	mov	r3, r2
 8000820:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	425b      	negs	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	e034      	b.n	8000896 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	425b      	negs	r3, r3
 8000830:	b29b      	uxth	r3, r3
 8000832:	81bb      	strh	r3, [r7, #12]
 8000834:	e024      	b.n	8000880 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000836:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800083a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800083e:	fb03 f202 	mul.w	r2, r3, r2
 8000842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000846:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	441a      	add	r2, r3
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	8879      	ldrh	r1, [r7, #2]
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	429a      	cmp	r2, r3
 800085a:	dc0b      	bgt.n	8000874 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800085c:	89ba      	ldrh	r2, [r7, #12]
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4413      	add	r3, r2
 8000862:	b298      	uxth	r0, r3
 8000864:	89fa      	ldrh	r2, [r7, #14]
 8000866:	88bb      	ldrh	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	b29b      	uxth	r3, r3
 800086c:	883a      	ldrh	r2, [r7, #0]
 800086e:	4619      	mov	r1, r3
 8000870:	f7ff ffaa 	bl	80007c8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000878:	b29b      	uxth	r3, r3
 800087a:	3301      	adds	r3, #1
 800087c:	b29b      	uxth	r3, r3
 800087e:	81bb      	strh	r3, [r7, #12]
 8000880:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	429a      	cmp	r2, r3
 8000888:	ddd5      	ble.n	8000836 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800088a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800088e:	b29b      	uxth	r3, r3
 8000890:	3301      	adds	r3, #1
 8000892:	b29b      	uxth	r3, r3
 8000894:	81fb      	strh	r3, [r7, #14]
 8000896:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800089a:	887b      	ldrh	r3, [r7, #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	ddc5      	ble.n	800082c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd90      	pop	{r4, r7, pc}

080008aa <LCD_Draw_Horizontal_Line>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80008aa:	b590      	push	{r4, r7, lr}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4604      	mov	r4, r0
 80008b2:	4608      	mov	r0, r1
 80008b4:	4611      	mov	r1, r2
 80008b6:	461a      	mov	r2, r3
 80008b8:	4623      	mov	r3, r4
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4603      	mov	r3, r0
 80008be:	80bb      	strh	r3, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 80008c4:	4613      	mov	r3, r2
 80008c6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	81fb      	strh	r3, [r7, #14]
 80008cc:	e00b      	b.n	80008e6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 80008ce:	89fa      	ldrh	r2, [r7, #14]
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	883a      	ldrh	r2, [r7, #0]
 80008d8:	88b9      	ldrh	r1, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff74 	bl	80007c8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	3301      	adds	r3, #1
 80008e4:	81fb      	strh	r3, [r7, #14]
 80008e6:	89fa      	ldrh	r2, [r7, #14]
 80008e8:	887b      	ldrh	r3, [r7, #2]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3ef      	bcc.n	80008ce <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	460a      	mov	r2, r1
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10e      	bne.n	800092c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	e007      	b.n	8000924 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000914:	4908      	ldr	r1, [pc, #32]	@ (8000938 <LCD_Clear+0x40>)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	88ba      	ldrh	r2, [r7, #4]
 800091a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3301      	adds	r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800092a:	d3f3      	bcc.n	8000914 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20000114 	.word	0x20000114

0800093c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000946:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <LCD_SetTextColor+0x1c>)
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	8013      	strh	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	20000000 	.word	0x20000000

0800095c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <LCD_SetFont+0x1c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000110 	.word	0x20000110

0800097c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	603a      	str	r2, [r7, #0]
 8000986:	80fb      	strh	r3, [r7, #6]
 8000988:	460b      	mov	r3, r1
 800098a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	e04c      	b.n	8000a34 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	e03f      	b.n	8000a20 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4619      	mov	r1, r3
 80009ac:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <LCD_Draw_Char+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	889b      	ldrh	r3, [r3, #4]
 80009b2:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <LCD_Draw_Char+0xd4>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	2280      	movs	r2, #128	@ 0x80
 80009c0:	409a      	lsls	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	fa42 f303 	asr.w	r3, r2, r3
 80009c8:	400b      	ands	r3, r1
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <LCD_Draw_Char+0x5c>
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <LCD_Draw_Char+0xd0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	2b0c      	cmp	r3, #12
 80009d6:	d920      	bls.n	8000a1a <LCD_Draw_Char+0x9e>
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	fa42 f303 	asr.w	r3, r2, r3
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d104      	bne.n	80009fc <LCD_Draw_Char+0x80>
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <LCD_Draw_Char+0xd0>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	889b      	ldrh	r3, [r3, #4]
 80009f8:	2b0c      	cmp	r3, #12
 80009fa:	d80e      	bhi.n	8000a1a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	4413      	add	r3, r2
 8000a04:	b298      	uxth	r0, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <LCD_Draw_Char+0xd8>)
 8000a12:	8812      	ldrh	r2, [r2, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff fed7 	bl	80007c8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <LCD_Draw_Char+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d3b8      	bcc.n	80009a0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <LCD_Draw_Char+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	88db      	ldrh	r3, [r3, #6]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d3ab      	bcc.n	800099a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000110 	.word	0x20000110
 8000a50:	aaaaaaab 	.word	0xaaaaaaab
 8000a54:	20000000 	.word	0x20000000

08000a58 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	460b      	mov	r3, r1
 8000a64:	80bb      	strh	r3, [r7, #4]
 8000a66:	4613      	mov	r3, r2
 8000a68:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000a6a:	78fb      	ldrb	r3, [r7, #3]
 8000a6c:	3b20      	subs	r3, #32
 8000a6e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <LCD_DisplayChar+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	4907      	ldr	r1, [pc, #28]	@ (8000a98 <LCD_DisplayChar+0x40>)
 8000a7a:	6809      	ldr	r1, [r1, #0]
 8000a7c:	88c9      	ldrh	r1, [r1, #6]
 8000a7e:	fb01 f303 	mul.w	r3, r1, r3
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	441a      	add	r2, r3
 8000a86:	88b9      	ldrh	r1, [r7, #4]
 8000a88:	88fb      	ldrh	r3, [r7, #6]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff76 	bl	800097c <LCD_Draw_Char>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000110 	.word	0x20000110

08000a9c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <LCD_Error_Handler+0x8>

08000aa8 <displayMovementBase>:
 *      Author: seank
 */

#include "diagnosticsScreen.h"

void displayMovementBase() {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000aac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff ff21 	bl	80008f8 <LCD_Clear>
	LCD_Draw_Circle_Fill(120, 80, 50, LCD_COLOR_BLACK);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2232      	movs	r2, #50	@ 0x32
 8000aba:	2150      	movs	r1, #80	@ 0x50
 8000abc:	2078      	movs	r0, #120	@ 0x78
 8000abe:	f7ff fea1 	bl	8000804 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	222f      	movs	r2, #47	@ 0x2f
 8000ac8:	2150      	movs	r1, #80	@ 0x50
 8000aca:	2078      	movs	r0, #120	@ 0x78
 8000acc:	f7ff fe9a 	bl	8000804 <LCD_Draw_Circle_Fill>
	LCD_Draw_Horizontal_Line(0, 155, 240, LCD_COLOR_BLACK);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	22f0      	movs	r2, #240	@ 0xf0
 8000ad4:	219b      	movs	r1, #155	@ 0x9b
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fee7 	bl	80008aa <LCD_Draw_Horizontal_Line>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <displayCurrentMove>:

void displayCurrentMove(joyPosTypeDef joyPos) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	e883 0003 	stmia.w	r3, {r0, r1}
		LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
		LCD_Draw_Circle_Fill(120+47-20, 80, 20, LCD_COLOR_BLACK);
	}
	*/

	uint32_t dispJoyPosY = mapp(joyPos.xPos, 0, 1024, 80+47-20, 80-47+20);
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	2335      	movs	r3, #53	@ 0x35
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	236b      	movs	r3, #107	@ 0x6b
 8000af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af8:	2100      	movs	r1, #0
 8000afa:	f001 f875 	bl	8001be8 <mapp>
 8000afe:	60f8      	str	r0, [r7, #12]

	uint32_t dispJoyPosX = mapp(joyPos.yPos, 0, 1024, 120-47+20, 120+47-20);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	2393      	movs	r3, #147	@ 0x93
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	235d      	movs	r3, #93	@ 0x5d
 8000b08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f001 f86b 	bl	8001be8 <mapp>
 8000b12:	60b8      	str	r0, [r7, #8]

	LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
 8000b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b18:	222f      	movs	r2, #47	@ 0x2f
 8000b1a:	2150      	movs	r1, #80	@ 0x50
 8000b1c:	2078      	movs	r0, #120	@ 0x78
 8000b1e:	f7ff fe71 	bl	8000804 <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(dispJoyPosX, dispJoyPosY, 20, LCD_COLOR_BLACK);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	b298      	uxth	r0, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	b299      	uxth	r1, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2214      	movs	r2, #20
 8000b2e:	f7ff fe69 	bl	8000804 <LCD_Draw_Circle_Fill>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <displayMoveLog>:

void displayMoveLog(uint16_t moveLog) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff fef8 	bl	800093c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000b4c:	483b      	ldr	r0, [pc, #236]	@ (8000c3c <displayMoveLog+0x100>)
 8000b4e:	f7ff ff05 	bl	800095c <LCD_SetFont>

	// Create a copy of moveLog and y-offset
	uint16_t tempLog = moveLog;
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	81fb      	strh	r3, [r7, #14]
	uint16_t yOffset = 170;
 8000b56:	23aa      	movs	r3, #170	@ 0xaa
 8000b58:	81bb      	strh	r3, [r7, #12]

	while (tempLog != 0) {
 8000b5a:	e066      	b.n	8000c2a <displayMoveLog+0xee>

		// Extract the lowest 4 bits
		uint16_t currentMove = tempLog & 0xF;
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	817b      	strh	r3, [r7, #10]

		if (currentMove == FORWARD) {
 8000b64:	897b      	ldrh	r3, [r7, #10]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d114      	bne.n	8000b94 <displayMoveLog+0x58>

			LCD_DisplayChar(100, yOffset, 'F');
 8000b6a:	89bb      	ldrh	r3, [r7, #12]
 8000b6c:	2246      	movs	r2, #70	@ 0x46
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2064      	movs	r0, #100	@ 0x64
 8000b72:	f7ff ff71 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'W');
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	2257      	movs	r2, #87	@ 0x57
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	2073      	movs	r0, #115	@ 0x73
 8000b7e:	f7ff ff6b 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'D');
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	2244      	movs	r2, #68	@ 0x44
 8000b86:	4619      	mov	r1, r3
 8000b88:	2082      	movs	r0, #130	@ 0x82
 8000b8a:	f7ff ff65 	bl	8000a58 <LCD_DisplayChar>
			yOffset += 30;
 8000b8e:	89bb      	ldrh	r3, [r7, #12]
 8000b90:	331e      	adds	r3, #30
 8000b92:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == BACKWARD) {
 8000b94:	897b      	ldrh	r3, [r7, #10]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d114      	bne.n	8000bc4 <displayMoveLog+0x88>

			LCD_DisplayChar(100, yOffset, 'N');
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	224e      	movs	r2, #78	@ 0x4e
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2064      	movs	r0, #100	@ 0x64
 8000ba2:	f7ff ff59 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'U');
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	2255      	movs	r2, #85	@ 0x55
 8000baa:	4619      	mov	r1, r3
 8000bac:	2073      	movs	r0, #115	@ 0x73
 8000bae:	f7ff ff53 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	2254      	movs	r2, #84	@ 0x54
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2082      	movs	r0, #130	@ 0x82
 8000bba:	f7ff ff4d 	bl	8000a58 <LCD_DisplayChar>
			yOffset += 30;
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	331e      	adds	r3, #30
 8000bc2:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == LEFT) {
 8000bc4:	897b      	ldrh	r3, [r7, #10]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d114      	bne.n	8000bf4 <displayMoveLog+0xb8>

			LCD_DisplayChar(100, yOffset, 'L');
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	224c      	movs	r2, #76	@ 0x4c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	2064      	movs	r0, #100	@ 0x64
 8000bd2:	f7ff ff41 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'F');
 8000bd6:	89bb      	ldrh	r3, [r7, #12]
 8000bd8:	2246      	movs	r2, #70	@ 0x46
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2073      	movs	r0, #115	@ 0x73
 8000bde:	f7ff ff3b 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000be2:	89bb      	ldrh	r3, [r7, #12]
 8000be4:	2254      	movs	r2, #84	@ 0x54
 8000be6:	4619      	mov	r1, r3
 8000be8:	2082      	movs	r0, #130	@ 0x82
 8000bea:	f7ff ff35 	bl	8000a58 <LCD_DisplayChar>
			yOffset += 30;
 8000bee:	89bb      	ldrh	r3, [r7, #12]
 8000bf0:	331e      	adds	r3, #30
 8000bf2:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == RIGHT) {
 8000bf4:	897b      	ldrh	r3, [r7, #10]
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d114      	bne.n	8000c24 <displayMoveLog+0xe8>

			LCD_DisplayChar(100, yOffset, 'R');
 8000bfa:	89bb      	ldrh	r3, [r7, #12]
 8000bfc:	2252      	movs	r2, #82	@ 0x52
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2064      	movs	r0, #100	@ 0x64
 8000c02:	f7ff ff29 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'I');
 8000c06:	89bb      	ldrh	r3, [r7, #12]
 8000c08:	2249      	movs	r2, #73	@ 0x49
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2073      	movs	r0, #115	@ 0x73
 8000c0e:	f7ff ff23 	bl	8000a58 <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	2254      	movs	r2, #84	@ 0x54
 8000c16:	4619      	mov	r1, r3
 8000c18:	2082      	movs	r0, #130	@ 0x82
 8000c1a:	f7ff ff1d 	bl	8000a58 <LCD_DisplayChar>
			yOffset += 30;
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	331e      	adds	r3, #30
 8000c22:	81bb      	strh	r3, [r7, #12]
		}

		// Shift the tempLog to process the next 4 bits
		tempLog >>= 4;
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	81fb      	strh	r3, [r7, #14]
	while (tempLog != 0) {
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d195      	bne.n	8000b5c <displayMoveLog+0x20>
	}
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000004 	.word	0x20000004

08000c40 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c44:	f000 f9fe 	bl	8001044 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c48:	20ca      	movs	r0, #202	@ 0xca
 8000c4a:	f000 f943 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c4e:	20c3      	movs	r0, #195	@ 0xc3
 8000c50:	f000 f94d 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c54:	2008      	movs	r0, #8
 8000c56:	f000 f94a 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c5a:	2050      	movs	r0, #80	@ 0x50
 8000c5c:	f000 f947 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c60:	20cf      	movs	r0, #207	@ 0xcf
 8000c62:	f000 f937 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f941 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c6c:	20c1      	movs	r0, #193	@ 0xc1
 8000c6e:	f000 f93e 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c72:	2030      	movs	r0, #48	@ 0x30
 8000c74:	f000 f93b 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c78:	20ed      	movs	r0, #237	@ 0xed
 8000c7a:	f000 f92b 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c7e:	2064      	movs	r0, #100	@ 0x64
 8000c80:	f000 f935 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f932 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c8a:	2012      	movs	r0, #18
 8000c8c:	f000 f92f 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c90:	2081      	movs	r0, #129	@ 0x81
 8000c92:	f000 f92c 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c96:	20e8      	movs	r0, #232	@ 0xe8
 8000c98:	f000 f91c 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c9c:	2085      	movs	r0, #133	@ 0x85
 8000c9e:	f000 f926 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f923 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000ca8:	2078      	movs	r0, #120	@ 0x78
 8000caa:	f000 f920 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000cae:	20cb      	movs	r0, #203	@ 0xcb
 8000cb0:	f000 f910 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000cb4:	2039      	movs	r0, #57	@ 0x39
 8000cb6:	f000 f91a 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000cba:	202c      	movs	r0, #44	@ 0x2c
 8000cbc:	f000 f917 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f914 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000cc6:	2034      	movs	r0, #52	@ 0x34
 8000cc8:	f000 f911 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f000 f90e 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000cd2:	20f7      	movs	r0, #247	@ 0xf7
 8000cd4:	f000 f8fe 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000cd8:	2020      	movs	r0, #32
 8000cda:	f000 f908 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000cde:	20ea      	movs	r0, #234	@ 0xea
 8000ce0:	f000 f8f8 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 f902 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f8ff 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000cf0:	20b1      	movs	r0, #177	@ 0xb1
 8000cf2:	f000 f8ef 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f8f9 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000cfc:	201b      	movs	r0, #27
 8000cfe:	f000 f8f6 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d02:	20b6      	movs	r0, #182	@ 0xb6
 8000d04:	f000 f8e6 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f000 f8f0 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000d0e:	20a2      	movs	r0, #162	@ 0xa2
 8000d10:	f000 f8ed 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000d14:	20c0      	movs	r0, #192	@ 0xc0
 8000d16:	f000 f8dd 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d1a:	2010      	movs	r0, #16
 8000d1c:	f000 f8e7 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d20:	20c1      	movs	r0, #193	@ 0xc1
 8000d22:	f000 f8d7 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d26:	2010      	movs	r0, #16
 8000d28:	f000 f8e1 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000d2c:	20c5      	movs	r0, #197	@ 0xc5
 8000d2e:	f000 f8d1 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000d32:	2045      	movs	r0, #69	@ 0x45
 8000d34:	f000 f8db 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d38:	2015      	movs	r0, #21
 8000d3a:	f000 f8d8 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d3e:	20c7      	movs	r0, #199	@ 0xc7
 8000d40:	f000 f8c8 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d44:	2090      	movs	r0, #144	@ 0x90
 8000d46:	f000 f8d2 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d4a:	2036      	movs	r0, #54	@ 0x36
 8000d4c:	f000 f8c2 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d50:	20c8      	movs	r0, #200	@ 0xc8
 8000d52:	f000 f8cc 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d56:	20f2      	movs	r0, #242	@ 0xf2
 8000d58:	f000 f8bc 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 f8c6 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d62:	20b0      	movs	r0, #176	@ 0xb0
 8000d64:	f000 f8b6 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d68:	20c2      	movs	r0, #194	@ 0xc2
 8000d6a:	f000 f8c0 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d6e:	20b6      	movs	r0, #182	@ 0xb6
 8000d70:	f000 f8b0 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d74:	200a      	movs	r0, #10
 8000d76:	f000 f8ba 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d7a:	20a7      	movs	r0, #167	@ 0xa7
 8000d7c:	f000 f8b7 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d80:	2027      	movs	r0, #39	@ 0x27
 8000d82:	f000 f8b4 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d86:	2004      	movs	r0, #4
 8000d88:	f000 f8b1 	bl	8000eee <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d8c:	202a      	movs	r0, #42	@ 0x2a
 8000d8e:	f000 f8a1 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f8ab 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 f8a8 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f8a5 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000da4:	20ef      	movs	r0, #239	@ 0xef
 8000da6:	f000 f8a2 	bl	8000eee <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000daa:	202b      	movs	r0, #43	@ 0x2b
 8000dac:	f000 f892 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 f89c 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f899 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 f896 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000dc2:	203f      	movs	r0, #63	@ 0x3f
 8000dc4:	f000 f893 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000dc8:	20f6      	movs	r0, #246	@ 0xf6
 8000dca:	f000 f883 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 f88d 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 f88a 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000dda:	2006      	movs	r0, #6
 8000ddc:	f000 f887 	bl	8000eee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000de0:	202c      	movs	r0, #44	@ 0x2c
 8000de2:	f000 f877 	bl	8000ed4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000de6:	20c8      	movs	r0, #200	@ 0xc8
 8000de8:	f000 f9e8 	bl	80011bc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000dec:	2026      	movs	r0, #38	@ 0x26
 8000dee:	f000 f871 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f000 f87b 	bl	8000eee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000df8:	20e0      	movs	r0, #224	@ 0xe0
 8000dfa:	f000 f86b 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000dfe:	200f      	movs	r0, #15
 8000e00:	f000 f875 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000e04:	2029      	movs	r0, #41	@ 0x29
 8000e06:	f000 f872 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000e0a:	2024      	movs	r0, #36	@ 0x24
 8000e0c:	f000 f86f 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e10:	200c      	movs	r0, #12
 8000e12:	f000 f86c 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000e16:	200e      	movs	r0, #14
 8000e18:	f000 f869 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e1c:	2009      	movs	r0, #9
 8000e1e:	f000 f866 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e22:	204e      	movs	r0, #78	@ 0x4e
 8000e24:	f000 f863 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e28:	2078      	movs	r0, #120	@ 0x78
 8000e2a:	f000 f860 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000e2e:	203c      	movs	r0, #60	@ 0x3c
 8000e30:	f000 f85d 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e34:	2009      	movs	r0, #9
 8000e36:	f000 f85a 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e3a:	2013      	movs	r0, #19
 8000e3c:	f000 f857 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e40:	2005      	movs	r0, #5
 8000e42:	f000 f854 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e46:	2017      	movs	r0, #23
 8000e48:	f000 f851 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e4c:	2011      	movs	r0, #17
 8000e4e:	f000 f84e 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f84b 	bl	8000eee <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e58:	20e1      	movs	r0, #225	@ 0xe1
 8000e5a:	f000 f83b 	bl	8000ed4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f845 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e64:	2016      	movs	r0, #22
 8000e66:	f000 f842 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e6a:	201b      	movs	r0, #27
 8000e6c:	f000 f83f 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e70:	2004      	movs	r0, #4
 8000e72:	f000 f83c 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e76:	2011      	movs	r0, #17
 8000e78:	f000 f839 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e7c:	2007      	movs	r0, #7
 8000e7e:	f000 f836 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e82:	2031      	movs	r0, #49	@ 0x31
 8000e84:	f000 f833 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e88:	2033      	movs	r0, #51	@ 0x33
 8000e8a:	f000 f830 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e8e:	2042      	movs	r0, #66	@ 0x42
 8000e90:	f000 f82d 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e94:	2005      	movs	r0, #5
 8000e96:	f000 f82a 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e9a:	200c      	movs	r0, #12
 8000e9c:	f000 f827 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 f824 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000ea6:	2028      	movs	r0, #40	@ 0x28
 8000ea8:	f000 f821 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000eac:	202f      	movs	r0, #47	@ 0x2f
 8000eae:	f000 f81e 	bl	8000eee <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f81b 	bl	8000eee <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000eb8:	2011      	movs	r0, #17
 8000eba:	f000 f80b 	bl	8000ed4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8000ebe:	20c8      	movs	r0, #200	@ 0xc8
 8000ec0:	f000 f97c 	bl	80011bc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000ec4:	2029      	movs	r0, #41	@ 0x29
 8000ec6:	f000 f805 	bl	8000ed4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000eca:	202c      	movs	r0, #44	@ 0x2c
 8000ecc:	f000 f802 	bl	8000ed4 <ili9341_Write_Reg>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f949 	bl	8001178 <LCD_IO_WriteReg>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f91a 	bl	8001134 <LCD_IO_WriteData>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f0c:	4819      	ldr	r0, [pc, #100]	@ (8000f74 <SPI_Init+0x6c>)
 8000f0e:	f004 f84c 	bl	8004faa <HAL_SPI_GetState>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d12b      	bne.n	8000f70 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f18:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <SPI_Init+0x6c>)
 8000f1a:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <SPI_Init+0x70>)
 8000f1c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <SPI_Init+0x6c>)
 8000f20:	2218      	movs	r2, #24
 8000f22:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <SPI_Init+0x6c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f2a:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <SPI_Init+0x6c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <SPI_Init+0x6c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <SPI_Init+0x6c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <SPI_Init+0x6c>)
 8000f3e:	2207      	movs	r2, #7
 8000f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <SPI_Init+0x6c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <SPI_Init+0x6c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <SPI_Init+0x6c>)
 8000f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f54:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <SPI_Init+0x6c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <SPI_Init+0x6c>)
 8000f5e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f62:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f64:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <SPI_Init+0x6c>)
 8000f66:	f000 f833 	bl	8000fd0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f6a:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <SPI_Init+0x6c>)
 8000f6c:	f003 fe28 	bl	8004bc0 <HAL_SPI_Init>
  }
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20025914 	.word	0x20025914
 8000f78:	40015000 	.word	0x40015000

08000f7c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <SPI_Write+0x34>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1db9      	adds	r1, r7, #6
 8000f90:	2201      	movs	r2, #1
 8000f92:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <SPI_Write+0x38>)
 8000f94:	f003 fec5 	bl	8004d22 <HAL_SPI_Transmit>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000fa2:	f000 f809 	bl	8000fb8 <SPI_Error>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000000c 	.word	0x2000000c
 8000fb4:	20025914 	.word	0x20025914

08000fb8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <SPI_Error+0x14>)
 8000fbe:	f003 fe88 	bl	8004cd2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000fc2:	f7ff ffa1 	bl	8000f08 <SPI_Init>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20025914 	.word	0x20025914

08000fd0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <SPI_MspInit+0x6c>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	4a16      	ldr	r2, [pc, #88]	@ (800103c <SPI_MspInit+0x6c>)
 8000fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fe6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <SPI_MspInit+0x6c>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <SPI_MspInit+0x6c>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800103c <SPI_MspInit+0x6c>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	6313      	str	r3, [r2, #48]	@ 0x30
 8001004:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <SPI_MspInit+0x6c>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001010:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800101a:	2302      	movs	r3, #2
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001022:	2305      	movs	r3, #5
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	@ (8001040 <SPI_MspInit+0x70>)
 800102e:	f002 f821 	bl	8003074 <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800
 8001040:	40021400 	.word	0x40021400

08001044 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800104a:	4b36      	ldr	r3, [pc, #216]	@ (8001124 <LCD_IO_Init+0xe0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d164      	bne.n	800111c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001052:	4b34      	ldr	r3, [pc, #208]	@ (8001124 <LCD_IO_Init+0xe0>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <LCD_IO_Init+0xe4>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	4a31      	ldr	r2, [pc, #196]	@ (8001128 <LCD_IO_Init+0xe4>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6313      	str	r3, [r2, #48]	@ 0x30
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <LCD_IO_Init+0xe4>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001078:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4827      	ldr	r0, [pc, #156]	@ (800112c <LCD_IO_Init+0xe8>)
 800108e:	f001 fff1 	bl	8003074 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <LCD_IO_Init+0xe4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <LCD_IO_Init+0xe4>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <LCD_IO_Init+0xe4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	4819      	ldr	r0, [pc, #100]	@ (800112c <LCD_IO_Init+0xe8>)
 80010c8:	f001 ffd4 	bl	8003074 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <LCD_IO_Init+0xe4>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d4:	4a14      	ldr	r2, [pc, #80]	@ (8001128 <LCD_IO_Init+0xe4>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	@ 0x30
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <LCD_IO_Init+0xe4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80010e8:	2304      	movs	r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010f4:	2302      	movs	r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	480c      	ldr	r0, [pc, #48]	@ (8001130 <LCD_IO_Init+0xec>)
 8001100:	f001 ffb8 	bl	8003074 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <LCD_IO_Init+0xec>)
 800110a:	f002 fa6b 	bl	80035e4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800110e:	2201      	movs	r2, #1
 8001110:	2104      	movs	r1, #4
 8001112:	4807      	ldr	r0, [pc, #28]	@ (8001130 <LCD_IO_Init+0xec>)
 8001114:	f002 fa66 	bl	80035e4 <HAL_GPIO_WritePin>

    SPI_Init();
 8001118:	f7ff fef6 	bl	8000f08 <SPI_Init>
  }
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2002596c 	.word	0x2002596c
 8001128:	40023800 	.word	0x40023800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40020800 	.word	0x40020800

08001134 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001144:	480a      	ldr	r0, [pc, #40]	@ (8001170 <LCD_IO_WriteData+0x3c>)
 8001146:	f002 fa4d 	bl	80035e4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4809      	ldr	r0, [pc, #36]	@ (8001174 <LCD_IO_WriteData+0x40>)
 8001150:	f002 fa48 	bl	80035e4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff10 	bl	8000f7c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800115c:	2201      	movs	r2, #1
 800115e:	2104      	movs	r1, #4
 8001160:	4804      	ldr	r0, [pc, #16]	@ (8001174 <LCD_IO_WriteData+0x40>)
 8001162:	f002 fa3f 	bl	80035e4 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020800 	.word	0x40020800

08001178 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001188:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <LCD_IO_WriteReg+0x3c>)
 800118a:	f002 fa2b 	bl	80035e4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800118e:	2200      	movs	r2, #0
 8001190:	2104      	movs	r1, #4
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <LCD_IO_WriteReg+0x40>)
 8001194:	f002 fa26 	bl	80035e4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff feed 	bl	8000f7c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011a2:	2201      	movs	r2, #1
 80011a4:	2104      	movs	r1, #4
 80011a6:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <LCD_IO_WriteReg+0x40>)
 80011a8:	f002 fa1c 	bl	80035e4 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40020800 	.word	0x40020800

080011bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f001 fa3b 	bl	8002640 <HAL_Delay>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <joystick_getCoords>:
 */

#include "joystickDriver.h"


void joystick_getCoords(joyPosTypeDef * joyPos, ADC_HandleTypeDef hadc1, ADC_HandleTypeDef hadc2) {
 80011d2:	b084      	sub	sp, #16
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	f107 0014 	add.w	r0, r7, #20
 80011e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	HAL_ADC_Start(&hadc1);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fa91 	bl	8002710 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	f04f 31ff 	mov.w	r1, #4294967295
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fb8f 	bl	800291a <HAL_ADC_PollForConversion>

	joyPos->xPos = HAL_ADC_GetValue(&hadc1);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fc15 	bl	8002a30 <HAL_ADC_GetValue>
 8001206:	4602      	mov	r2, r0
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4618      	mov	r0, r3
 8001212:	f001 fb4f 	bl	80028b4 <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc2);
 8001216:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fa78 	bl	8002710 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001220:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fb76 	bl	800291a <HAL_ADC_PollForConversion>

	joyPos->yPos = HAL_ADC_GetValue(&hadc2);
 800122e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fbfc 	bl	8002a30 <HAL_ADC_GetValue>
 8001238:	4602      	mov	r2, r0
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	605a      	str	r2, [r3, #4]

	HAL_ADC_Stop(&hadc2);
 800123e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fb36 	bl	80028b4 <HAL_ADC_Stop>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001252:	b004      	add	sp, #16
 8001254:	4770      	bx	lr
	...

08001258 <SystemClockOverride>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SystemClockOverride(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b092      	sub	sp, #72	@ 0x48
 800125c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <SystemClockOverride+0x7c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a1b      	ldr	r2, [pc, #108]	@ (80012d4 <SystemClockOverride+0x7c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <SystemClockOverride+0x7c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127a:	2301      	movs	r3, #1
 800127c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001282:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001288:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800128c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128e:	2308      	movs	r3, #8
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001292:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001296:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129c:	2307      	movs	r3, #7
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fe1e 	bl	8003ee4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80012a8:	230f      	movs	r3, #15
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ac:	2302      	movs	r3, #2
 80012ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80012c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012c4:	2105      	movs	r1, #5
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f884 	bl	80043d4 <HAL_RCC_ClockConfig>
}
 80012cc:	bf00      	nop
 80012ce:	3748      	adds	r7, #72	@ 0x48
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	b0a6      	sub	sp, #152	@ 0x98
 80012de:	af22      	add	r7, sp, #136	@ 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e0:	f001 f93c 	bl	800255c <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  SystemClockOverride();
 80012e4:	f7ff ffb8 	bl	8001258 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e8:	f000 faca 	bl	8001880 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012ec:	f000 f868 	bl	80013c0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012f0:	f000 fa46 	bl	8001780 <MX_TIM3_Init>
  MX_ADC2_Init();
 80012f4:	f000 f8b6 	bl	8001464 <MX_ADC2_Init>
  MX_I2C3_Init();
 80012f8:	f000 f906 	bl	8001508 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012fc:	f000 f944 	bl	8001588 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001300:	f000 fa08 	bl	8001714 <MX_SPI5_Init>
  MX_RNG_Init();
 8001304:	f000 f9f2 	bl	80016ec <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Left
 8001308:	2100      	movs	r1, #0
 800130a:	482a      	ldr	r0, [pc, #168]	@ (80013b4 <main+0xdc>)
 800130c:	f003 ffe0 	bl	80052d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// Right
 8001310:	2108      	movs	r1, #8
 8001312:	4828      	ldr	r0, [pc, #160]	@ (80013b4 <main+0xdc>)
 8001314:	f003 ffdc 	bl	80052d0 <HAL_TIM_PWM_Start>

  joyPosTypeDef joyPos = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  motorPowTypeDef motorPow = {0};
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]

  uint16_t moveLog = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	807b      	strh	r3, [r7, #2]

  ApplicationInit();
 800132a:	f7ff f8d7 	bl	80004dc <ApplicationInit>

  //LCD_Visual_Demo();

  HAL_Delay(1000);
 800132e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001332:	f001 f985 	bl	8002640 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  joystick_getCoords(&joyPos, hadc1, hadc2);
 8001336:	4e20      	ldr	r6, [pc, #128]	@ (80013b8 <main+0xe0>)
 8001338:	f107 0808 	add.w	r8, r7, #8
 800133c:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <main+0xe4>)
 800133e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8001340:	4611      	mov	r1, r2
 8001342:	2248      	movs	r2, #72	@ 0x48
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fdd9 	bl	8005efc <memcpy>
 800134a:	466d      	mov	r5, sp
 800134c:	f106 040c 	add.w	r4, r6, #12
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001360:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001364:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001368:	4640      	mov	r0, r8
 800136a:	f7ff ff32 	bl	80011d2 <joystick_getCoords>

	  motor_CalculatePower(joyPos.xPos, joyPos.yPos, &motorPow);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	b29b      	uxth	r3, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	b291      	uxth	r1, r2
 8001376:	1d3a      	adds	r2, r7, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc51 	bl	8001c20 <motor_CalculatePower>

	  motor_ApplyPower(motorPow.leftPow, motorPow.rightPow);
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fcb5 	bl	8001cf4 <motor_ApplyPower>

	  populateMoves(motorPow.leftPow, motorPow.rightPow, &moveLog);
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	88f9      	ldrh	r1, [r7, #6]
 800138e:	1cba      	adds	r2, r7, #2
 8001390:	4618      	mov	r0, r3
 8001392:	f000 fcc5 	bl	8001d20 <populateMoves>

	  displayMovementBase();
 8001396:	f7ff fb87 	bl	8000aa8 <displayMovementBase>

	  displayMoveLog(moveLog);
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fbcd 	bl	8000b3c <displayMoveLog>

	  displayCurrentMove(joyPos);
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013aa:	f7ff fb99 	bl	8000ae0 <displayCurrentMove>
	  joystick_getCoords(&joyPos, hadc1, hadc2);
 80013ae:	bf00      	nop
 80013b0:	e7c1      	b.n	8001336 <main+0x5e>
 80013b2:	bf00      	nop
 80013b4:	20025b64 	.word	0x20025b64
 80013b8:	20025970 	.word	0x20025970
 80013bc:	200259b8 	.word	0x200259b8

080013c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <MX_ADC1_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80013de:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <MX_ADC1_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_ADC1_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001422:	f001 f931 	bl	8002688 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 fbd6 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001430:	2305      	movs	r3, #5
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001442:	f001 fb03 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800144c:	f000 fbc6 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20025970 	.word	0x20025970
 800145c:	40012000 	.word	0x40012000
 8001460:	0f000001 	.word	0x0f000001

08001464 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001476:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <MX_ADC2_Init+0x98>)
 8001478:	4a21      	ldr	r2, [pc, #132]	@ (8001500 <MX_ADC2_Init+0x9c>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <MX_ADC2_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001482:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <MX_ADC2_Init+0x98>)
 8001484:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001488:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_ADC2_Init+0x98>)
 800148c:	2201      	movs	r2, #1
 800148e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_ADC2_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_ADC2_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014a6:	4a17      	ldr	r2, [pc, #92]	@ (8001504 <MX_ADC2_Init+0xa0>)
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014be:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014c6:	f001 f8df 	bl	8002688 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fb84 	bl	8001bdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014d4:	230d      	movs	r3, #13
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_ADC2_Init+0x98>)
 80014e6:	f001 fab1 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fb74 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200259b8 	.word	0x200259b8
 8001500:	40012100 	.word	0x40012100
 8001504:	0f000001 	.word	0x0f000001

08001508 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_I2C3_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	@ (8001580 <MX_I2C3_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001512:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_I2C3_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	@ (8001584 <MX_I2C3_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_I2C3_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_I2C3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_I2C3_Init+0x74>)
 8001526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_I2C3_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_I2C3_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_I2C3_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_I2C3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_I2C3_Init+0x74>)
 8001546:	f002 f867 	bl	8003618 <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001550:	f000 fb44 	bl	8001bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_I2C3_Init+0x74>)
 8001558:	f002 f9a2 	bl	80038a0 <HAL_I2CEx_ConfigAnalogFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001562:	f000 fb3b 	bl	8001bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001566:	2100      	movs	r1, #0
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_I2C3_Init+0x74>)
 800156a:	f002 f9d5 	bl	8003918 <HAL_I2CEx_ConfigDigitalFilter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001574:	f000 fb32 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20025a00 	.word	0x20025a00
 8001580:	40005c00 	.word	0x40005c00
 8001584:	000186a0 	.word	0x000186a0

08001588 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09a      	sub	sp, #104	@ 0x68
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800158e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001592:	2234      	movs	r2, #52	@ 0x34
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 fc84 	bl	8005ea4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2234      	movs	r2, #52	@ 0x34
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fc7e 	bl	8005ea4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015a8:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015aa:	4a4f      	ldr	r2, [pc, #316]	@ (80016e8 <MX_LTDC_Init+0x160>)
 80015ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015ae:	4b4d      	ldr	r3, [pc, #308]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015b4:	4b4b      	ldr	r3, [pc, #300]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015ba:	4b4a      	ldr	r3, [pc, #296]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015c0:	4b48      	ldr	r3, [pc, #288]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80015c6:	4b47      	ldr	r3, [pc, #284]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80015cc:	4b45      	ldr	r3, [pc, #276]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015ce:	2203      	movs	r2, #3
 80015d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80015d2:	4b44      	ldr	r3, [pc, #272]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015d4:	220e      	movs	r2, #14
 80015d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80015d8:	4b42      	ldr	r3, [pc, #264]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015da:	2205      	movs	r2, #5
 80015dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80015de:	4b41      	ldr	r3, [pc, #260]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015e0:	f240 228e 	movw	r2, #654	@ 0x28e
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80015e6:	4b3f      	ldr	r3, [pc, #252]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015e8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80015ee:	4b3d      	ldr	r3, [pc, #244]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015f0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80015f8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80015fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015fe:	4b39      	ldr	r3, [pc, #228]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001606:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800160e:	4b35      	ldr	r3, [pc, #212]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001616:	4833      	ldr	r0, [pc, #204]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 8001618:	f002 f9be 	bl	8003998 <HAL_LTDC_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001622:	f000 fadb 	bl	8001bdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001636:	2300      	movs	r3, #0
 8001638:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001646:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001648:	2305      	movs	r3, #5
 800164a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800166a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800166e:	2200      	movs	r2, #0
 8001670:	4619      	mov	r1, r3
 8001672:	481c      	ldr	r0, [pc, #112]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 8001674:	f002 fa60 	bl	8003b38 <HAL_LTDC_ConfigLayer>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800167e:	f000 faad 	bl	8001bdc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800169e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016a4:	2305      	movs	r3, #5
 80016a6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80016c6:	463b      	mov	r3, r7
 80016c8:	2201      	movs	r2, #1
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <MX_LTDC_Init+0x15c>)
 80016ce:	f002 fa33 	bl	8003b38 <HAL_LTDC_ConfigLayer>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80016d8:	f000 fa80 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3768      	adds	r7, #104	@ 0x68
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20025a54 	.word	0x20025a54
 80016e8:	40016800 	.word	0x40016800

080016ec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_RNG_Init+0x20>)
 80016f2:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <MX_RNG_Init+0x24>)
 80016f4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_RNG_Init+0x20>)
 80016f8:	f003 fa38 	bl	8004b6c <HAL_RNG_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001702:	f000 fa6b 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20025afc 	.word	0x20025afc
 8001710:	50060800 	.word	0x50060800

08001714 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001718:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <MX_SPI5_Init+0x64>)
 800171a:	4a18      	ldr	r2, [pc, #96]	@ (800177c <MX_SPI5_Init+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800171e:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001724:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <MX_SPI5_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001732:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001738:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <MX_SPI5_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001744:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174c:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <MX_SPI5_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <MX_SPI5_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001760:	220a      	movs	r2, #10
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <MX_SPI5_Init+0x64>)
 8001766:	f003 fa2b 	bl	8004bc0 <HAL_SPI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001770:	f000 fa34 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20025b0c 	.word	0x20025b0c
 800177c:	40015000 	.word	0x40015000

08001780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	@ 0x38
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	615a      	str	r2, [r3, #20]
 80017ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b0:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017b2:	4a32      	ldr	r2, [pc, #200]	@ (800187c <MX_TIM3_Init+0xfc>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80017b6:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017b8:	2205      	movs	r2, #5
 80017ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017c4:	22c8      	movs	r2, #200	@ 0xc8
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d4:	4828      	ldr	r0, [pc, #160]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017d6:	f003 fcd3 	bl	8005180 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80017e0:	f000 f9fc 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ee:	4619      	mov	r1, r3
 80017f0:	4821      	ldr	r0, [pc, #132]	@ (8001878 <MX_TIM3_Init+0xf8>)
 80017f2:	f003 fef7 	bl	80055e4 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80017fc:	f000 f9ee 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001800:	481d      	ldr	r0, [pc, #116]	@ (8001878 <MX_TIM3_Init+0xf8>)
 8001802:	f003 fd0c 	bl	800521e <HAL_TIM_PWM_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800180c:	f000 f9e6 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	4619      	mov	r1, r3
 800181e:	4816      	ldr	r0, [pc, #88]	@ (8001878 <MX_TIM3_Init+0xf8>)
 8001820:	f004 fac4 	bl	8005dac <HAL_TIMEx_MasterConfigSynchronization>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800182a:	f000 f9d7 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182e:	2360      	movs	r3, #96	@ 0x60
 8001830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM3_Init+0xf8>)
 8001846:	f003 fe0b 	bl	8005460 <HAL_TIM_PWM_ConfigChannel>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001850:	f000 f9c4 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2208      	movs	r2, #8
 8001858:	4619      	mov	r1, r3
 800185a:	4807      	ldr	r0, [pc, #28]	@ (8001878 <MX_TIM3_Init+0xf8>)
 800185c:	f003 fe00 	bl	8005460 <HAL_TIM_PWM_ConfigChannel>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001866:	f000 f9b9 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <MX_TIM3_Init+0xf8>)
 800186c:	f000 fdaa 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 8001870:	bf00      	nop
 8001872:	3738      	adds	r7, #56	@ 0x38
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20025b64 	.word	0x20025b64
 800187c:	40000400 	.word	0x40000400

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08e      	sub	sp, #56	@ 0x38
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	4bb2      	ldr	r3, [pc, #712]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4ab1      	ldr	r2, [pc, #708]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4baf      	ldr	r3, [pc, #700]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	4bab      	ldr	r3, [pc, #684]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4aaa      	ldr	r2, [pc, #680]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4ba8      	ldr	r3, [pc, #672]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4aa3      	ldr	r2, [pc, #652]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4ba1      	ldr	r3, [pc, #644]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b9d      	ldr	r3, [pc, #628]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a9c      	ldr	r2, [pc, #624]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b96      	ldr	r3, [pc, #600]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a95      	ldr	r2, [pc, #596]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b93      	ldr	r3, [pc, #588]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b8f      	ldr	r3, [pc, #572]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a8e      	ldr	r2, [pc, #568]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b8c      	ldr	r3, [pc, #560]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b88      	ldr	r3, [pc, #544]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a87      	ldr	r2, [pc, #540]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b85      	ldr	r3, [pc, #532]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b81      	ldr	r3, [pc, #516]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a80      	ldr	r2, [pc, #512]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b64 <MX_GPIO_Init+0x2e4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2116      	movs	r1, #22
 800197a:	487b      	ldr	r0, [pc, #492]	@ (8001b68 <MX_GPIO_Init+0x2e8>)
 800197c:	f001 fe32 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2180      	movs	r1, #128	@ 0x80
 8001984:	4879      	ldr	r0, [pc, #484]	@ (8001b6c <MX_GPIO_Init+0x2ec>)
 8001986:	f001 fe2d 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001990:	4877      	ldr	r0, [pc, #476]	@ (8001b70 <MX_GPIO_Init+0x2f0>)
 8001992:	f001 fe27 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800199c:	4875      	ldr	r0, [pc, #468]	@ (8001b74 <MX_GPIO_Init+0x2f4>)
 800199e:	f001 fe21 	bl	80035e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80019a2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b4:	230c      	movs	r3, #12
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	4619      	mov	r1, r3
 80019be:	486e      	ldr	r0, [pc, #440]	@ (8001b78 <MX_GPIO_Init+0x2f8>)
 80019c0:	f001 fb58 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80019c4:	2301      	movs	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d4:	230c      	movs	r3, #12
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4862      	ldr	r0, [pc, #392]	@ (8001b68 <MX_GPIO_Init+0x2e8>)
 80019e0:	f001 fb48 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80019e4:	2316      	movs	r3, #22
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f8:	4619      	mov	r1, r3
 80019fa:	485b      	ldr	r0, [pc, #364]	@ (8001b68 <MX_GPIO_Init+0x2e8>)
 80019fc:	f001 fb3a 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001a00:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a06:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	4855      	ldr	r0, [pc, #340]	@ (8001b6c <MX_GPIO_Init+0x2ec>)
 8001a18:	f001 fb2c 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a30:	4619      	mov	r1, r3
 8001a32:	484e      	ldr	r0, [pc, #312]	@ (8001b6c <MX_GPIO_Init+0x2ec>)
 8001a34:	f001 fb1e 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a3c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4846      	ldr	r0, [pc, #280]	@ (8001b68 <MX_GPIO_Init+0x2e8>)
 8001a4e:	f001 fb11 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a52:	2304      	movs	r3, #4
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a62:	4619      	mov	r1, r3
 8001a64:	4845      	ldr	r0, [pc, #276]	@ (8001b7c <MX_GPIO_Init+0x2fc>)
 8001a66:	f001 fb05 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a6a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a84:	4619      	mov	r1, r3
 8001a86:	483b      	ldr	r0, [pc, #236]	@ (8001b74 <MX_GPIO_Init+0x2f4>)
 8001a88:	f001 faf4 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001a8c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4835      	ldr	r0, [pc, #212]	@ (8001b80 <MX_GPIO_Init+0x300>)
 8001aaa:	f001 fae3 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001aae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac8:	4619      	mov	r1, r3
 8001aca:	482c      	ldr	r0, [pc, #176]	@ (8001b7c <MX_GPIO_Init+0x2fc>)
 8001acc:	f001 fad2 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4825      	ldr	r0, [pc, #148]	@ (8001b7c <MX_GPIO_Init+0x2fc>)
 8001ae6:	f001 fac5 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001aea:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001afc:	230c      	movs	r3, #12
 8001afe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b04:	4619      	mov	r1, r3
 8001b06:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <MX_GPIO_Init+0x2f0>)
 8001b08:	f001 fab4 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001b0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4813      	ldr	r0, [pc, #76]	@ (8001b70 <MX_GPIO_Init+0x2f0>)
 8001b22:	f001 faa7 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001b26:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <MX_GPIO_Init+0x2f0>)
 8001b40:	f001 fa98 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b56:	2307      	movs	r3, #7
 8001b58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5e:	4619      	mov	r1, r3
 8001b60:	e010      	b.n	8001b84 <MX_GPIO_Init+0x304>
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021800 	.word	0x40021800
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40021000 	.word	0x40021000
 8001b84:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <MX_GPIO_Init+0x350>)
 8001b86:	f001 fa75 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001b8a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <MX_GPIO_Init+0x354>)
 8001ba4:	f001 fa66 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001ba8:	2360      	movs	r3, #96	@ 0x60
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	@ (8001bd8 <MX_GPIO_Init+0x358>)
 8001bc4:	f001 fa56 	bl	8003074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3738      	adds	r7, #56	@ 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40020400 	.word	0x40020400

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <Error_Handler+0x8>

08001be8 <mapp>:
 */

#include "motorDriver.h"
#include "stdlib.h"

uint32_t mapp(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	1a8a      	subs	r2, r1, r2
 8001c02:	fb03 f202 	mul.w	r2, r3, r2
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1acb      	subs	r3, r1, r3
 8001c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4413      	add	r3, r2
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <motor_CalculatePower>:

void motor_CalculatePower(uint16_t xPos, uint16_t yPos, motorPowTypeDef * motorPow) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	4603      	mov	r3, r0
 8001c28:	603a      	str	r2, [r7, #0]
 8001c2a:	80fb      	strh	r3, [r7, #6]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	80bb      	strh	r3, [r7, #4]

	uint16_t base = (uint16_t) mapp(xPos, 512, 1024, 0, 100);
 8001c30:	88f8      	ldrh	r0, [r7, #6]
 8001c32:	2364      	movs	r3, #100	@ 0x64
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c40:	f7ff ffd2 	bl	8001be8 <mapp>
 8001c44:	4603      	mov	r3, r0
 8001c46:	817b      	strh	r3, [r7, #10]

	// Adjustment value that is applied to both motors
	int16_t adjust = (int16_t) (mapp(512 - yPos, 0, 1024, 0, 100)) * TURNFACTOR;
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001c4e:	4618      	mov	r0, r3
 8001c50:	2364      	movs	r3, #100	@ 0x64
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f7ff ffc4 	bl	8001be8 <mapp>
 8001c60:	4603      	mov	r3, r0
 8001c62:	813b      	strh	r3, [r7, #8]

	// Apply adjustment
	int16_t rightMotor = base - adjust;
 8001c64:	893b      	ldrh	r3, [r7, #8]
 8001c66:	897a      	ldrh	r2, [r7, #10]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	81fb      	strh	r3, [r7, #14]
	int16_t leftMotor = base + adjust;
 8001c6e:	893a      	ldrh	r2, [r7, #8]
 8001c70:	897b      	ldrh	r3, [r7, #10]
 8001c72:	4413      	add	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	81bb      	strh	r3, [r7, #12]

	// When joystick is fully back, send HIGH signal to brakePinLeft then set power to 0.
	if ((rightMotor < 0 && leftMotor < 0) || (xPos <= 515 && yPos <= 515)) {
 8001c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da03      	bge.n	8001c88 <motor_CalculatePower+0x68>
 8001c80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db07      	blt.n	8001c98 <motor_CalculatePower+0x78>
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8001c8e:	d20e      	bcs.n	8001cae <motor_CalculatePower+0x8e>
 8001c90:	88bb      	ldrh	r3, [r7, #4]
 8001c92:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8001c96:	d20a      	bcs.n	8001cae <motor_CalculatePower+0x8e>
	    rightMotor = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	81fb      	strh	r3, [r7, #14]
	    leftMotor = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	81bb      	strh	r3, [r7, #12]

	    // Store motor power
	    motorPow->leftPow = leftMotor;
 8001ca0:	89ba      	ldrh	r2, [r7, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	801a      	strh	r2, [r3, #0]
	    motorPow->rightPow = rightMotor;
 8001ca6:	89fa      	ldrh	r2, [r7, #14]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	805a      	strh	r2, [r3, #2]
 8001cac:	e01e      	b.n	8001cec <motor_CalculatePower+0xcc>
	}

	else {

		//////////////// Removing values >255 or <0 and setting them to 255 and 0 respectively ///////////////////////
		if (rightMotor < 0) {
 8001cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da01      	bge.n	8001cba <motor_CalculatePower+0x9a>
			rightMotor = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor < 0) {
 8001cba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da01      	bge.n	8001cc6 <motor_CalculatePower+0xa6>
			leftMotor = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	81bb      	strh	r3, [r7, #12]
		}

		if (rightMotor > 100) {
 8001cc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	dd01      	ble.n	8001cd2 <motor_CalculatePower+0xb2>
			rightMotor = 100;
 8001cce:	2364      	movs	r3, #100	@ 0x64
 8001cd0:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor > 100) {
 8001cd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	dd01      	ble.n	8001cde <motor_CalculatePower+0xbe>
			leftMotor = 100;
 8001cda:	2364      	movs	r3, #100	@ 0x64
 8001cdc:	81bb      	strh	r3, [r7, #12]
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////


		// Store motor power
		motorPow->leftPow = leftMotor;
 8001cde:	89ba      	ldrh	r2, [r7, #12]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	801a      	strh	r2, [r3, #0]
		motorPow->rightPow = rightMotor;
 8001ce4:	89fa      	ldrh	r2, [r7, #14]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	805a      	strh	r2, [r3, #2]
	}
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <motor_ApplyPower>:

void motor_ApplyPower(uint16_t powerLeft, uint16_t powerRight) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	80fb      	strh	r3, [r7, #6]
 8001d00:	4613      	mov	r3, r2
 8001d02:	80bb      	strh	r3, [r7, #4]

	// TODO: Disable Brakes Here

	TIM3->CCR1 = powerLeft;		// Set the left CCR register to change PWM
 8001d04:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <motor_ApplyPower+0x28>)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR3 = powerRight;	// Set the right CCR register to change PWM
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <motor_ApplyPower+0x28>)
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40000400 	.word	0x40000400

08001d20 <populateMoves>:

	TIM3->CCR1 = 0;
	TIM3->CCR3 = 0;
}

void populateMoves(uint16_t powerLeft, uint16_t powerRight, uint16_t * moveLog) {
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	603a      	str	r2, [r7, #0]
 8001d2a:	80fb      	strh	r3, [r7, #6]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	80bb      	strh	r3, [r7, #4]

	// BWD
	if (powerLeft < 5 && powerRight < 5) {
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d813      	bhi.n	8001d5e <populateMoves+0x3e>
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d810      	bhi.n	8001d5e <populateMoves+0x3e>

		// Check if move is already displayed
		if ((*moveLog & 0xF) != BACKWARD) {
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d05c      	beq.n	8001e02 <populateMoves+0xe2>

			*moveLog = (*moveLog << 4) | BACKWARD;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	801a      	strh	r2, [r3, #0]
		if ((*moveLog & 0xF) != BACKWARD) {
 8001d5c:	e051      	b.n	8001e02 <populateMoves+0xe2>
	}

	else {

		// LFT
		if (powerLeft < powerRight) {
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	88bb      	ldrh	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d226      	bcs.n	8001db4 <populateMoves+0x94>

			// FWD
			if (powerRight - powerLeft < 15) {
 8001d66:	88ba      	ldrh	r2, [r7, #4]
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b0e      	cmp	r3, #14
 8001d6e:	dc10      	bgt.n	8001d92 <populateMoves+0x72>

				// Check if move is already displayed
				if ((*moveLog & 0xF) != FORWARD) {
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d042      	beq.n	8001e02 <populateMoves+0xe2>

				*moveLog = (*moveLog << 4) | FORWARD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	801a      	strh	r2, [r3, #0]
					*moveLog = (*moveLog << 4) | RIGHT;
				}
			}
		}
	}
}
 8001d90:	e037      	b.n	8001e02 <populateMoves+0xe2>
				if ((*moveLog & 0xF) != LEFT) {
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d031      	beq.n	8001e02 <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | LEFT;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	801a      	strh	r2, [r3, #0]
}
 8001db2:	e026      	b.n	8001e02 <populateMoves+0xe2>
			if (powerLeft - powerRight < 15) {
 8001db4:	88fa      	ldrh	r2, [r7, #6]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b0e      	cmp	r3, #14
 8001dbc:	dc10      	bgt.n	8001de0 <populateMoves+0xc0>
				if ((*moveLog & 0xF) != FORWARD) {
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d01b      	beq.n	8001e02 <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | FORWARD;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	b21b      	sxth	r3, r3
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	801a      	strh	r2, [r3, #0]
}
 8001dde:	e010      	b.n	8001e02 <populateMoves+0xe2>
				if ((*moveLog & 0xF) != RIGHT) {
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00a      	beq.n	8001e02 <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | RIGHT;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	f043 0308 	orr.w	r3, r3, #8
 8001df8:	b21b      	sxth	r3, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	801a      	strh	r2, [r3, #0]
}
 8001e00:	e7ff      	b.n	8001e02 <populateMoves+0xe2>
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e4e:	2007      	movs	r0, #7
 8001e50:	f001 f8dc 	bl	800300c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	@ 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <HAL_ADC_MspInit+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d128      	bne.n	8001ed4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	4b2d      	ldr	r3, [pc, #180]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b26      	ldr	r3, [pc, #152]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481c      	ldr	r0, [pc, #112]	@ (8001f40 <HAL_ADC_MspInit+0xe0>)
 8001ece:	f001 f8d1 	bl	8003074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ed2:	e02c      	b.n	8001f2e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f44 <HAL_ADC_MspInit+0xe4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d127      	bne.n	8001f2e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b16      	ldr	r3, [pc, #88]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b0f      	ldr	r3, [pc, #60]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_ADC_MspInit+0xdc>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f16:	2308      	movs	r3, #8
 8001f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <HAL_ADC_MspInit+0xe8>)
 8001f2a:	f001 f8a3 	bl	8003074 <HAL_GPIO_Init>
}
 8001f2e:	bf00      	nop
 8001f30:	3730      	adds	r7, #48	@ 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40012000 	.word	0x40012000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40012100 	.word	0x40012100
 8001f48:	40020800 	.word	0x40020800

08001f4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <HAL_I2C_MspInit+0xc4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d14b      	bne.n	8002006 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4815      	ldr	r0, [pc, #84]	@ (8002018 <HAL_I2C_MspInit+0xcc>)
 8001fc4:	f001 f856 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fce:	2312      	movs	r3, #18
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <HAL_I2C_MspInit+0xd0>)
 8001fe6:	f001 f845 	bl	8003074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40005c00 	.word	0x40005c00
 8002014:	40023800 	.word	0x40023800
 8002018:	40020800 	.word	0x40020800
 800201c:	40020000 	.word	0x40020000

08002020 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	@ 0x68
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203c:	2230      	movs	r2, #48	@ 0x30
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f003 ff2f 	bl	8005ea4 <memset>
  if(hltdc->Instance==LTDC)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a81      	ldr	r2, [pc, #516]	@ (8002250 <HAL_LTDC_MspInit+0x230>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 80fa 	bne.w	8002246 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002052:	2308      	movs	r3, #8
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002056:	2332      	movs	r3, #50	@ 0x32
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800205a:	2302      	movs	r3, #2
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800205e:	2300      	movs	r3, #0
 8002060:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fbc0 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002072:	f7ff fdb3 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b73      	ldr	r3, [pc, #460]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a67      	ldr	r2, [pc, #412]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a60      	ldr	r2, [pc, #384]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b5e      	ldr	r3, [pc, #376]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a59      	ldr	r2, [pc, #356]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800213a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214c:	230e      	movs	r3, #14
 800214e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002154:	4619      	mov	r1, r3
 8002156:	4840      	ldr	r0, [pc, #256]	@ (8002258 <HAL_LTDC_MspInit+0x238>)
 8002158:	f000 ff8c 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800215c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002160:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800216e:	230e      	movs	r3, #14
 8002170:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002176:	4619      	mov	r1, r3
 8002178:	4838      	ldr	r0, [pc, #224]	@ (800225c <HAL_LTDC_MspInit+0x23c>)
 800217a:	f000 ff7b 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800217e:	2303      	movs	r3, #3
 8002180:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800218e:	2309      	movs	r3, #9
 8002190:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002196:	4619      	mov	r1, r3
 8002198:	4831      	ldr	r0, [pc, #196]	@ (8002260 <HAL_LTDC_MspInit+0x240>)
 800219a:	f000 ff6b 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800219e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80021a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b0:	230e      	movs	r3, #14
 80021b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021b8:	4619      	mov	r1, r3
 80021ba:	4829      	ldr	r0, [pc, #164]	@ (8002260 <HAL_LTDC_MspInit+0x240>)
 80021bc:	f000 ff5a 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80021c0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d2:	230e      	movs	r3, #14
 80021d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021da:	4619      	mov	r1, r3
 80021dc:	4821      	ldr	r0, [pc, #132]	@ (8002264 <HAL_LTDC_MspInit+0x244>)
 80021de:	f000 ff49 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80021e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80021e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f4:	230e      	movs	r3, #14
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fc:	4619      	mov	r1, r3
 80021fe:	481a      	ldr	r0, [pc, #104]	@ (8002268 <HAL_LTDC_MspInit+0x248>)
 8002200:	f000 ff38 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002204:	2348      	movs	r3, #72	@ 0x48
 8002206:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002214:	230e      	movs	r3, #14
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800221c:	4619      	mov	r1, r3
 800221e:	4813      	ldr	r0, [pc, #76]	@ (800226c <HAL_LTDC_MspInit+0x24c>)
 8002220:	f000 ff28 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002224:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002228:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002236:	2309      	movs	r3, #9
 8002238:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800223e:	4619      	mov	r1, r3
 8002240:	4808      	ldr	r0, [pc, #32]	@ (8002264 <HAL_LTDC_MspInit+0x244>)
 8002242:	f000 ff17 	bl	8003074 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002246:	bf00      	nop
 8002248:	3768      	adds	r7, #104	@ 0x68
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40016800 	.word	0x40016800
 8002254:	40023800 	.word	0x40023800
 8002258:	40021400 	.word	0x40021400
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40021800 	.word	0x40021800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00

08002270 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_RNG_MspInit+0x3c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10d      	bne.n	800229e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 800228c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002290:	6353      	str	r3, [r2, #52]	@ 0x34
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	50060800 	.word	0x50060800
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_SPI_MspInit+0x84>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12c      	bne.n	8002330 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a10      	ldr	r2, [pc, #64]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022fc:	f043 0320 	orr.w	r3, r3, #32
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_SPI_MspInit+0x88>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800230e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002320:	2305      	movs	r3, #5
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	@ (8002340 <HAL_SPI_MspInit+0x8c>)
 800232c:	f000 fea2 	bl	8003074 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40015000 	.word	0x40015000
 800233c:	40023800 	.word	0x40023800
 8002340:	40021400 	.word	0x40021400

08002344 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <HAL_SPI_MspDeInit+0x30>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10a      	bne.n	800236c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_SPI_MspDeInit+0x34>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_SPI_MspDeInit+0x34>)
 800235c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002362:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_SPI_MspDeInit+0x38>)
 8002368:	f001 f830 	bl	80033cc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40015000 	.word	0x40015000
 8002378:	40023800 	.word	0x40023800
 800237c:	40021400 	.word	0x40021400

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0b      	ldr	r2, [pc, #44]	@ (80023bc <HAL_TIM_Base_MspInit+0x3c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a2:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <HAL_TIM_Base_MspInit+0x40>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <HAL_TIM_MspPostInit+0xa4>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d13c      	bne.n	8002460 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b20      	ldr	r3, [pc, #128]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a1f      	ldr	r2, [pc, #124]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a18      	ldr	r2, [pc, #96]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_TIM_MspPostInit+0xa8>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800241e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002430:	2302      	movs	r3, #2
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	480d      	ldr	r0, [pc, #52]	@ (8002470 <HAL_TIM_MspPostInit+0xac>)
 800243c:	f000 fe1a 	bl	8003074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002440:	2310      	movs	r3, #16
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002450:	2302      	movs	r3, #2
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	@ (8002474 <HAL_TIM_MspPostInit+0xb0>)
 800245c:	f000 fe0a 	bl	8003074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	@ 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40000400 	.word	0x40000400
 800246c:	40023800 	.word	0x40023800
 8002470:	40020800 	.word	0x40020800
 8002474:	40020400 	.word	0x40020400

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <NMI_Handler+0x4>

08002480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <MemManage_Handler+0x4>

08002490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <UsageFault_Handler+0x4>

080024a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ce:	f000 f897 	bl	8002600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002536:	f003 fcbd 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7fe fecd 	bl	80012d8 <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002540:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800254c:	08007128 	.word	0x08007128
  ldr r2, =_sbss
 8002550:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002554:	20025bb0 	.word	0x20025bb0

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 fd41 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	2000      	movs	r0, #0
 800258c:	f000 f808 	bl	80025a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fc3e 	bl	8001e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x54>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_InitTick+0x58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fd4b 	bl	800305a <HAL_SYSTICK_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00e      	b.n	80025ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d80a      	bhi.n	80025ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 fd21 	bl	8003022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_InitTick+0x5c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000010 	.word	0x20000010
 80025f8:	20000018 	.word	0x20000018
 80025fc:	20000014 	.word	0x20000014

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000018 	.word	0x20000018
 8002624:	20025bac 	.word	0x20025bac

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20025bac 	.word	0x20025bac

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000018 	.word	0x20000018

08002688 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e033      	b.n	8002706 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fbda 	bl	8001e60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026ce:	f023 0302 	bic.w	r3, r3, #2
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fae8 	bl	8002cb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_ADC_Start+0x1a>
 8002726:	2302      	movs	r3, #2
 8002728:	e0b2      	b.n	8002890 <HAL_ADC_Start+0x180>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d018      	beq.n	8002772 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002750:	4b52      	ldr	r3, [pc, #328]	@ (800289c <HAL_ADC_Start+0x18c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_ADC_Start+0x190>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0c9a      	lsrs	r2, r3, #18
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002764:	e002      	b.n	800276c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d17a      	bne.n	8002876 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027be:	d106      	bne.n	80027ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	f023 0206 	bic.w	r2, r3, #6
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <HAL_ADC_Start+0x194>)
 80027de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12a      	bne.n	800284c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2b      	ldr	r2, [pc, #172]	@ (80028a8 <HAL_ADC_Start+0x198>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d015      	beq.n	800282c <HAL_ADC_Start+0x11c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_ADC_Start+0x19c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d105      	bne.n	8002816 <HAL_ADC_Start+0x106>
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <HAL_ADC_Start+0x194>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <HAL_ADC_Start+0x1a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d136      	bne.n	800288e <HAL_ADC_Start+0x17e>
 8002820:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <HAL_ADC_Start+0x194>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d130      	bne.n	800288e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d129      	bne.n	800288e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e020      	b.n	800288e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <HAL_ADC_Start+0x198>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d11b      	bne.n	800288e <HAL_ADC_Start+0x17e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e00b      	b.n	800288e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	20000010 	.word	0x20000010
 80028a0:	431bde83 	.word	0x431bde83
 80028a4:	40012300 	.word	0x40012300
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40012100 	.word	0x40012100
 80028b0:	40012200 	.word	0x40012200

080028b4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Stop+0x16>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e021      	b.n	800290e <HAL_ADC_Stop+0x5a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002936:	d113      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002946:	d10b      	bne.n	8002960 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e063      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002960:	f7ff fe62 	bl	8002628 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002966:	e021      	b.n	80029ac <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d01d      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_PollForConversion+0x6c>
 8002976:	f7ff fe57 	bl	8002628 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d212      	bcs.n	80029ac <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	d00b      	beq.n	80029ac <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e03d      	b.n	8002a28 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d1d6      	bne.n	8002968 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0212 	mvn.w	r2, #18
 80029c2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d123      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11f      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d006      	beq.n	8002a02 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d111      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1c>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e113      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x244>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d925      	bls.n	8002ac4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68d9      	ldr	r1, [r3, #12]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3b1e      	subs	r3, #30
 8002a8e:	2207      	movs	r2, #7
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43da      	mvns	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68d9      	ldr	r1, [r3, #12]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4403      	add	r3, r0
 8002ab6:	3b1e      	subs	r3, #30
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	e022      	b.n	8002b0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6919      	ldr	r1, [r3, #16]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2207      	movs	r2, #7
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6919      	ldr	r1, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4618      	mov	r0, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4403      	add	r3, r0
 8002b00:	409a      	lsls	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d824      	bhi.n	8002b5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b05      	subs	r3, #5
 8002b24:	221f      	movs	r2, #31
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b05      	subs	r3, #5
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b5a:	e04c      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d824      	bhi.n	8002bae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b23      	subs	r3, #35	@ 0x23
 8002b76:	221f      	movs	r2, #31
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	400a      	ands	r2, r1
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b23      	subs	r3, #35	@ 0x23
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bac:	e023      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b41      	subs	r3, #65	@ 0x41
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b41      	subs	r3, #65	@ 0x41
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf6:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_ADC_ConfigChannel+0x250>)
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x254>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10f      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d8>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b12      	cmp	r3, #18
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca0 <HAL_ADC_ConfigChannel+0x254>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d12b      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x258>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x1f4>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b11      	cmp	r3, #17
 8002c3e:	d122      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_ADC_ConfigChannel+0x258>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d111      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x25c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_ADC_ConfigChannel+0x260>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	0c9a      	lsrs	r2, r3, #18
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c78:	e002      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f9      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40012300 	.word	0x40012300
 8002ca0:	40012000 	.word	0x40012000
 8002ca4:	10000012 	.word	0x10000012
 8002ca8:	20000010 	.word	0x20000010
 8002cac:	431bde83 	.word	0x431bde83

08002cb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb8:	4b79      	ldr	r3, [pc, #484]	@ (8002ea0 <ADC_Init+0x1f0>)
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	4a58      	ldr	r2, [pc, #352]	@ (8002ea4 <ADC_Init+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e00f      	b.n	8002dae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0202 	bic.w	r2, r2, #2
 8002dbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7e1b      	ldrb	r3, [r3, #24]
 8002dc8:	005a      	lsls	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	3b01      	subs	r3, #1
 8002e08:	035a      	lsls	r2, r3, #13
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	e007      	b.n	8002e24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	051a      	lsls	r2, r3, #20
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e66:	025a      	lsls	r2, r3, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	029a      	lsls	r2, r3, #10
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40012300 	.word	0x40012300
 8002ea4:	0f000001 	.word	0x0f000001

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff47 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff5c 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffb0 	bl	8002fc8 <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	@ 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e177      	b.n	8003380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	f040 8166 	bne.w	800337a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d005      	beq.n	80030c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d130      	bne.n	8003128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	2203      	movs	r2, #3
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 0201 	and.w	r2, r3, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b03      	cmp	r3, #3
 8003132:	d017      	beq.n	8003164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d123      	bne.n	80031b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3208      	adds	r2, #8
 8003178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	220f      	movs	r2, #15
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08da      	lsrs	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	69b9      	ldr	r1, [r7, #24]
 80031b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80c0 	beq.w	800337a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b66      	ldr	r3, [pc, #408]	@ (8003398 <HAL_GPIO_Init+0x324>)
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	4a65      	ldr	r2, [pc, #404]	@ (8003398 <HAL_GPIO_Init+0x324>)
 8003204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003208:	6453      	str	r3, [r2, #68]	@ 0x44
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_GPIO_Init+0x324>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003216:	4a61      	ldr	r2, [pc, #388]	@ (800339c <HAL_GPIO_Init+0x328>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	220f      	movs	r2, #15
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a58      	ldr	r2, [pc, #352]	@ (80033a0 <HAL_GPIO_Init+0x32c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d037      	beq.n	80032b2 <HAL_GPIO_Init+0x23e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a57      	ldr	r2, [pc, #348]	@ (80033a4 <HAL_GPIO_Init+0x330>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d031      	beq.n	80032ae <HAL_GPIO_Init+0x23a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a56      	ldr	r2, [pc, #344]	@ (80033a8 <HAL_GPIO_Init+0x334>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <HAL_GPIO_Init+0x236>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a55      	ldr	r2, [pc, #340]	@ (80033ac <HAL_GPIO_Init+0x338>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d025      	beq.n	80032a6 <HAL_GPIO_Init+0x232>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a54      	ldr	r2, [pc, #336]	@ (80033b0 <HAL_GPIO_Init+0x33c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <HAL_GPIO_Init+0x22e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a53      	ldr	r2, [pc, #332]	@ (80033b4 <HAL_GPIO_Init+0x340>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d019      	beq.n	800329e <HAL_GPIO_Init+0x22a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	@ (80033b8 <HAL_GPIO_Init+0x344>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x226>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a51      	ldr	r2, [pc, #324]	@ (80033bc <HAL_GPIO_Init+0x348>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x222>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a50      	ldr	r2, [pc, #320]	@ (80033c0 <HAL_GPIO_Init+0x34c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x21e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4f      	ldr	r2, [pc, #316]	@ (80033c4 <HAL_GPIO_Init+0x350>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x21a>
 800328a:	2309      	movs	r3, #9
 800328c:	e012      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800328e:	230a      	movs	r3, #10
 8003290:	e010      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 8003292:	2308      	movs	r3, #8
 8003294:	e00e      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 8003296:	2307      	movs	r3, #7
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800329a:	2306      	movs	r3, #6
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x240>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	4935      	ldr	r1, [pc, #212]	@ (800339c <HAL_GPIO_Init+0x328>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b32      	ldr	r3, [pc, #200]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003326:	4b28      	ldr	r3, [pc, #160]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334a:	4a1f      	ldr	r2, [pc, #124]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003374:	4a14      	ldr	r2, [pc, #80]	@ (80033c8 <HAL_GPIO_Init+0x354>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f ae84 	bls.w	8003090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40013800 	.word	0x40013800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40021400 	.word	0x40021400
 80033b8:	40021800 	.word	0x40021800
 80033bc:	40021c00 	.word	0x40021c00
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40022400 	.word	0x40022400
 80033c8:	40013c00 	.word	0x40013c00

080033cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e0d9      	b.n	800359c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e8:	2201      	movs	r2, #1
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	429a      	cmp	r2, r3
 8003400:	f040 80c9 	bne.w	8003596 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003404:	4a6b      	ldr	r2, [pc, #428]	@ (80035b4 <HAL_GPIO_DeInit+0x1e8>)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	3302      	adds	r3, #2
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	220f      	movs	r2, #15
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a63      	ldr	r2, [pc, #396]	@ (80035b8 <HAL_GPIO_DeInit+0x1ec>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d037      	beq.n	800349e <HAL_GPIO_DeInit+0xd2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a62      	ldr	r2, [pc, #392]	@ (80035bc <HAL_GPIO_DeInit+0x1f0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_GPIO_DeInit+0xce>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a61      	ldr	r2, [pc, #388]	@ (80035c0 <HAL_GPIO_DeInit+0x1f4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <HAL_GPIO_DeInit+0xca>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a60      	ldr	r2, [pc, #384]	@ (80035c4 <HAL_GPIO_DeInit+0x1f8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d025      	beq.n	8003492 <HAL_GPIO_DeInit+0xc6>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a5f      	ldr	r2, [pc, #380]	@ (80035c8 <HAL_GPIO_DeInit+0x1fc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01f      	beq.n	800348e <HAL_GPIO_DeInit+0xc2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a5e      	ldr	r2, [pc, #376]	@ (80035cc <HAL_GPIO_DeInit+0x200>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d019      	beq.n	800348a <HAL_GPIO_DeInit+0xbe>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a5d      	ldr	r2, [pc, #372]	@ (80035d0 <HAL_GPIO_DeInit+0x204>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_DeInit+0xba>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a5c      	ldr	r2, [pc, #368]	@ (80035d4 <HAL_GPIO_DeInit+0x208>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d00d      	beq.n	8003482 <HAL_GPIO_DeInit+0xb6>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a5b      	ldr	r2, [pc, #364]	@ (80035d8 <HAL_GPIO_DeInit+0x20c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d007      	beq.n	800347e <HAL_GPIO_DeInit+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a5a      	ldr	r2, [pc, #360]	@ (80035dc <HAL_GPIO_DeInit+0x210>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <HAL_GPIO_DeInit+0xae>
 8003476:	2309      	movs	r3, #9
 8003478:	e012      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800347a:	230a      	movs	r3, #10
 800347c:	e010      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800347e:	2308      	movs	r3, #8
 8003480:	e00e      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 8003482:	2307      	movs	r3, #7
 8003484:	e00c      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 8003486:	2306      	movs	r3, #6
 8003488:	e00a      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800348a:	2305      	movs	r3, #5
 800348c:	e008      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800348e:	2304      	movs	r3, #4
 8003490:	e006      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 8003492:	2303      	movs	r3, #3
 8003494:	e004      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 8003496:	2302      	movs	r3, #2
 8003498:	e002      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_GPIO_DeInit+0xd4>
 800349e:	2300      	movs	r3, #0
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	f002 0203 	and.w	r2, r2, #3
 80034a6:	0092      	lsls	r2, r2, #2
 80034a8:	4093      	lsls	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d132      	bne.n	8003516 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034b0:	4b4b      	ldr	r3, [pc, #300]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	43db      	mvns	r3, r3
 80034b8:	4949      	ldr	r1, [pc, #292]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034be:	4b48      	ldr	r3, [pc, #288]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4946      	ldr	r1, [pc, #280]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034cc:	4b44      	ldr	r3, [pc, #272]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	4942      	ldr	r1, [pc, #264]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034da:	4b41      	ldr	r3, [pc, #260]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	493f      	ldr	r1, [pc, #252]	@ (80035e0 <HAL_GPIO_DeInit+0x214>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80034f8:	4a2e      	ldr	r2, [pc, #184]	@ (80035b4 <HAL_GPIO_DeInit+0x1e8>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3302      	adds	r3, #2
 8003500:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	43da      	mvns	r2, r3
 8003508:	482a      	ldr	r0, [pc, #168]	@ (80035b4 <HAL_GPIO_DeInit+0x1e8>)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	400a      	ands	r2, r1
 8003510:	3302      	adds	r3, #2
 8003512:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	2103      	movs	r1, #3
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	401a      	ands	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	08d2      	lsrs	r2, r2, #3
 800354c:	4019      	ands	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2103      	movs	r1, #3
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	2101      	movs	r1, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2103      	movs	r1, #3
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3301      	adds	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	f67f af22 	bls.w	80033e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40022400 	.word	0x40022400
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
 80035f0:	4613      	mov	r3, r2
 80035f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f4:	787b      	ldrb	r3, [r7, #1]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035fa:	887a      	ldrh	r2, [r7, #2]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003600:	e003      	b.n	800360a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	041a      	lsls	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	619a      	str	r2, [r3, #24]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e12b      	b.n	8003882 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fc84 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2224      	movs	r2, #36	@ 0x24
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800366a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800367a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800367c:	f001 f8a2 	bl	80047c4 <HAL_RCC_GetPCLK1Freq>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a81      	ldr	r2, [pc, #516]	@ (800388c <HAL_I2C_Init+0x274>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d807      	bhi.n	800369c <HAL_I2C_Init+0x84>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a80      	ldr	r2, [pc, #512]	@ (8003890 <HAL_I2C_Init+0x278>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e006      	b.n	80036aa <HAL_I2C_Init+0x92>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4a7d      	ldr	r2, [pc, #500]	@ (8003894 <HAL_I2C_Init+0x27c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	bf94      	ite	ls
 80036a4:	2301      	movls	r3, #1
 80036a6:	2300      	movhi	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0e7      	b.n	8003882 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a78      	ldr	r2, [pc, #480]	@ (8003898 <HAL_I2C_Init+0x280>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0c9b      	lsrs	r3, r3, #18
 80036bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a6a      	ldr	r2, [pc, #424]	@ (800388c <HAL_I2C_Init+0x274>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d802      	bhi.n	80036ec <HAL_I2C_Init+0xd4>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3301      	adds	r3, #1
 80036ea:	e009      	b.n	8003700 <HAL_I2C_Init+0xe8>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	4a69      	ldr	r2, [pc, #420]	@ (800389c <HAL_I2C_Init+0x284>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	3301      	adds	r3, #1
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003712:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	495c      	ldr	r1, [pc, #368]	@ (800388c <HAL_I2C_Init+0x274>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d819      	bhi.n	8003754 <HAL_I2C_Init+0x13c>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e59      	subs	r1, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fbb1 f3f3 	udiv	r3, r1, r3
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003734:	400b      	ands	r3, r1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_I2C_Init+0x138>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1e59      	subs	r1, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fbb1 f3f3 	udiv	r3, r1, r3
 8003748:	3301      	adds	r3, #1
 800374a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374e:	e051      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003750:	2304      	movs	r3, #4
 8003752:	e04f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <HAL_I2C_Init+0x168>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e58      	subs	r0, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e012      	b.n	80037a6 <HAL_I2C_Init+0x18e>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Init+0x196>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_I2C_Init+0x1bc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e58      	subs	r0, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037d2:	e00f      	b.n	80037f4 <HAL_I2C_Init+0x1dc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6809      	ldr	r1, [r1, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003822:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6911      	ldr	r1, [r2, #16]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	000186a0 	.word	0x000186a0
 8003890:	001e847f 	.word	0x001e847f
 8003894:	003d08ff 	.word	0x003d08ff
 8003898:	431bde83 	.word	0x431bde83
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d129      	bne.n	800390a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2224      	movs	r2, #36	@ 0x24
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0210 	bic.w	r2, r2, #16
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d12a      	bne.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2224      	movs	r2, #36	@ 0x24
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003952:	89fb      	ldrh	r3, [r7, #14]
 8003954:	f023 030f 	bic.w	r3, r3, #15
 8003958:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	b29a      	uxth	r2, r3
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	4313      	orrs	r3, r2
 8003962:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	89fa      	ldrh	r2, [r7, #14]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0bf      	b.n	8003b2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fe fb2e 	bl	8002020 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80039da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6999      	ldr	r1, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <HAL_LTDC_Init+0x19c>)
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68d9      	ldr	r1, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b3e      	ldr	r3, [pc, #248]	@ (8003b34 <HAL_LTDC_Init+0x19c>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68d9      	ldr	r1, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6919      	ldr	r1, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <HAL_LTDC_Init+0x19c>)
 8003a68:	400b      	ands	r3, r1
 8003a6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6919      	ldr	r1, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6959      	ldr	r1, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b27      	ldr	r3, [pc, #156]	@ (8003b34 <HAL_LTDC_Init+0x19c>)
 8003a96:	400b      	ands	r3, r1
 8003a98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6959      	ldr	r1, [r3, #20]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0206 	orr.w	r2, r2, #6
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	f000f800 	.word	0xf000f800

08003b38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_LTDC_ConfigLayer+0x1a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e02c      	b.n	8003bac <HAL_LTDC_ConfigLayer+0x74>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2134      	movs	r1, #52	@ 0x34
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4614      	mov	r4, r2
 8003b76:	461d      	mov	r5, r3
 8003b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f811 	bl	8003bb4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}

08003bb4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	@ 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	4413      	add	r3, r2
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	01db      	lsls	r3, r3, #7
 8003be0:	4413      	add	r3, r2
 8003be2:	3384      	adds	r3, #132	@ 0x84
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	4611      	mov	r1, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	01d2      	lsls	r2, r2, #7
 8003bf0:	440a      	add	r2, r1
 8003bf2:	3284      	adds	r2, #132	@ 0x84
 8003bf4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003bf8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	01db      	lsls	r3, r3, #7
 8003c18:	440b      	add	r3, r1
 8003c1a:	3384      	adds	r3, #132	@ 0x84
 8003c1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003c22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c32:	4413      	add	r3, r2
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	01db      	lsls	r3, r3, #7
 8003c42:	4413      	add	r3, r2
 8003c44:	3384      	adds	r3, #132	@ 0x84
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	01d2      	lsls	r2, r2, #7
 8003c52:	440a      	add	r2, r1
 8003c54:	3284      	adds	r2, #132	@ 0x84
 8003c56:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003c5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6a:	4413      	add	r3, r2
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4619      	mov	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	01db      	lsls	r3, r3, #7
 8003c78:	440b      	add	r3, r1
 8003c7a:	3384      	adds	r3, #132	@ 0x84
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	01db      	lsls	r3, r3, #7
 8003c8e:	4413      	add	r3, r2
 8003c90:	3384      	adds	r3, #132	@ 0x84
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	01d2      	lsls	r2, r2, #7
 8003c9e:	440a      	add	r2, r1
 8003ca0:	3284      	adds	r2, #132	@ 0x84
 8003ca2:	f023 0307 	bic.w	r3, r3, #7
 8003ca6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	01db      	lsls	r3, r3, #7
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3384      	adds	r3, #132	@ 0x84
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	01db      	lsls	r3, r3, #7
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3384      	adds	r3, #132	@ 0x84
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	01db      	lsls	r3, r3, #7
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3384      	adds	r3, #132	@ 0x84
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d04:	461a      	mov	r2, r3
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4619      	mov	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	01db      	lsls	r3, r3, #7
 8003d18:	440b      	add	r3, r1
 8003d1a:	3384      	adds	r3, #132	@ 0x84
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	01db      	lsls	r3, r3, #7
 8003d2e:	4413      	add	r3, r2
 8003d30:	3384      	adds	r3, #132	@ 0x84
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	01d2      	lsls	r2, r2, #7
 8003d3e:	440a      	add	r2, r1
 8003d40:	3284      	adds	r2, #132	@ 0x84
 8003d42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	01db      	lsls	r3, r3, #7
 8003d52:	4413      	add	r3, r2
 8003d54:	3384      	adds	r3, #132	@ 0x84
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	01db      	lsls	r3, r3, #7
 8003d68:	4413      	add	r3, r2
 8003d6a:	3384      	adds	r3, #132	@ 0x84
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	4611      	mov	r1, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	01d2      	lsls	r2, r2, #7
 8003d78:	440a      	add	r2, r1
 8003d7a:	3284      	adds	r2, #132	@ 0x84
 8003d7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d80:	f023 0307 	bic.w	r3, r3, #7
 8003d84:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	6809      	ldr	r1, [r1, #0]
 8003d92:	4608      	mov	r0, r1
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	01c9      	lsls	r1, r1, #7
 8003d98:	4401      	add	r1, r0
 8003d9a:	3184      	adds	r1, #132	@ 0x84
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	01db      	lsls	r3, r3, #7
 8003daa:	4413      	add	r3, r2
 8003dac:	3384      	adds	r3, #132	@ 0x84
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	01db      	lsls	r3, r3, #7
 8003dba:	4413      	add	r3, r2
 8003dbc:	3384      	adds	r3, #132	@ 0x84
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	01db      	lsls	r3, r3, #7
 8003dce:	4413      	add	r3, r2
 8003dd0:	3384      	adds	r3, #132	@ 0x84
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003de2:	2304      	movs	r3, #4
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e01b      	b.n	8003e20 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d102      	bne.n	8003df6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003df0:	2303      	movs	r3, #3
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	e014      	b.n	8003e20 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00b      	beq.n	8003e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d007      	beq.n	8003e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d003      	beq.n	8003e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003e12:	2b07      	cmp	r3, #7
 8003e14:	d102      	bne.n	8003e1c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003e16:	2302      	movs	r3, #2
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	e001      	b.n	8003e20 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	01db      	lsls	r3, r3, #7
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3384      	adds	r3, #132	@ 0x84
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	4611      	mov	r1, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	01d2      	lsls	r2, r2, #7
 8003e3a:	440a      	add	r2, r1
 8003e3c:	3284      	adds	r2, #132	@ 0x84
 8003e3e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1acb      	subs	r3, r1, r3
 8003e5a:	69f9      	ldr	r1, [r7, #28]
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003e62:	68f9      	ldr	r1, [r7, #12]
 8003e64:	6809      	ldr	r1, [r1, #0]
 8003e66:	4608      	mov	r0, r1
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	01c9      	lsls	r1, r1, #7
 8003e6c:	4401      	add	r1, r0
 8003e6e:	3184      	adds	r1, #132	@ 0x84
 8003e70:	4313      	orrs	r3, r2
 8003e72:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	01db      	lsls	r3, r3, #7
 8003e7e:	4413      	add	r3, r2
 8003e80:	3384      	adds	r3, #132	@ 0x84
 8003e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	01d2      	lsls	r2, r2, #7
 8003e8e:	440a      	add	r2, r1
 8003e90:	3284      	adds	r2, #132	@ 0x84
 8003e92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003e96:	f023 0307 	bic.w	r3, r3, #7
 8003e9a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	01db      	lsls	r3, r3, #7
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3384      	adds	r3, #132	@ 0x84
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	01db      	lsls	r3, r3, #7
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3384      	adds	r3, #132	@ 0x84
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	01d2      	lsls	r2, r2, #7
 8003ecc:	440a      	add	r2, r1
 8003ece:	3284      	adds	r2, #132	@ 0x84
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3724      	adds	r7, #36	@ 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e267      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d075      	beq.n	8003fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f02:	4b88      	ldr	r3, [pc, #544]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b04      	cmp	r3, #4
 8003f0c:	d00c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0e:	4b85      	ldr	r3, [pc, #532]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d112      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f1a:	4b82      	ldr	r3, [pc, #520]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f26:	d10b      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	4b7e      	ldr	r3, [pc, #504]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05b      	beq.n	8003fec <HAL_RCC_OscConfig+0x108>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d157      	bne.n	8003fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e242      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f48:	d106      	bne.n	8003f58 <HAL_RCC_OscConfig+0x74>
 8003f4a:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a75      	ldr	r2, [pc, #468]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e01d      	b.n	8003f94 <HAL_RCC_OscConfig+0xb0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x98>
 8003f62:	4b70      	ldr	r3, [pc, #448]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6f      	ldr	r2, [pc, #444]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6c      	ldr	r2, [pc, #432]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	4b69      	ldr	r3, [pc, #420]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a68      	ldr	r2, [pc, #416]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b66      	ldr	r3, [pc, #408]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a65      	ldr	r2, [pc, #404]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fb44 	bl	8002628 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fe fb40 	bl	8002628 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	@ 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e207      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xc0>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fb30 	bl	8002628 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fe fb2c 	bl	8002628 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1f3      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fde:	4b51      	ldr	r3, [pc, #324]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0xe8>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d063      	beq.n	80040c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800400e:	2b08      	cmp	r3, #8
 8004010:	d11c      	bne.n	800404c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004012:	4b44      	ldr	r3, [pc, #272]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d116      	bne.n	800404c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	4b41      	ldr	r3, [pc, #260]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_RCC_OscConfig+0x152>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d001      	beq.n	8004036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e1c7      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004036:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4937      	ldr	r1, [pc, #220]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404a:	e03a      	b.n	80040c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004054:	4b34      	ldr	r3, [pc, #208]	@ (8004128 <HAL_RCC_OscConfig+0x244>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fe fae5 	bl	8002628 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004062:	f7fe fae1 	bl	8002628 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e1a8      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004074:	4b2b      	ldr	r3, [pc, #172]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b28      	ldr	r3, [pc, #160]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4925      	ldr	r1, [pc, #148]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]
 8004094:	e015      	b.n	80040c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <HAL_RCC_OscConfig+0x244>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fac4 	bl	8002628 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a4:	f7fe fac0 	bl	8002628 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e187      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d036      	beq.n	800413c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <HAL_RCC_OscConfig+0x248>)
 80040d8:	2201      	movs	r2, #1
 80040da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fe faa4 	bl	8002628 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e4:	f7fe faa0 	bl	8002628 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e167      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <HAL_RCC_OscConfig+0x240>)
 80040f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x200>
 8004102:	e01b      	b.n	800413c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004104:	4b09      	ldr	r3, [pc, #36]	@ (800412c <HAL_RCC_OscConfig+0x248>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410a:	f7fe fa8d 	bl	8002628 <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	e00e      	b.n	8004130 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe fa89 	bl	8002628 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d907      	bls.n	8004130 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e150      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
 8004124:	40023800 	.word	0x40023800
 8004128:	42470000 	.word	0x42470000
 800412c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	4b88      	ldr	r3, [pc, #544]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ea      	bne.n	8004112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8097 	beq.w	8004278 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b81      	ldr	r3, [pc, #516]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	4b7d      	ldr	r3, [pc, #500]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	4a7c      	ldr	r2, [pc, #496]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	@ 0x40
 800416a:	4b7a      	ldr	r3, [pc, #488]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	4b77      	ldr	r3, [pc, #476]	@ (8004358 <HAL_RCC_OscConfig+0x474>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d118      	bne.n	80041b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004186:	4b74      	ldr	r3, [pc, #464]	@ (8004358 <HAL_RCC_OscConfig+0x474>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a73      	ldr	r2, [pc, #460]	@ (8004358 <HAL_RCC_OscConfig+0x474>)
 800418c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004192:	f7fe fa49 	bl	8002628 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419a:	f7fe fa45 	bl	8002628 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e10c      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004358 <HAL_RCC_OscConfig+0x474>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x2ea>
 80041c0:	4b64      	ldr	r3, [pc, #400]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c4:	4a63      	ldr	r2, [pc, #396]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80041cc:	e01c      	b.n	8004208 <HAL_RCC_OscConfig+0x324>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x30c>
 80041d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	4a5e      	ldr	r2, [pc, #376]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ee:	e00b      	b.n	8004208 <HAL_RCC_OscConfig+0x324>
 80041f0:	4b58      	ldr	r3, [pc, #352]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	4a57      	ldr	r2, [pc, #348]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fc:	4b55      	ldr	r3, [pc, #340]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80041fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004200:	4a54      	ldr	r2, [pc, #336]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004202:	f023 0304 	bic.w	r3, r3, #4
 8004206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d015      	beq.n	800423c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fe fa0a 	bl	8002628 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fe fa06 	bl	8002628 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0cb      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422e:	4b49      	ldr	r3, [pc, #292]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0ee      	beq.n	8004218 <HAL_RCC_OscConfig+0x334>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423c:	f7fe f9f4 	bl	8002628 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004242:	e00a      	b.n	800425a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004244:	f7fe f9f0 	bl	8002628 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e0b5      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800425a:	4b3e      	ldr	r3, [pc, #248]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1ee      	bne.n	8004244 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004266:	7dfb      	ldrb	r3, [r7, #23]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b39      	ldr	r3, [pc, #228]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	4a38      	ldr	r2, [pc, #224]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80a1 	beq.w	80043c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004282:	4b34      	ldr	r3, [pc, #208]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b08      	cmp	r3, #8
 800428c:	d05c      	beq.n	8004348 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d141      	bne.n	800431a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCC_OscConfig+0x478>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fe f9c4 	bl	8002628 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fe f9c0 	bl	8002628 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e087      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	019b      	lsls	r3, r3, #6
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	3b01      	subs	r3, #1
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	491b      	ldr	r1, [pc, #108]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ec:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x478>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fe f999 	bl	8002628 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fe f995 	bl	8002628 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e05c      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430c:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x416>
 8004318:	e054      	b.n	80043c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <HAL_RCC_OscConfig+0x478>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe f982 	bl	8002628 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004328:	f7fe f97e 	bl	8002628 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e045      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <HAL_RCC_OscConfig+0x470>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x444>
 8004346:	e03d      	b.n	80043c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d107      	bne.n	8004360 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e038      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000
 800435c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004360:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <HAL_RCC_OscConfig+0x4ec>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d028      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d121      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d11a      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004396:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004398:	4293      	cmp	r3, r2
 800439a:	d111      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	3b01      	subs	r3, #1
 80043aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800

080043d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0cc      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d90c      	bls.n	8004410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b65      	ldr	r3, [pc, #404]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b63      	ldr	r3, [pc, #396]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0b8      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004428:	4b59      	ldr	r3, [pc, #356]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4a58      	ldr	r2, [pc, #352]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004432:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004440:	4b53      	ldr	r3, [pc, #332]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a52      	ldr	r2, [pc, #328]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800444a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b50      	ldr	r3, [pc, #320]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	494d      	ldr	r1, [pc, #308]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d044      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d119      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e07f      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d003      	beq.n	8004492 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448e:	2b03      	cmp	r3, #3
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	4b3f      	ldr	r3, [pc, #252]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06f      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e067      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044b2:	4b37      	ldr	r3, [pc, #220]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f023 0203 	bic.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4934      	ldr	r1, [pc, #208]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c4:	f7fe f8b0 	bl	8002628 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044cc:	f7fe f8ac 	bl	8002628 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e04f      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 020c 	and.w	r2, r3, #12
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1eb      	bne.n	80044cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044f4:	4b25      	ldr	r3, [pc, #148]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 030f 	and.w	r3, r3, #15
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d20c      	bcs.n	800451c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004502:	4b22      	ldr	r3, [pc, #136]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b20      	ldr	r3, [pc, #128]	@ (800458c <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e032      	b.n	8004582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004528:	4b19      	ldr	r3, [pc, #100]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4916      	ldr	r1, [pc, #88]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004546:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	490e      	ldr	r1, [pc, #56]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455a:	f000 f821 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800455e:	4602      	mov	r2, r0
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	490a      	ldr	r1, [pc, #40]	@ (8004594 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	5ccb      	ldrb	r3, [r1, r3]
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004576:	4b09      	ldr	r3, [pc, #36]	@ (800459c <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe f810 	bl	80025a0 <HAL_InitTick>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023c00 	.word	0x40023c00
 8004590:	40023800 	.word	0x40023800
 8004594:	08007100 	.word	0x08007100
 8004598:	20000010 	.word	0x20000010
 800459c:	20000014 	.word	0x20000014

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b094      	sub	sp, #80	@ 0x50
 80045a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b8:	4b79      	ldr	r3, [pc, #484]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d00d      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x40>
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	f200 80e1 	bhi.w	800478c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_GetSysClockFreq+0x34>
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d003      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x3a>
 80045d2:	e0db      	b.n	800478c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4b73      	ldr	r3, [pc, #460]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045d8:	e0db      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045da:	4b73      	ldr	r3, [pc, #460]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045de:	e0d8      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e0:	4b6f      	ldr	r3, [pc, #444]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ea:	4b6d      	ldr	r3, [pc, #436]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d063      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4b6a      	ldr	r3, [pc, #424]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	2200      	movs	r2, #0
 80045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004600:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	633b      	str	r3, [r7, #48]	@ 0x30
 800460a:	2300      	movs	r3, #0
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
 800460e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	f04f 0000 	mov.w	r0, #0
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	0159      	lsls	r1, r3, #5
 8004620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004624:	0150      	lsls	r0, r2, #5
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4621      	mov	r1, r4
 800462c:	1a51      	subs	r1, r2, r1
 800462e:	6139      	str	r1, [r7, #16]
 8004630:	4629      	mov	r1, r5
 8004632:	eb63 0301 	sbc.w	r3, r3, r1
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004644:	4659      	mov	r1, fp
 8004646:	018b      	lsls	r3, r1, #6
 8004648:	4651      	mov	r1, sl
 800464a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464e:	4651      	mov	r1, sl
 8004650:	018a      	lsls	r2, r1, #6
 8004652:	4651      	mov	r1, sl
 8004654:	ebb2 0801 	subs.w	r8, r2, r1
 8004658:	4659      	mov	r1, fp
 800465a:	eb63 0901 	sbc.w	r9, r3, r1
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800466a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004672:	4690      	mov	r8, r2
 8004674:	4699      	mov	r9, r3
 8004676:	4623      	mov	r3, r4
 8004678:	eb18 0303 	adds.w	r3, r8, r3
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	462b      	mov	r3, r5
 8004680:	eb49 0303 	adc.w	r3, r9, r3
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004692:	4629      	mov	r1, r5
 8004694:	024b      	lsls	r3, r1, #9
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800469c:	4621      	mov	r1, r4
 800469e:	024a      	lsls	r2, r1, #9
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	2200      	movs	r2, #0
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046b0:	f7fb fd9c 	bl	80001ec <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4613      	mov	r3, r2
 80046ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046bc:	e058      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	4611      	mov	r1, r2
 80046ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	f04f 0000 	mov.w	r0, #0
 80046e0:	f04f 0100 	mov.w	r1, #0
 80046e4:	0159      	lsls	r1, r3, #5
 80046e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ea:	0150      	lsls	r0, r2, #5
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4641      	mov	r1, r8
 80046f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80046f6:	4649      	mov	r1, r9
 80046f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004708:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800470c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004710:	ebb2 040a 	subs.w	r4, r2, sl
 8004714:	eb63 050b 	sbc.w	r5, r3, fp
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	00eb      	lsls	r3, r5, #3
 8004722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004726:	00e2      	lsls	r2, r4, #3
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	4643      	mov	r3, r8
 800472e:	18e3      	adds	r3, r4, r3
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	464b      	mov	r3, r9
 8004734:	eb45 0303 	adc.w	r3, r5, r3
 8004738:	607b      	str	r3, [r7, #4]
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004746:	4629      	mov	r1, r5
 8004748:	028b      	lsls	r3, r1, #10
 800474a:	4621      	mov	r1, r4
 800474c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004750:	4621      	mov	r1, r4
 8004752:	028a      	lsls	r2, r1, #10
 8004754:	4610      	mov	r0, r2
 8004756:	4619      	mov	r1, r3
 8004758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475a:	2200      	movs	r2, #0
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	61fa      	str	r2, [r7, #28]
 8004760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004764:	f7fb fd42 	bl	80001ec <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4613      	mov	r3, r2
 800476e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	3301      	adds	r3, #1
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800478a:	e002      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800478e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004790:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004794:	4618      	mov	r0, r3
 8004796:	3750      	adds	r7, #80	@ 0x50
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479e:	bf00      	nop
 80047a0:	40023800 	.word	0x40023800
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	007a1200 	.word	0x007a1200

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047b0:	4b03      	ldr	r3, [pc, #12]	@ (80047c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000010 	.word	0x20000010

080047c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c8:	f7ff fff0 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	@ (80047e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	08007110 	.word	0x08007110

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10b      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800481c:	2b00      	cmp	r3, #0
 800481e:	d075      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004820:	4b91      	ldr	r3, [pc, #580]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004826:	f7fd feff 	bl	8002628 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800482e:	f7fd fefb 	bl	8002628 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e189      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004840:	4b8a      	ldr	r3, [pc, #552]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	019a      	lsls	r2, r3, #6
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	071b      	lsls	r3, r3, #28
 8004864:	4981      	ldr	r1, [pc, #516]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01f      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004878:	4b7c      	ldr	r3, [pc, #496]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800487e:	0f1b      	lsrs	r3, r3, #28
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	019a      	lsls	r2, r3, #6
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	431a      	orrs	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	071b      	lsls	r3, r3, #28
 8004898:	4974      	ldr	r1, [pc, #464]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048a0:	4b72      	ldr	r3, [pc, #456]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048a6:	f023 021f 	bic.w	r2, r3, #31
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	496e      	ldr	r1, [pc, #440]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	019a      	lsls	r2, r3, #6
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	061b      	lsls	r3, r3, #24
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	071b      	lsls	r3, r3, #28
 80048d8:	4964      	ldr	r1, [pc, #400]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048e0:	4b61      	ldr	r3, [pc, #388]	@ (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e6:	f7fd fe9f 	bl	8002628 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048ec:	e008      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048ee:	f7fd fe9b 	bl	8002628 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e129      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004900:	4b5a      	ldr	r3, [pc, #360]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004920:	2b00      	cmp	r3, #0
 8004922:	d079      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004924:	4b52      	ldr	r3, [pc, #328]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800492a:	f7fd fe7d 	bl	8002628 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004932:	f7fd fe79 	bl	8002628 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e107      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004944:	4b49      	ldr	r3, [pc, #292]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800494c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004950:	d0ef      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	d020      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800495e:	4b43      	ldr	r3, [pc, #268]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004964:	0f1b      	lsrs	r3, r3, #28
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	019a      	lsls	r2, r3, #6
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	061b      	lsls	r3, r3, #24
 8004978:	431a      	orrs	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	071b      	lsls	r3, r3, #28
 800497e:	493b      	ldr	r1, [pc, #236]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004986:	4b39      	ldr	r3, [pc, #228]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800498c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	3b01      	subs	r3, #1
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	4934      	ldr	r1, [pc, #208]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01e      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049ac:	4b2f      	ldr	r3, [pc, #188]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	0e1b      	lsrs	r3, r3, #24
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	019a      	lsls	r2, r3, #6
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	061b      	lsls	r3, r3, #24
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4927      	ldr	r1, [pc, #156]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049d4:	4b25      	ldr	r3, [pc, #148]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	4922      	ldr	r1, [pc, #136]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049ea:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049f0:	f7fd fe1a 	bl	8002628 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049f8:	f7fd fe16 	bl	8002628 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0a4      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a0a:	4b18      	ldr	r3, [pc, #96]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a16:	d1ef      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 808b 	beq.w	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	4b10      	ldr	r3, [pc, #64]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a36:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a4e:	f7fd fdeb 	bl	8002628 <HAL_GetTick>
 8004a52:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a54:	e010      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a56:	f7fd fde7 	bl	8002628 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d909      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e075      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004a68:	42470068 	.word	0x42470068
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470070 	.word	0x42470070
 8004a74:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004a78:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0e8      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a84:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02f      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aac:	4b2d      	ldr	r3, [pc, #180]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ab8:	4a29      	ldr	r2, [pc, #164]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004abe:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d114      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004aca:	f7fd fdad 	bl	8002628 <HAL_GetTick>
 8004ace:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad2:	f7fd fda9 	bl	8002628 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e035      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ee      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b00:	d10d      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b02:	4b17      	ldr	r3, [pc, #92]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b16:	4912      	ldr	r1, [pc, #72]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]
 8004b1c:	e005      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	4a0f      	ldr	r2, [pc, #60]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b28:	6093      	str	r3, [r2, #8]
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b36:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004b50:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	40023800 	.word	0x40023800
 8004b64:	42470e40 	.word	0x42470e40
 8004b68:	424711e0 	.word	0x424711e0

08004b6c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e01c      	b.n	8004bb8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	795b      	ldrb	r3, [r3, #5]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d105      	bne.n	8004b94 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fd fb6e 	bl	8002270 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0204 	orr.w	r2, r2, #4
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07b      	b.n	8004cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004be2:	d009      	beq.n	8004bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	e005      	b.n	8004bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd fb4e 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7c:	ea42 0103 	orr.w	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0104 	and.w	r1, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0210 	and.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e01a      	b.n	8004d1a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cfa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7fd fb21 	bl	8002344 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d32:	f7fd fc79 	bl	8002628 <HAL_GetTick>
 8004d36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e12a      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_SPI_Transmit+0x36>
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e122      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_SPI_Transmit+0x48>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e11b      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2203      	movs	r2, #3
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db8:	d10f      	bne.n	8004dda <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e00:	d152      	bne.n	8004ea8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0xee>
 8004e0a:	8b7b      	ldrh	r3, [r7, #26]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d145      	bne.n	8004e9c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e34:	e032      	b.n	8004e9c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d112      	bne.n	8004e6a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e68:	e018      	b.n	8004e9c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fd fbdd 	bl	8002628 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Transmit+0x160>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Transmit+0x166>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e082      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1c7      	bne.n	8004e36 <HAL_SPI_Transmit+0x114>
 8004ea6:	e053      	b.n	8004f50 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_Transmit+0x194>
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d147      	bne.n	8004f46 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004edc:	e033      	b.n	8004f46 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d113      	bne.n	8004f14 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	7812      	ldrb	r2, [r2, #0]
 8004ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f12:	e018      	b.n	8004f46 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f14:	f7fd fb88 	bl	8002628 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d803      	bhi.n	8004f2c <HAL_SPI_Transmit+0x20a>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d102      	bne.n	8004f32 <HAL_SPI_Transmit+0x210>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e02d      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1c6      	bne.n	8004ede <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	6839      	ldr	r1, [r7, #0]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f8bf 	bl	80050d8 <SPI_EndRxTxTransaction>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
  }
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb8:	b2db      	uxtb	r3, r3
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fd8:	f7fd fb26 	bl	8002628 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fe8:	f7fd fb1e 	bl	8002628 <HAL_GetTick>
 8004fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fee:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	015b      	lsls	r3, r3, #5
 8004ff4:	0d1b      	lsrs	r3, r3, #20
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	e054      	b.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	d050      	beq.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005008:	f7fd fb0e 	bl	8002628 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d902      	bls.n	800501e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d13d      	bne.n	800509a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800502c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005036:	d111      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005040:	d004      	beq.n	800504c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d107      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800505a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005064:	d10f      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e017      	b.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d19b      	bne.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000010 	.word	0x20000010

080050d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2201      	movs	r2, #1
 80050ec:	2102      	movs	r1, #2
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff ff6a 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	f043 0220 	orr.w	r2, r3, #32
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e032      	b.n	8005170 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800510a:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <SPI_EndRxTxTransaction+0xa0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1b      	ldr	r2, [pc, #108]	@ (800517c <SPI_EndRxTxTransaction+0xa4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	0d5b      	lsrs	r3, r3, #21
 8005116:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005128:	d112      	bne.n	8005150 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	2180      	movs	r1, #128	@ 0x80
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff ff47 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d016      	beq.n	800516e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e00f      	b.n	8005170 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3b01      	subs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d0f2      	beq.n	8005150 <SPI_EndRxTxTransaction+0x78>
 800516a:	e000      	b.n	800516e <SPI_EndRxTxTransaction+0x96>
        break;
 800516c:	bf00      	nop
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000010 	.word	0x20000010
 800517c:	165e9f81 	.word	0x165e9f81

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e041      	b.n	8005216 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd f8ea 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fad8 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e041      	b.n	80052b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f839 	bl	80052bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3304      	adds	r3, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f000 fa89 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_TIM_PWM_Start+0x24>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e022      	b.n	800533a <HAL_TIM_PWM_Start+0x6a>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d109      	bne.n	800530e <HAL_TIM_PWM_Start+0x3e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e015      	b.n	800533a <HAL_TIM_PWM_Start+0x6a>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d109      	bne.n	8005328 <HAL_TIM_PWM_Start+0x58>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e008      	b.n	800533a <HAL_TIM_PWM_Start+0x6a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07c      	b.n	800543c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0x82>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005350:	e013      	b.n	800537a <HAL_TIM_PWM_Start+0xaa>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start+0x92>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005360:	e00b      	b.n	800537a <HAL_TIM_PWM_Start+0xaa>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xa2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005370:	e003      	b.n	800537a <HAL_TIM_PWM_Start+0xaa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2201      	movs	r2, #1
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fcec 	bl	8005d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2d      	ldr	r2, [pc, #180]	@ (8005444 <HAL_TIM_PWM_Start+0x174>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d004      	beq.n	800539c <HAL_TIM_PWM_Start+0xcc>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <HAL_TIM_PWM_Start+0x178>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d101      	bne.n	80053a0 <HAL_TIM_PWM_Start+0xd0>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <HAL_TIM_PWM_Start+0xd2>
 80053a0:	2300      	movs	r3, #0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <HAL_TIM_PWM_Start+0x174>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d01d      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <HAL_TIM_PWM_Start+0x17c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <HAL_TIM_PWM_Start+0x180>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <HAL_TIM_PWM_Start+0x184>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <HAL_TIM_PWM_Start+0x178>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <HAL_TIM_PWM_Start+0x188>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_TIM_PWM_Start+0x136>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	@ (800545c <HAL_TIM_PWM_Start+0x18c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d111      	bne.n	800542a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b06      	cmp	r3, #6
 8005416:	d010      	beq.n	800543a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	e007      	b.n	800543a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40014000 	.word	0x40014000
 800545c:	40001800 	.word	0x40001800

08005460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800547a:	2302      	movs	r3, #2
 800547c:	e0ae      	b.n	80055dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b0c      	cmp	r3, #12
 800548a:	f200 809f 	bhi.w	80055cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054c9 	.word	0x080054c9
 8005498:	080055cd 	.word	0x080055cd
 800549c:	080055cd 	.word	0x080055cd
 80054a0:	080055cd 	.word	0x080055cd
 80054a4:	08005509 	.word	0x08005509
 80054a8:	080055cd 	.word	0x080055cd
 80054ac:	080055cd 	.word	0x080055cd
 80054b0:	080055cd 	.word	0x080055cd
 80054b4:	0800554b 	.word	0x0800554b
 80054b8:	080055cd 	.word	0x080055cd
 80054bc:	080055cd 	.word	0x080055cd
 80054c0:	080055cd 	.word	0x080055cd
 80054c4:	0800558b 	.word	0x0800558b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f9fc 	bl	80058cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0208 	orr.w	r2, r2, #8
 80054e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0204 	bic.w	r2, r2, #4
 80054f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6999      	ldr	r1, [r3, #24]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	619a      	str	r2, [r3, #24]
      break;
 8005506:	e064      	b.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68b9      	ldr	r1, [r7, #8]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa4c 	bl	80059ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6999      	ldr	r1, [r3, #24]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	021a      	lsls	r2, r3, #8
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	619a      	str	r2, [r3, #24]
      break;
 8005548:	e043      	b.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f000 faa1 	bl	8005a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0208 	orr.w	r2, r2, #8
 8005564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0204 	bic.w	r2, r2, #4
 8005574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69d9      	ldr	r1, [r3, #28]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	61da      	str	r2, [r3, #28]
      break;
 8005588:	e023      	b.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 faf5 	bl	8005b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69d9      	ldr	r1, [r3, #28]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	021a      	lsls	r2, r3, #8
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	61da      	str	r2, [r3, #28]
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	75fb      	strb	r3, [r7, #23]
      break;
 80055d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_TIM_ConfigClockSource+0x1c>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e0b4      	b.n	800576a <HAL_TIM_ConfigClockSource+0x186>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800561e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005638:	d03e      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xd4>
 800563a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800563e:	f200 8087 	bhi.w	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	f000 8086 	beq.w	8005756 <HAL_TIM_ConfigClockSource+0x172>
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800564e:	d87f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005650:	2b70      	cmp	r3, #112	@ 0x70
 8005652:	d01a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0xa6>
 8005654:	2b70      	cmp	r3, #112	@ 0x70
 8005656:	d87b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005658:	2b60      	cmp	r3, #96	@ 0x60
 800565a:	d050      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x11a>
 800565c:	2b60      	cmp	r3, #96	@ 0x60
 800565e:	d877      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005660:	2b50      	cmp	r3, #80	@ 0x50
 8005662:	d03c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xfa>
 8005664:	2b50      	cmp	r3, #80	@ 0x50
 8005666:	d873      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005668:	2b40      	cmp	r3, #64	@ 0x40
 800566a:	d058      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x13a>
 800566c:	2b40      	cmp	r3, #64	@ 0x40
 800566e:	d86f      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d064      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d86b      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d060      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d867      	bhi.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d05c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d05a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x15a>
 8005688:	e062      	b.n	8005750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569a:	f000 fb41 	bl	8005d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80056ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e04f      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	f000 fb2a 	bl	8005d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e03c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 fa9e 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2150      	movs	r1, #80	@ 0x50
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 faf7 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 80056fc:	e02c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570a:	461a      	mov	r2, r3
 800570c:	f000 fabd 	bl	8005c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2160      	movs	r1, #96	@ 0x60
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fae7 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 800571c:	e01c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572a:	461a      	mov	r2, r3
 800572c:	f000 fa7e 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2140      	movs	r1, #64	@ 0x40
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fad7 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 800573c:	e00c      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 face 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 800574e:	e003      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	e000      	b.n	8005758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a46      	ldr	r2, [pc, #280]	@ (80058a0 <TIM_Base_SetConfig+0x12c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005792:	d00f      	beq.n	80057b4 <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a43      	ldr	r2, [pc, #268]	@ (80058a4 <TIM_Base_SetConfig+0x130>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00b      	beq.n	80057b4 <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a42      	ldr	r2, [pc, #264]	@ (80058a8 <TIM_Base_SetConfig+0x134>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d007      	beq.n	80057b4 <TIM_Base_SetConfig+0x40>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a41      	ldr	r2, [pc, #260]	@ (80058ac <TIM_Base_SetConfig+0x138>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d003      	beq.n	80057b4 <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a40      	ldr	r2, [pc, #256]	@ (80058b0 <TIM_Base_SetConfig+0x13c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d108      	bne.n	80057c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <TIM_Base_SetConfig+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d02b      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d4:	d027      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a32      	ldr	r2, [pc, #200]	@ (80058a4 <TIM_Base_SetConfig+0x130>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d023      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a31      	ldr	r2, [pc, #196]	@ (80058a8 <TIM_Base_SetConfig+0x134>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01f      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a30      	ldr	r2, [pc, #192]	@ (80058ac <TIM_Base_SetConfig+0x138>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01b      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	@ (80058b0 <TIM_Base_SetConfig+0x13c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d017      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	@ (80058b4 <TIM_Base_SetConfig+0x140>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d013      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <TIM_Base_SetConfig+0x144>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00f      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2c      	ldr	r2, [pc, #176]	@ (80058bc <TIM_Base_SetConfig+0x148>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00b      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2b      	ldr	r2, [pc, #172]	@ (80058c0 <TIM_Base_SetConfig+0x14c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d007      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2a      	ldr	r2, [pc, #168]	@ (80058c4 <TIM_Base_SetConfig+0x150>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d003      	beq.n	8005826 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a29      	ldr	r2, [pc, #164]	@ (80058c8 <TIM_Base_SetConfig+0x154>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d108      	bne.n	8005838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <TIM_Base_SetConfig+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0xf8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a12      	ldr	r2, [pc, #72]	@ (80058b0 <TIM_Base_SetConfig+0x13c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d103      	bne.n	8005874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b01      	cmp	r3, #1
 8005884:	d105      	bne.n	8005892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	611a      	str	r2, [r3, #16]
  }
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40010400 	.word	0x40010400
 80058b4:	40014000 	.word	0x40014000
 80058b8:	40014400 	.word	0x40014400
 80058bc:	40014800 	.word	0x40014800
 80058c0:	40001800 	.word	0x40001800
 80058c4:	40001c00 	.word	0x40001c00
 80058c8:	40002000 	.word	0x40002000

080058cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f023 0201 	bic.w	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f023 0302 	bic.w	r3, r3, #2
 8005914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a20      	ldr	r2, [pc, #128]	@ (80059a4 <TIM_OC1_SetConfig+0xd8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d003      	beq.n	8005930 <TIM_OC1_SetConfig+0x64>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a1f      	ldr	r2, [pc, #124]	@ (80059a8 <TIM_OC1_SetConfig+0xdc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d10c      	bne.n	800594a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f023 0308 	bic.w	r3, r3, #8
 8005936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <TIM_OC1_SetConfig+0xd8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_OC1_SetConfig+0x8e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a14      	ldr	r2, [pc, #80]	@ (80059a8 <TIM_OC1_SetConfig+0xdc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d111      	bne.n	800597e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	621a      	str	r2, [r3, #32]
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400

080059ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0210 	bic.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0320 	bic.w	r3, r3, #32
 80059f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a22      	ldr	r2, [pc, #136]	@ (8005a90 <TIM_OC2_SetConfig+0xe4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC2_SetConfig+0x68>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a21      	ldr	r2, [pc, #132]	@ (8005a94 <TIM_OC2_SetConfig+0xe8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10d      	bne.n	8005a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <TIM_OC2_SetConfig+0xe4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC2_SetConfig+0x94>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <TIM_OC2_SetConfig+0xe8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d113      	bne.n	8005a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	621a      	str	r2, [r3, #32]
}
 8005a82:	bf00      	nop
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40010400 	.word	0x40010400

08005a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a21      	ldr	r2, [pc, #132]	@ (8005b78 <TIM_OC3_SetConfig+0xe0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0x66>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a20      	ldr	r2, [pc, #128]	@ (8005b7c <TIM_OC3_SetConfig+0xe4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <TIM_OC3_SetConfig+0xe0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC3_SetConfig+0x92>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <TIM_OC3_SetConfig+0xe4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d113      	bne.n	8005b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40010400 	.word	0x40010400

08005b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a12      	ldr	r2, [pc, #72]	@ (8005c24 <TIM_OC4_SetConfig+0xa4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC4_SetConfig+0x68>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a11      	ldr	r2, [pc, #68]	@ (8005c28 <TIM_OC4_SetConfig+0xa8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d109      	bne.n	8005bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	019b      	lsls	r3, r3, #6
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400

08005c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 030a 	bic.w	r3, r3, #10
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0210 	bic.w	r2, r3, #16
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f043 0307 	orr.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	2201      	movs	r2, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a1a      	ldr	r2, [r3, #32]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e05a      	b.n	8005e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a21      	ldr	r2, [pc, #132]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e10:	d01d      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1b      	ldr	r2, [pc, #108]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a17      	ldr	r2, [pc, #92]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10c      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40010000 	.word	0x40010000
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40000c00 	.word	0x40000c00
 8005e98:	40010400 	.word	0x40010400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40001800 	.word	0x40001800

08005ea4 <memset>:
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <memset+0xa>
 8005eac:	4770      	bx	lr
 8005eae:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb2:	e7f9      	b.n	8005ea8 <memset+0x4>

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005eec <__libc_init_array+0x38>)
 8005eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8005ef0 <__libc_init_array+0x3c>)
 8005eba:	1b64      	subs	r4, r4, r5
 8005ebc:	10a4      	asrs	r4, r4, #2
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ef4 <__libc_init_array+0x40>)
 8005ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ef8 <__libc_init_array+0x44>)
 8005ec8:	f000 f826 	bl	8005f18 <_init>
 8005ecc:	1b64      	subs	r4, r4, r5
 8005ece:	10a4      	asrs	r4, r4, #2
 8005ed0:	2600      	movs	r6, #0
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	08007120 	.word	0x08007120
 8005ef0:	08007120 	.word	0x08007120
 8005ef4:	08007120 	.word	0x08007120
 8005ef8:	08007124 	.word	0x08007124

08005efc <memcpy>:
 8005efc:	440a      	add	r2, r1
 8005efe:	4291      	cmp	r1, r2
 8005f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f04:	d100      	bne.n	8005f08 <memcpy+0xc>
 8005f06:	4770      	bx	lr
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f12:	4291      	cmp	r1, r2
 8005f14:	d1f9      	bne.n	8005f0a <memcpy+0xe>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
